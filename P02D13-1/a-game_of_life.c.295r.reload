
;; Function main (main, funcdef_no=6, decl_uid=4967, cgraph_uid=7, symbol_order=6)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=32, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 7:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 14:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 23:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 25:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 30:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 32:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) rm  (1) re {*cmpsi_1}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 37:  (0) r  (1) rmWz {*zero_extendsidi2}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 38:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 39:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 42:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) rBw {*tablejump_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 52:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 58:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 65:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 71:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 78:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 84:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 89:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 93:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 100:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 106:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 111:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 113:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 114:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 125:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 127:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 131:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 138:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 144:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 149:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 153:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 157:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 166:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=144 from oldreg=136, assigning class GENERAL_REGS to r144
  166: {r144:SI=r144:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  220: r144:SI=r135:SI
    Inserting insn reload after:
  221: r136:SI=r144:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 167
	 Choosing alt 0 in insn 167:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 169:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 172:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 174:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 175:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 176:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 178:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 179:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 180:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 182:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 186:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 189:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 190:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 193:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 194:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11 12
EBB 13 14
EBB 15
EBB 16 17
EBB 18

********** Pseudo live ranges #1: **********

  BB 18
   Insn 202: point = 0, n_alt = -1
   Insn 201: point = 0, n_alt = -2
   Insn 197: point = 1, n_alt = -2
  BB 9
   Insn 215: point = 4, n_alt = -1
   Insn 115: point = 4, n_alt = 0
   Insn 114: point = 5, n_alt = 0
   Insn 113: point = 5, n_alt = 3
   Insn 112: point = 5, n_alt = -2
   Insn 111: point = 6, n_alt = 4
  BB 17
   Insn 194: point = 7, n_alt = 0
   Insn 193: point = 8, n_alt = 0
   Insn 192: point = 8, n_alt = -2
   Insn 191: point = 9, n_alt = -2
   Insn 190: point = 10, n_alt = 3
   Insn 189: point = 11, n_alt = 0
  BB 16
   Insn 187: point = 12, n_alt = -1
   Insn 186: point = 12, n_alt = 0
  BB 10
   Insn 217: point = 12, n_alt = -1
  BB 8
   Insn 213: point = 12, n_alt = -1
   Insn 106: point = 12, n_alt = 5
   Insn 105: point = 13, n_alt = -2
   Insn 104: point = 14, n_alt = 0
   Insn 103: point = 14, n_alt = -2
   Insn 102: point = 15, n_alt = -2
   Insn 101: point = 16, n_alt = -2
   Insn 100: point = 17, n_alt = 3
   Insn 99: point = 18, n_alt = 0
   Insn 98: point = 19, n_alt = 0
  BB 6
   Insn 209: point = 20, n_alt = -1
   Insn 84: point = 20, n_alt = 5
   Insn 83: point = 21, n_alt = -2
   Insn 82: point = 22, n_alt = 0
   Insn 81: point = 22, n_alt = -2
   Insn 80: point = 23, n_alt = -2
   Insn 79: point = 24, n_alt = -2
   Insn 78: point = 25, n_alt = 3
   Insn 77: point = 26, n_alt = 0
   Insn 76: point = 27, n_alt = 0
  BB 5
   Insn 207: point = 28, n_alt = -1
   Insn 71: point = 28, n_alt = 5
   Insn 70: point = 29, n_alt = -2
   Insn 69: point = 30, n_alt = 0
   Insn 68: point = 30, n_alt = -2
   Insn 67: point = 31, n_alt = -2
   Insn 66: point = 32, n_alt = -2
   Insn 65: point = 33, n_alt = 3
   Insn 64: point = 34, n_alt = 0
   Insn 63: point = 35, n_alt = 0
  BB 4
   Insn 205: point = 36, n_alt = -1
   Insn 58: point = 36, n_alt = 5
   Insn 57: point = 37, n_alt = -2
   Insn 56: point = 38, n_alt = 0
   Insn 55: point = 38, n_alt = -2
   Insn 54: point = 39, n_alt = -2
   Insn 53: point = 40, n_alt = -2
   Insn 52: point = 41, n_alt = 3
   Insn 51: point = 42, n_alt = 0
   Insn 50: point = 43, n_alt = 0
  BB 7
   Insn 211: point = 44, n_alt = -1
   Insn 93: point = 44, n_alt = 5
   Insn 92: point = 45, n_alt = -2
   Insn 91: point = 46, n_alt = 0
   Insn 90: point = 46, n_alt = -2
   Insn 89: point = 47, n_alt = 3
  BB 3
   Insn 44: point = 48, n_alt = 0
   Insn 43: point = 49, n_alt = 0
   Insn 42: point = 51, n_alt = 4
   Insn 41: point = 52, n_alt = 0
   Insn 40: point = 54, n_alt = 0
   Insn 39: point = 56, n_alt = 4
   Insn 38: point = 57, n_alt = 1
   Insn 37: point = 59, n_alt = 3
  BB 2
   Insn 36: point = 62, n_alt = -1
   Insn 35: point = 62, n_alt = 0
   Insn 32: point = 62, n_alt = 0
   Insn 31: point = 64, n_alt = 0
   Insn 30: point = 65, n_alt = 8
   Insn 29: point = 66, n_alt = -2
   Insn 28: point = 67, n_alt = 0
   Insn 27: point = 67, n_alt = 0
   Insn 26: point = 67, n_alt = -2
   Insn 25: point = 68, n_alt = 4
   Insn 24: point = 69, n_alt = 1
   Insn 23: point = 69, n_alt = 5
   Insn 22: point = 70, n_alt = -2
   Insn 21: point = 71, n_alt = 0
   Insn 20: point = 71, n_alt = -2
   Insn 19: point = 72, n_alt = -2
   Insn 18: point = 73, n_alt = -2
   Insn 17: point = 74, n_alt = 3
   Insn 16: point = 75, n_alt = 0
   Insn 15: point = 76, n_alt = 0
   Insn 14: point = 77, n_alt = 5
   Insn 13: point = 78, n_alt = -2
   Insn 12: point = 79, n_alt = 0
   Insn 11: point = 79, n_alt = -2
   Insn 10: point = 80, n_alt = -2
   Insn 9: point = 81, n_alt = 0
   Insn 8: point = 82, n_alt = 0
   Insn 7: point = 83, n_alt = 8
   Insn 6: point = 83, n_alt = 1
   Insn 5: point = 83, n_alt = 1
  BB 15
   Insn 182: point = 83, n_alt = 0
   Insn 181: point = 83, n_alt = -2
   Insn 180: point = 84, n_alt = 4
   Insn 179: point = 85, n_alt = 0
   Insn 178: point = 85, n_alt = 0
   Insn 177: point = 85, n_alt = -2
   Insn 176: point = 86, n_alt = 0
   Insn 175: point = 86, n_alt = 3
   Insn 174: point = 87, n_alt = 0
   Insn 173: point = 87, n_alt = -2
   Insn 172: point = 88, n_alt = 0
  BB 14
   Insn 169: point = 89, n_alt = 1
   Insn 168: point = 90, n_alt = 0
   Insn 167: point = 92, n_alt = 0
   Insn 221: point = 94, n_alt = -2
	Hard reg 1 is preferable by r144 with profit 1000
   Insn 166: point = 96, n_alt = 0
   Insn 220: point = 97, n_alt = -2
	Hard reg 1 is preferable by r144 with profit 1000
	Hard reg 0 is preferable by r144 with profit 1000
   Insn 163: point = 98, n_alt = 0
  BB 13
   Insn 161: point = 99, n_alt = -1
   Insn 160: point = 99, n_alt = 0
  BB 12
   Insn 157: point = 99, n_alt = 0
  BB 11
   Insn 155: point = 99, n_alt = -1
   Insn 154: point = 99, n_alt = 0
   Insn 153: point = 99, n_alt = 8
   Insn 152: point = 100, n_alt = -2
   Insn 151: point = 101, n_alt = 0
   Insn 150: point = 101, n_alt = -2
   Insn 149: point = 102, n_alt = 3
   Insn 148: point = 103, n_alt = 0
   Insn 147: point = 103, n_alt = 0
   Insn 146: point = 103, n_alt = -2
   Insn 145: point = 104, n_alt = 0
   Insn 144: point = 104, n_alt = 3
   Insn 143: point = 105, n_alt = 0
   Insn 142: point = 105, n_alt = 0
   Insn 141: point = 105, n_alt = -2
   Insn 140: point = 106, n_alt = -2
   Insn 139: point = 107, n_alt = -2
   Insn 138: point = 108, n_alt = 3
   Insn 137: point = 109, n_alt = 0
   Insn 136: point = 110, n_alt = 0
   Insn 135: point = 111, n_alt = 0
   Insn 134: point = 111, n_alt = -2
   Insn 133: point = 112, n_alt = -2
   Insn 132: point = 113, n_alt = -2
   Insn 131: point = 114, n_alt = 3
   Insn 130: point = 115, n_alt = 0
   Insn 129: point = 116, n_alt = 0
   Insn 128: point = 117, n_alt = 0
   Insn 127: point = 117, n_alt = 3
   Insn 126: point = 117, n_alt = -2
   Insn 125: point = 118, n_alt = 4
   Insn 124: point = 119, n_alt = -2
   Insn 123: point = 120, n_alt = 0
 r82: [65..66]
 r83: [63..64]
 r84: [103..104]
 r85: [101..102]
 r86: [99..100]
 r87: [87..88]
 r88: [85..86]
 r89: [7..7] [2..4]
 r90: [0..1]
 r91: [80..82]
 r92: [79..81]
 r93: [77..78]
 r94: [73..76]
 r95: [72..75]
 r96: [71..74]
 r97: [69..70]
 r98: [67..68]
 r99: [60..62]
 r100: [58..59]
 r101: [55..57]
 r102: [55..56]
 r103: [53..54]
 r104: [50..52]
 r105: [48..49]
 r106: [50..51]
 r107: [40..43]
 r108: [39..42]
 r109: [38..41]
 r110: [36..37]
 r111: [32..35]
 r112: [31..34]
 r113: [30..33]
 r114: [28..29]
 r115: [24..27]
 r116: [23..26]
 r117: [22..25]
 r118: [20..21]
 r119: [46..47]
 r120: [44..45]
 r121: [16..19]
 r122: [15..18]
 r123: [14..17]
 r124: [12..13]
 r125: [5..6]
 r126: [119..120]
 r127: [117..118]
 r128: [113..116]
 r129: [112..115]
 r130: [111..114]
 r131: [107..110]
 r132: [106..109]
 r133: [105..108]
 r135: [93..98]
 r136: [93..94]
 r137: [91..92]
 r138: [89..90]
 r139: [83..84]
 r140: [9..11]
 r141: [8..10]
 r144: [95..97]
Compressing live ranges: from 121 to 83 - 68%
Ranges after the compression:
 r82: [43..44]
 r83: [41..42]
 r84: [73..74]
 r85: [71..72]
 r86: [69..70]
 r87: [59..60]
 r88: [57..58]
 r89: [6..6] [2..3]
 r90: [0..1]
 r91: [53..54]
 r92: [53..54]
 r93: [51..52]
 r94: [49..50]
 r95: [49..50]
 r96: [49..50]
 r97: [47..48]
 r98: [45..46]
 r99: [39..40]
 r100: [37..38]
 r101: [35..36]
 r102: [35..36]
 r103: [33..34]
 r104: [31..32]
 r105: [29..30]
 r106: [31..32]
 r107: [23..24]
 r108: [23..24]
 r109: [23..24]
 r110: [21..22]
 r111: [19..20]
 r112: [19..20]
 r113: [19..20]
 r114: [17..18]
 r115: [15..16]
 r116: [15..16]
 r117: [15..16]
 r118: [13..14]
 r119: [27..28]
 r120: [25..26]
 r121: [11..12]
 r122: [11..12]
 r123: [11..12]
 r124: [9..10]
 r125: [4..5]
 r126: [81..82]
 r127: [79..80]
 r128: [77..78]
 r129: [77..78]
 r130: [77..78]
 r131: [75..76]
 r132: [75..76]
 r133: [75..76]
 r135: [65..68]
 r136: [65..66]
 r137: [63..64]
 r138: [61..62]
 r139: [55..56]
 r140: [7..8]
 r141: [7..8]
 r144: [67..68]

********** Assignment #1: **********

	 Assigning to 144 (cl=GENERAL_REGS, orig=136, freq=3000, tfirst=144, tfreq=3000)...
	   Assign 1 to reload r144 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=32, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 29
changing reg in insn 31
changing reg in insn 32
changing reg in insn 144
changing reg in insn 146
changing reg in insn 149
changing reg in insn 150
changing reg in insn 152
changing reg in insn 172
changing reg in insn 173
changing reg in insn 175
changing reg in insn 177
changing reg in insn 194
changing reg in insn 115
changing reg in insn 197
changing reg in insn 197
changing reg in insn 201
changing reg in insn 8
changing reg in insn 10
changing reg in insn 9
changing reg in insn 11
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 18
changing reg in insn 16
changing reg in insn 19
changing reg in insn 17
changing reg in insn 20
changing reg in insn 22
changing reg in insn 23
changing reg in insn 25
changing reg in insn 26
changing reg in insn 32
changing reg in insn 37
changing reg in insn 35
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 40
changing reg in insn 39
changing reg in insn 40
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 43
changing reg in insn 43
changing reg in insn 44
changing reg in insn 42
changing reg in insn 43
changing reg in insn 50
changing reg in insn 53
changing reg in insn 51
changing reg in insn 54
changing reg in insn 52
changing reg in insn 55
changing reg in insn 57
changing reg in insn 58
changing reg in insn 63
changing reg in insn 66
changing reg in insn 64
changing reg in insn 67
changing reg in insn 65
changing reg in insn 68
changing reg in insn 70
changing reg in insn 71
changing reg in insn 76
changing reg in insn 79
changing reg in insn 77
changing reg in insn 80
changing reg in insn 78
changing reg in insn 81
changing reg in insn 83
changing reg in insn 84
changing reg in insn 89
changing reg in insn 90
changing reg in insn 92
changing reg in insn 93
changing reg in insn 98
changing reg in insn 101
changing reg in insn 99
changing reg in insn 102
changing reg in insn 100
changing reg in insn 103
changing reg in insn 105
changing reg in insn 106
changing reg in insn 111
changing reg in insn 112
changing reg in insn 123
changing reg in insn 124
changing reg in insn 125
changing reg in insn 126
changing reg in insn 129
changing reg in insn 132
changing reg in insn 130
changing reg in insn 133
changing reg in insn 131
changing reg in insn 134
changing reg in insn 136
changing reg in insn 139
changing reg in insn 137
changing reg in insn 140
changing reg in insn 138
changing reg in insn 141
changing reg in insn 163
changing reg in insn 167
changing reg in insn 168
changing reg in insn 168
changing reg in insn 169
changing reg in insn 180
changing reg in insn 181
changing reg in insn 189
changing reg in insn 191
changing reg in insn 190
changing reg in insn 192
deleting insn with uid = 13.
deleting insn with uid = 18.
deleting insn with uid = 22.
deleting insn with uid = 29.
deleting insn with uid = 53.
deleting insn with uid = 57.
deleting insn with uid = 66.
deleting insn with uid = 70.
deleting insn with uid = 79.
deleting insn with uid = 83.
deleting insn with uid = 92.
deleting insn with uid = 101.
deleting insn with uid = 105.
deleting insn with uid = 132.
deleting insn with uid = 139.
deleting insn with uid = 152.
deleting insn with uid = 221.
deleting insn with uid = 197.
deleting insn with uid = 201.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 12.
verify found no changes in insn with uid = 21.
verify found no changes in insn with uid = 27.
verify found no changes in insn with uid = 28.
verify found no changes in insn with uid = 56.
verify found no changes in insn with uid = 69.
verify found no changes in insn with uid = 82.
verify found no changes in insn with uid = 91.
verify found no changes in insn with uid = 104.
verify found no changes in insn with uid = 114.
verify found no changes in insn with uid = 128.
verify found no changes in insn with uid = 135.
verify found no changes in insn with uid = 142.
verify found no changes in insn with uid = 143.
verify found no changes in insn with uid = 147.
verify found no changes in insn with uid = 148.
verify found no changes in insn with uid = 151.
verify found no changes in insn with uid = 174.
verify found no changes in insn with uid = 178.
verify found no changes in insn with uid = 179.
verify found no changes in insn with uid = 182.
verify found no changes in insn with uid = 193.


main

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={56d,44u} r1={36d,13u} r2={30d,7u} r4={35d,12u} r5={41d,18u} r6={1d,67u} r7={1d,40u} r8={22d} r9={22d} r10={22d} r11={22d} r12={22d} r13={22d} r14={22d} r15={22d} r17={33d,4u} r18={22d} r19={1d,1u} r20={23d} r21={23d} r22={23d} r23={23d} r24={23d} r25={23d} r26={23d} r27={23d} r28={22d} r29={22d} r30={22d} r31={22d} r32={22d} r33={22d} r34={22d} r35={22d} r36={23d} r37={23d} r38={22d} r39={22d} r44={22d} r45={22d} r46={22d} r47={22d} r48={22d} r49={22d} r50={22d} r51={22d} r52={22d} r53={22d} r54={22d} r55={22d} r56={22d} r57={22d} r58={22d} r59={22d} r60={22d} r61={22d} r62={22d} r63={22d} r64={22d} r65={22d} r66={22d} r67={22d} r68={22d} r69={22d} r70={22d} r71={22d} r72={22d} r73={22d} r74={22d} r75={22d} 
;;    total ref usage 1792{1586d,206u,0e} in 137{115 regular + 22 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 82 83 91 92 93 94 95 96 97 98 99
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 matrix_height+0 S4 A64])
        (const_int 25 [0x19])) "game_of_life.c":23:9 75 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 matrix_width+0 S4 A32])
        (const_int 80 [0x50])) "game_of_life.c":24:9 75 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -22 [0xffffffffffffffea])) [0 key+0 S1 A16])
        (const_int -1 [0xffffffffffffffff])) "game_of_life.c":25:10 77 {*movqi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:SI 1 dx [91])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 matrix_width+0 S4 A32])) "game_of_life.c":26:15 75 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SI 0 ax [92])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 matrix_height+0 S4 A64])) "game_of_life.c":26:15 75 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:SI 4 si)
        (reg:SI 1 dx [91])) "game_of_life.c":26:15 75 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:SI 5 di)
        (reg:SI 0 ax [92])) "game_of_life.c":26:15 75 {*movsi_internal}
     (nil))
(call_insn 12 11 14 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dynamic_array_alloc") [flags 0x3]  <function_decl 0x7fd3e8e07d00 dynamic_array_alloc>) [0 dynamic_array_alloc S1 A8])
            (const_int 0 [0]))) "game_of_life.c":26:15 824 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 14 12 15 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
        (reg:DI 0 ax [93])) "game_of_life.c":26:15 74 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:SI 1 dx [94])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 matrix_width+0 S4 A32])) "game_of_life.c":27:9 75 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:SI 2 cx [95])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 matrix_height+0 S4 A64])) "game_of_life.c":27:9 75 {*movsi_internal}
     (nil))
(insn 17 16 19 2 (set (reg:DI 0 ax [96])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":27:9 74 {*movdi_internal}
     (nil))
(insn 19 17 20 2 (set (reg:SI 4 si)
        (reg:SI 2 cx [95])) "game_of_life.c":27:9 75 {*movsi_internal}
     (nil))
(insn 20 19 21 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [96])) "game_of_life.c":27:9 74 {*movdi_internal}
     (nil))
(call_insn 21 20 23 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dynamic_array_init") [flags 0x3]  <function_decl 0x7fd3e8e07f00 dynamic_array_init>) [0 dynamic_array_init S1 A8])
            (const_int 0 [0]))) "game_of_life.c":27:9 824 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 23 21 24 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
        (reg:DI 0 ax [97])) "game_of_life.c":27:9 74 {*movdi_internal}
     (nil))
(insn 24 23 25 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [2 speed+0 S4 A32])
        (const_int 131072 [0x20000])) "game_of_life.c":28:9 75 {*movsi_internal}
     (nil))
(insn 25 24 26 2 (set (reg:DI 0 ax [98])
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7fd3e8e731b0 *.LC0>)) "game_of_life.c":30:5 74 {*movdi_internal}
     (nil))
(insn 26 25 27 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [98])) "game_of_life.c":30:5 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7fd3e8e731b0 *.LC0>)
        (nil)))
(call_insn 27 26 28 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fd3e900f800 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "game_of_life.c":30:5 824 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(call_insn 28 27 30 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("getchar") [flags 0x41]  <function_decl 0x7fd3e90eef00 getchar>) [0 getchar S1 A8])
            (const_int 0 [0]))) "game_of_life.c":31:14 824 {*call_value}
     (nil)
    (nil))
(insn 30 28 31 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -21 [0xffffffffffffffeb])) [0 h+0 S1 A8])
        (reg:QI 0 ax [orig:82 _1 ] [82])) "game_of_life.c":31:10 77 {*movqi_internal}
     (nil))
(insn 31 30 32 2 (set (reg:SI 0 ax [orig:83 _2 ] [83])
        (sign_extend:SI (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -21 [0xffffffffffffffeb])) [0 h+0 S1 A8]))) "game_of_life.c":32:5 153 {extendqisi2}
     (nil))
(insn 32 31 35 2 (parallel [
            (set (reg:SI 0 ax [99])
                (plus:SI (reg:SI 0 ax [orig:83 _2 ] [83])
                    (const_int -49 [0xffffffffffffffcf])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":32:5 209 {*addsi_1}
     (nil))
(insn 35 32 36 2 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [99])
            (const_int 4 [0x4]))) "game_of_life.c":32:5 11 {*cmpsi_1}
     (nil))
(jump_insn 36 35 204 2 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 109)
            (pc))) "game_of_life.c":32:5 806 {*jcc}
     (nil)
 -> 109)
;;  succ:       9
;;              3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 99

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 99
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 99
;; lr  def 	 17 [flags] 100 101 102 103 104 105 106
(note 204 36 37 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 37 204 38 3 (set (reg:DI 0 ax [100])
        (zero_extend:DI (reg:SI 0 ax [99]))) "game_of_life.c":32:5 138 {*zero_extendsidi2}
     (nil))
(insn 38 37 39 3 (parallel [
            (set (reg:DI 1 dx [101])
                (ashift:DI (reg:DI 0 ax [100])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":32:5 656 {*ashldi3_1}
     (nil))
(insn 39 38 40 3 (set (reg:DI 0 ax [102])
        (label_ref:DI 45)) "game_of_life.c":32:5 74 {*movdi_internal}
     (insn_list:REG_LABEL_OPERAND 45 (nil)))
(insn 40 39 41 3 (set (reg:SI 0 ax [103])
        (mem/u/c:SI (plus:DI (reg:DI 1 dx [101])
                (reg:DI 0 ax [102])) [0  S4 A8])) "game_of_life.c":32:5 75 {*movsi_internal}
     (nil))
(insn 41 40 42 3 (set (reg:DI 0 ax [104])
        (sign_extend:DI (reg:SI 0 ax [103]))) "game_of_life.c":32:5 147 {*extendsidi2_rex64}
     (nil))
(insn 42 41 43 3 (set (reg:DI 1 dx [106])
        (label_ref:DI 45)) "game_of_life.c":32:5 74 {*movdi_internal}
     (insn_list:REG_LABEL_OPERAND 45 (nil)))
(insn 43 42 44 3 (parallel [
            (set (reg:DI 0 ax [105])
                (plus:DI (reg:DI 0 ax [104])
                    (reg:DI 1 dx [106])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":32:5 210 {*adddi_1}
     (nil))
(jump_insn 44 43 45 3 (parallel [
            (set (pc)
                (reg:DI 0 ax [105]))
            (use (label_ref 45))
        ]) "game_of_life.c":32:5 811 {*tablejump_1}
     (nil)
 -> 45)
;;  succ:       8 [20.0% (adjusted)] 
;;              4 [20.0% (adjusted)] 
;;              5 [20.0% (adjusted)] 
;;              6 [20.0% (adjusted)] 
;;              7 [20.0% (adjusted)] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; Insn is not within a basic block
(code_label 45 44 46 4 (nil) [3 uses])
;; Insn is not within a basic block
(jump_table_data 46 45 47 (addr_diff_vec:SI (label_ref:DI 45)
         [
            (label_ref:DI 48)
            (label_ref:DI 61)
            (label_ref:DI 74)
            (label_ref:DI 87)
            (label_ref:DI 96)
        ]
        (const_int 0 [0])
        (const_int 0 [0])))
(barrier 47 46 48)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 [20.0% (adjusted)] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 107 108 109 110
(code_label 48 47 49 4 8 (nil) [1 uses])
(note 49 48 50 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 4 (set (reg:SI 1 dx [107])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 matrix_width+0 S4 A32])) "game_of_life.c":34:17 75 {*movsi_internal}
     (nil))
(insn 51 50 52 4 (set (reg:SI 2 cx [108])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 matrix_height+0 S4 A64])) "game_of_life.c":34:17 75 {*movsi_internal}
     (nil))
(insn 52 51 54 4 (set (reg:DI 0 ax [109])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":34:17 74 {*movdi_internal}
     (nil))
(insn 54 52 55 4 (set (reg:SI 4 si)
        (reg:SI 2 cx [108])) "game_of_life.c":34:17 75 {*movsi_internal}
     (nil))
(insn 55 54 56 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [109])) "game_of_life.c":34:17 74 {*movdi_internal}
     (nil))
(call_insn 56 55 58 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dynamic_array_init_life") [flags 0x3]  <function_decl 0x7fd3e8e0d000 dynamic_array_init_life>) [0 dynamic_array_init_life S1 A8])
            (const_int 0 [0]))) "game_of_life.c":34:17 824 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 58 56 205 4 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
        (reg:DI 0 ax [110])) "game_of_life.c":34:17 74 {*movdi_internal}
     (nil))
(jump_insn 205 58 206 4 (set (pc)
        (label_ref 118)) "game_of_life.c":35:13 807 {jump}
     (nil)
 -> 118)
;;  succ:       10 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 206 205 61)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       3 [20.0% (adjusted)] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 111 112 113 114
(code_label 61 206 62 5 7 (nil) [1 uses])
(note 62 61 63 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 63 62 64 5 (set (reg:SI 1 dx [111])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 matrix_width+0 S4 A32])) "game_of_life.c":37:17 75 {*movsi_internal}
     (nil))
(insn 64 63 65 5 (set (reg:SI 2 cx [112])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 matrix_height+0 S4 A64])) "game_of_life.c":37:17 75 {*movsi_internal}
     (nil))
(insn 65 64 67 5 (set (reg:DI 0 ax [113])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":37:17 74 {*movdi_internal}
     (nil))
(insn 67 65 68 5 (set (reg:SI 4 si)
        (reg:SI 2 cx [112])) "game_of_life.c":37:17 75 {*movsi_internal}
     (nil))
(insn 68 67 69 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [113])) "game_of_life.c":37:17 74 {*movdi_internal}
     (nil))
(call_insn 69 68 71 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dynamic_array_init_life2") [flags 0x3]  <function_decl 0x7fd3e8e0d100 dynamic_array_init_life2>) [0 dynamic_array_init_life2 S1 A8])
            (const_int 0 [0]))) "game_of_life.c":37:17 824 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 71 69 207 5 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
        (reg:DI 0 ax [114])) "game_of_life.c":37:17 74 {*movdi_internal}
     (nil))
(jump_insn 207 71 208 5 (set (pc)
        (label_ref 118)) "game_of_life.c":38:13 807 {jump}
     (nil)
 -> 118)
;;  succ:       10 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 208 207 74)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       3 [20.0% (adjusted)] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 115 116 117 118
(code_label 74 208 75 6 6 (nil) [1 uses])
(note 75 74 76 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 76 75 77 6 (set (reg:SI 1 dx [115])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 matrix_width+0 S4 A32])) "game_of_life.c":40:17 75 {*movsi_internal}
     (nil))
(insn 77 76 78 6 (set (reg:SI 2 cx [116])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 matrix_height+0 S4 A64])) "game_of_life.c":40:17 75 {*movsi_internal}
     (nil))
(insn 78 77 80 6 (set (reg:DI 0 ax [117])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":40:17 74 {*movdi_internal}
     (nil))
(insn 80 78 81 6 (set (reg:SI 4 si)
        (reg:SI 2 cx [116])) "game_of_life.c":40:17 75 {*movsi_internal}
     (nil))
(insn 81 80 82 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [117])) "game_of_life.c":40:17 74 {*movdi_internal}
     (nil))
(call_insn 82 81 84 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dynamic_array_init_life3") [flags 0x3]  <function_decl 0x7fd3e8e0d200 dynamic_array_init_life3>) [0 dynamic_array_init_life3 S1 A8])
            (const_int 0 [0]))) "game_of_life.c":40:17 824 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 84 82 209 6 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
        (reg:DI 0 ax [118])) "game_of_life.c":40:17 74 {*movdi_internal}
     (nil))
(jump_insn 209 84 210 6 (set (pc)
        (label_ref 118)) "game_of_life.c":41:13 807 {jump}
     (nil)
 -> 118)
;;  succ:       10 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 210 209 87)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       3 [20.0% (adjusted)] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 119 120
(code_label 87 210 88 7 5 (nil) [1 uses])
(note 88 87 89 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 89 88 90 7 (set (reg:DI 0 ax [119])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":43:17 74 {*movdi_internal}
     (nil))
(insn 90 89 91 7 (set (reg:DI 5 di)
        (reg:DI 0 ax [119])) "game_of_life.c":43:17 74 {*movdi_internal}
     (nil))
(call_insn 91 90 93 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dynamic_array_init_life4") [flags 0x3]  <function_decl 0x7fd3e8e0d300 dynamic_array_init_life4>) [0 dynamic_array_init_life4 S1 A8])
            (const_int 0 [0]))) "game_of_life.c":43:17 824 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 93 91 211 7 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
        (reg:DI 0 ax [120])) "game_of_life.c":43:17 74 {*movdi_internal}
     (nil))
(jump_insn 211 93 212 7 (set (pc)
        (label_ref 118)) "game_of_life.c":44:13 807 {jump}
     (nil)
 -> 118)
;;  succ:       10 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 212 211 96)
;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       3 [20.0% (adjusted)] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 121 122 123 124
(code_label 96 212 97 8 3 (nil) [1 uses])
(note 97 96 98 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 98 97 99 8 (set (reg:SI 1 dx [121])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 matrix_width+0 S4 A32])) "game_of_life.c":46:17 75 {*movsi_internal}
     (nil))
(insn 99 98 100 8 (set (reg:SI 2 cx [122])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 matrix_height+0 S4 A64])) "game_of_life.c":46:17 75 {*movsi_internal}
     (nil))
(insn 100 99 102 8 (set (reg:DI 0 ax [123])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":46:17 74 {*movdi_internal}
     (nil))
(insn 102 100 103 8 (set (reg:SI 4 si)
        (reg:SI 2 cx [122])) "game_of_life.c":46:17 75 {*movsi_internal}
     (nil))
(insn 103 102 104 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [123])) "game_of_life.c":46:17 74 {*movdi_internal}
     (nil))
(call_insn 104 103 106 8 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dynamic_array_init_life5") [flags 0x3]  <function_decl 0x7fd3e8e0d400 dynamic_array_init_life5>) [0 dynamic_array_init_life5 S1 A8])
            (const_int 0 [0]))) "game_of_life.c":46:17 824 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 106 104 213 8 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
        (reg:DI 0 ax [124])) "game_of_life.c":46:17 74 {*movdi_internal}
     (nil))
(jump_insn 213 106 214 8 (set (pc)
        (label_ref 118)) "game_of_life.c":47:13 807 {jump}
     (nil)
 -> 118)
;;  succ:       10 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 214 213 109)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 89 125
(code_label 109 214 110 9 2 (nil) [1 uses])
(note 110 109 111 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 111 110 112 9 (set (reg:DI 0 ax [125])
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7fd3e8e73240 *.LC1>)) "game_of_life.c":49:13 74 {*movdi_internal}
     (nil))
(insn 112 111 113 9 (set (reg:DI 5 di)
        (reg:DI 0 ax [125])) "game_of_life.c":49:13 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7fd3e8e73240 *.LC1>)
        (nil)))
(insn 113 112 114 9 (set (reg:QI 0 ax)
        (const_int 0 [0])) "game_of_life.c":49:13 77 {*movqi_internal}
     (nil))
(call_insn 114 113 115 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fd3e900f100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "game_of_life.c":49:13 824 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 115 114 215 9 (set (reg:SI 0 ax [orig:89 _13 ] [89])
        (const_int 1 [0x1])) "game_of_life.c":50:20 75 {*movsi_internal}
     (nil))
(jump_insn 215 115 216 9 (set (pc)
        (label_ref 195)) "game_of_life.c":50:20 807 {jump}
     (nil)
 -> 195)
;;  succ:       18 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 89

(barrier 216 215 118)
;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       7 [always] 
;;              4 [always] 
;;              5 [always] 
;;              6 [always] 
;;              8 [always] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 118 216 119 10 9 (nil) [5 uses])
(note 119 118 217 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(jump_insn 217 119 218 10 (set (pc)
        (label_ref 183)) "game_of_life.c":53:11 807 {jump}
     (nil)
 -> 183)
;;  succ:       16 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 218 217 185)
;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       16
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 84 85 86 126 127 128 129 130 131 132 133
(code_label 185 218 122 11 14 (nil) [1 uses])
(note 122 185 123 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 123 122 124 11 (set (reg:SI 0 ax [126])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [2 speed+0 S4 A32])) "game_of_life.c":54:9 75 {*movsi_internal}
     (nil))
(insn 124 123 125 11 (set (reg:SI 4 si)
        (reg:SI 0 ax [126])) "game_of_life.c":54:9 75 {*movsi_internal}
     (nil))
(insn 125 124 126 11 (set (reg:DI 0 ax [127])
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7fd3e8e732d0 *.LC2>)) "game_of_life.c":54:9 74 {*movdi_internal}
     (nil))
(insn 126 125 127 11 (set (reg:DI 5 di)
        (reg:DI 0 ax [127])) "game_of_life.c":54:9 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7fd3e8e732d0 *.LC2>)
        (nil)))
(insn 127 126 128 11 (set (reg:QI 0 ax)
        (const_int 0 [0])) "game_of_life.c":54:9 77 {*movqi_internal}
     (nil))
(call_insn 128 127 129 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fd3e900f100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "game_of_life.c":54:9 824 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 129 128 130 11 (set (reg:SI 1 dx [128])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 matrix_width+0 S4 A32])) "game_of_life.c":55:9 75 {*movsi_internal}
     (nil))
(insn 130 129 131 11 (set (reg:SI 2 cx [129])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 matrix_height+0 S4 A64])) "game_of_life.c":55:9 75 {*movsi_internal}
     (nil))
(insn 131 130 133 11 (set (reg:DI 0 ax [130])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":55:9 74 {*movdi_internal}
     (nil))
(insn 133 131 134 11 (set (reg:SI 4 si)
        (reg:SI 2 cx [129])) "game_of_life.c":55:9 75 {*movsi_internal}
     (nil))
(insn 134 133 135 11 (set (reg:DI 5 di)
        (reg:DI 0 ax [130])) "game_of_life.c":55:9 74 {*movdi_internal}
     (nil))
(call_insn 135 134 136 11 (call (mem:QI (symbol_ref:DI ("dynamic_array_print") [flags 0x3]  <function_decl 0x7fd3e8e07c00 dynamic_array_print>) [0 dynamic_array_print S1 A8])
        (const_int 0 [0])) "game_of_life.c":55:9 813 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 136 135 137 11 (set (reg:SI 1 dx [131])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 matrix_width+0 S4 A32])) "game_of_life.c":56:9 75 {*movsi_internal}
     (nil))
(insn 137 136 138 11 (set (reg:SI 2 cx [132])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 matrix_height+0 S4 A64])) "game_of_life.c":56:9 75 {*movsi_internal}
     (nil))
(insn 138 137 140 11 (set (reg:DI 0 ax [133])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":56:9 74 {*movdi_internal}
     (nil))
(insn 140 138 141 11 (set (reg:SI 4 si)
        (reg:SI 2 cx [132])) "game_of_life.c":56:9 75 {*movsi_internal}
     (nil))
(insn 141 140 142 11 (set (reg:DI 5 di)
        (reg:DI 0 ax [133])) "game_of_life.c":56:9 74 {*movdi_internal}
     (nil))
(call_insn 142 141 143 11 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dynamic_array_move_life") [flags 0x3]  <function_decl 0x7fd3e8e0d500 dynamic_array_move_life>) [0 dynamic_array_move_life S1 A8])
            (const_int 0 [0]))) "game_of_life.c":56:9 824 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(call_insn 143 142 144 11 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("initscr") [flags 0x41]  <function_decl 0x7fd3e9116c00 initscr>) [0 initscr S1 A8])
            (const_int 0 [0]))) "game_of_life.c":58:9 824 {*call_value}
     (nil)
    (nil))
(insn 144 143 145 11 (set (reg/f:DI 0 ax [orig:84 stdscr.0_3 ] [84])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7fd3e91306c0 stdscr>) [3 stdscr+0 S8 A64])) "game_of_life.c":59:9 74 {*movdi_internal}
     (nil))
(insn 145 144 146 11 (set (reg:SI 4 si)
        (const_int 1 [0x1])) "game_of_life.c":59:9 75 {*movsi_internal}
     (nil))
(insn 146 145 147 11 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:84 stdscr.0_3 ] [84])) "game_of_life.c":59:9 74 {*movdi_internal}
     (nil))
(call_insn 147 146 148 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("nodelay") [flags 0x41]  <function_decl 0x7fd3e9131600 nodelay>) [0 nodelay S1 A8])
            (const_int 0 [0]))) "game_of_life.c":59:9 824 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(call_insn 148 147 149 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("cbreak") [flags 0x41]  <function_decl 0x7fd3e910cf00 cbreak>) [0 cbreak S1 A8])
            (const_int 0 [0]))) "game_of_life.c":60:9 824 {*call_value}
     (nil)
    (nil))
(insn 149 148 150 11 (set (reg/f:DI 0 ax [orig:85 stdscr.1_4 ] [85])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7fd3e91306c0 stdscr>) [3 stdscr+0 S8 A64])) "game_of_life.c":61:15 74 {*movdi_internal}
     (nil))
(insn 150 149 151 11 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:85 stdscr.1_4 ] [85])) "game_of_life.c":61:15 74 {*movdi_internal}
     (nil))
(call_insn 151 150 153 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wgetch") [flags 0x41]  <function_decl 0x7fd3e914a800 wgetch>) [0 wgetch S1 A8])
            (const_int 0 [0]))) "game_of_life.c":61:15 824 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 153 151 154 11 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -22 [0xffffffffffffffea])) [0 key+0 S1 A16])
        (reg:QI 0 ax [orig:86 _5 ] [86])) "game_of_life.c":61:13 77 {*movqi_internal}
     (nil))
(insn 154 153 155 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -22 [0xffffffffffffffea])) [0 key+0 S1 A16])
            (const_int 107 [0x6b]))) "game_of_life.c":63:12 9 {*cmpqi_1}
     (nil))
(jump_insn 155 154 156 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 158)
            (pc))) "game_of_life.c":63:12 806 {*jcc}
     (nil)
 -> 158)
;;  succ:       12 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(note 156 155 157 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 157 156 158 12 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [2 speed+0 S4 A32])
                (ashift:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [2 speed+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":63:31 655 {*ashlsi3_1}
     (nil))
;;  succ:       13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       11
;;              12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(code_label 158 157 159 13 12 (nil) [1 uses])
(note 159 158 160 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 160 159 161 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -22 [0xffffffffffffffea])) [0 key+0 S1 A16])
            (const_int 108 [0x6c]))) "game_of_life.c":64:12 9 {*cmpqi_1}
     (nil))
(jump_insn 161 160 162 13 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 170)
            (pc))) "game_of_life.c":64:12 806 {*jcc}
     (nil)
 -> 170)
;;  succ:       14 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 135 136 137 138
(note 162 161 163 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 163 162 220 14 (set (reg:SI 0 ax [135])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [2 speed+0 S4 A32])) "game_of_life.c":64:31 75 {*movsi_internal}
     (nil))
(insn 220 163 166 14 (set (reg:SI 1 dx [136])
        (reg:SI 0 ax [135])) "game_of_life.c":64:31 75 {*movsi_internal}
     (nil))
(insn 166 220 167 14 (parallel [
            (set (reg:SI 1 dx [136])
                (lshiftrt:SI (reg:SI 1 dx [136])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":64:31 701 {*lshrsi3_1}
     (nil))
(insn 167 166 168 14 (parallel [
            (set (reg:SI 0 ax [137])
                (plus:SI (reg:SI 0 ax [135])
                    (reg:SI 1 dx [136])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":64:31 209 {*addsi_1}
     (nil))
(insn 168 167 169 14 (parallel [
            (set (reg:SI 0 ax [138])
                (ashiftrt:SI (reg:SI 0 ax [137])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":64:31 702 {*ashrsi3_1}
     (nil))
(insn 169 168 170 14 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [2 speed+0 S4 A32])
        (reg:SI 0 ax [138])) "game_of_life.c":64:31 75 {*movsi_internal}
     (nil))
;;  succ:       15 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       13
;;              14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 87 88 139
(code_label 170 169 171 15 13 (nil) [1 uses])
(note 171 170 172 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 172 171 173 15 (set (reg:SI 0 ax [orig:87 speed.2_6 ] [87])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [2 speed+0 S4 A32])) "game_of_life.c":65:9 75 {*movsi_internal}
     (nil))
(insn 173 172 174 15 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:87 speed.2_6 ] [87])) "game_of_life.c":65:9 75 {*movsi_internal}
     (nil))
(call_insn 174 173 175 15 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("usleep") [flags 0x41]  <function_decl 0x7fd3e8dcd500 usleep>) [0 usleep S1 A8])
            (const_int 0 [0]))) "game_of_life.c":65:9 824 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 175 174 176 15 (set (reg/f:DI 0 ax [orig:88 stdscr.3_7 ] [88])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7fd3e91306c0 stdscr>) [3 stdscr+0 S8 A64])) "game_of_life.c":66:9 74 {*movdi_internal}
     (nil))
(insn 176 175 177 15 (set (reg:SI 4 si)
        (const_int 0 [0])) "game_of_life.c":66:9 75 {*movsi_internal}
     (nil))
(insn 177 176 178 15 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:88 stdscr.3_7 ] [88])) "game_of_life.c":66:9 74 {*movdi_internal}
     (nil))
(call_insn 178 177 179 15 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("nodelay") [flags 0x41]  <function_decl 0x7fd3e9131600 nodelay>) [0 nodelay S1 A8])
            (const_int 0 [0]))) "game_of_life.c":66:9 824 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(call_insn 179 178 180 15 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("endwin") [flags 0x41]  <function_decl 0x7fd3e9114700 endwin>) [0 endwin S1 A8])
            (const_int 0 [0]))) "game_of_life.c":67:9 824 {*call_value}
     (nil)
    (nil))
(insn 180 179 181 15 (set (reg:DI 0 ax [139])
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7fd3e8e73360 *.LC3>)) "game_of_life.c":68:9 74 {*movdi_internal}
     (nil))
(insn 181 180 182 15 (set (reg:DI 5 di)
        (reg:DI 0 ax [139])) "game_of_life.c":68:9 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7fd3e8e73360 *.LC3>)
        (nil)))
(call_insn 182 181 183 15 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("system") [flags 0x41]  <function_decl 0x7fd3e8db0900 system>) [0 system S1 A8])
            (const_int 0 [0]))) "game_of_life.c":68:9 824 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       16 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       15 (FALLTHRU,DFS_BACK)
;;              10 [always] 
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(code_label 183 182 184 16 11 (nil) [1 uses])
(note 184 183 186 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 186 184 187 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -22 [0xffffffffffffffea])) [0 key+0 S1 A16])
            (const_int 113 [0x71]))) "game_of_life.c":53:16 9 {*cmpqi_1}
     (nil))
(jump_insn 187 186 188 16 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 185)
            (pc))) "game_of_life.c":53:16 806 {*jcc}
     (nil)
 -> 185)
;;  succ:       11
;;              17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 89 140 141
(note 188 187 189 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 189 188 190 17 (set (reg:SI 1 dx [140])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 matrix_height+0 S4 A64])) "game_of_life.c":71:5 75 {*movsi_internal}
     (nil))
(insn 190 189 191 17 (set (reg:DI 0 ax [141])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":71:5 74 {*movdi_internal}
     (nil))
(insn 191 190 192 17 (set (reg:SI 4 si)
        (reg:SI 1 dx [140])) "game_of_life.c":71:5 75 {*movsi_internal}
     (nil))
(insn 192 191 193 17 (set (reg:DI 5 di)
        (reg:DI 0 ax [141])) "game_of_life.c":71:5 74 {*movdi_internal}
     (nil))
(call_insn 193 192 194 17 (call (mem:QI (symbol_ref:DI ("dynamic_array_free") [flags 0x3]  <function_decl 0x7fd3e8e07e00 dynamic_array_free>) [0 dynamic_array_free S1 A8])
        (const_int 0 [0])) "game_of_life.c":71:5 813 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 194 193 195 17 (set (reg:SI 0 ax [orig:89 _13 ] [89])
        (const_int 0 [0])) "game_of_life.c":72:12 75 {*movsi_internal}
     (nil))
;;  succ:       18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 89

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 1, flags: (RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;;              9 [always] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 89
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 89
;; lr  def 	 0 [ax] 90
(code_label 195 194 196 18 10 (nil) [1 uses])
(note 196 195 202 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 202 196 219 18 (use (reg/i:SI 0 ax)) "game_of_life.c":73:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 219 202 0 NOTE_INSN_DELETED)

;; Function dynamic_array_print (dynamic_array_print, funcdef_no=7, decl_uid=4928, cgraph_uid=8, symbol_order=7)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=32, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 20
	 Choosing alt 0 in insn 20:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 25
	 Choosing alt 0 in insn 25:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 40:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 50:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) r  (1) rm {*cmpsi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4 5
EBB 6
EBB 7
EBB 8 9
EBB 10 12 11 13

********** Pseudo live ranges #1: **********

  BB 13
   Insn 69: point = 0, n_alt = -1
  BB 11
  BB 12
   Insn 67: point = 0, n_alt = -1
  BB 10
   Insn 56: point = 0, n_alt = -1
   Insn 55: point = 0, n_alt = 1
   Insn 54: point = 1, n_alt = 0
  BB 2
   Insn 60: point = 2, n_alt = -1
   Insn 8: point = 2, n_alt = 1
   Insn 4: point = 2, n_alt = 1
   Insn 3: point = 2, n_alt = 1
   Insn 2: point = 2, n_alt = 5
  BB 9
   Insn 50: point = 2, n_alt = 0
   Insn 49: point = 2, n_alt = 0
   Insn 48: point = 2, n_alt = 0
  BB 8
   Insn 46: point = 2, n_alt = -1
   Insn 45: point = 2, n_alt = 1
   Insn 44: point = 3, n_alt = 0
  BB 3
   Insn 62: point = 4, n_alt = -1
   Insn 12: point = 4, n_alt = 1
  BB 7
   Insn 40: point = 4, n_alt = 0
  BB 5
   Insn 64: point = 4, n_alt = -1
   Insn 31: point = 4, n_alt = 0
   Insn 30: point = 4, n_alt = 0
  BB 6
   Insn 37: point = 4, n_alt = 0
   Insn 36: point = 4, n_alt = 0
  BB 4
   Insn 28: point = 4, n_alt = -1
   Insn 27: point = 4, n_alt = 0
   Insn 26: point = 5, n_alt = 0
   Insn 25: point = 7, n_alt = 0
   Insn 24: point = 9, n_alt = 0
   Insn 23: point = 11, n_alt = 0
   Insn 22: point = 13, n_alt = 0
   Insn 21: point = 14, n_alt = 3
   Insn 20: point = 16, n_alt = 0
   Insn 19: point = 18, n_alt = 3
   Insn 18: point = 19, n_alt = 1
   Insn 17: point = 21, n_alt = 0
   Insn 16: point = 23, n_alt = 0
 r82: [20..21]
 r83: [17..19]
 r84: [15..16]
 r85: [8..14]
 r86: [10..11]
 r87: [8..9]
 r88: [6..7]
 r89: [4..5]
 r90: [22..23]
 r91: [17..18]
 r92: [12..13]
 r93: [2..3]
 r94: [0..1]
Compressing live ranges: from 24 to 22 - 91%
Ranges after the compression:
 r82: [18..19]
 r83: [16..17]
 r84: [14..15]
 r85: [8..13]
 r86: [10..11]
 r87: [8..9]
 r88: [6..7]
 r89: [4..5]
 r90: [20..21]
 r91: [16..17]
 r92: [12..13]
 r93: [2..3]
 r94: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=32, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 20
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 23
changing reg in insn 24
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 26
changing reg in insn 27
changing reg in insn 16
changing reg in insn 17
changing reg in insn 19
changing reg in insn 22
changing reg in insn 23
changing reg in insn 44
changing reg in insn 45
changing reg in insn 54
changing reg in insn 55
starting the processing of deferred insns
ending the processing of deferred insns


dynamic_array_print

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={15d,11u} r1={6d,3u,1e} r2={4d} r4={4d,1u} r5={7d,4u} r6={1d,29u} r7={1d,16u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={12d,3u} r18={3d} r19={1d,1u,1e} r20={4d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={4d} r37={4d} r38={3d} r39={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} 
;;    total ref usage 314{244d,68u,2e} in 37{34 regular + 3 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 A+0 S8 A64])
        (reg:DI 5 di [ A ])) "game_of_life.c":75:49 74 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 N+0 S4 A32])
        (reg:SI 4 si [ N ])) "game_of_life.c":75:49 75 {*movsi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 M+0 S4 A32])
        (reg:SI 1 dx [ M ])) "game_of_life.c":75:49 75 {*movsi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 60 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A64])
        (const_int 0 [0])) "game_of_life.c":76:14 75 {*movsi_internal}
     (nil))
(jump_insn 60 8 61 2 (set (pc)
        (label_ref 51)) "game_of_life.c":76:5 807 {jump}
     (nil)
 -> 51)
;;  succ:       10 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 61 60 53)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       10
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 53 61 11 3 21 (nil) [1 uses])
(note 11 53 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 62 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [2 j+0 S4 A32])
        (const_int 0 [0])) "game_of_life.c":77:18 75 {*movsi_internal}
     (nil))
(jump_insn 62 12 63 3 (set (pc)
        (label_ref 41)) "game_of_life.c":77:9 807 {jump}
     (nil)
 -> 41)
;;  succ:       8 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 63 62 43)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       8
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 82 83 84 85 86 87 88 89 90 91 92
(code_label 43 63 15 4 20 (nil) [1 uses])
(note 15 43 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 4 (set (reg:SI 0 ax [90])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A64])) "game_of_life.c":78:18 75 {*movsi_internal}
     (nil))
(insn 17 16 18 4 (set (reg:DI 0 ax [orig:82 _1 ] [82])
        (sign_extend:DI (reg:SI 0 ax [90]))) "game_of_life.c":78:18 147 {*extendsidi2_rex64}
     (nil))
(insn 18 17 19 4 (parallel [
            (set (reg:DI 1 dx [orig:83 _2 ] [83])
                (ashift:DI (reg:DI 0 ax [orig:82 _1 ] [82])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":78:18 656 {*ashldi3_1}
     (nil))
(insn 19 18 20 4 (set (reg/f:DI 0 ax [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 A+0 S8 A64])) "game_of_life.c":78:18 74 {*movdi_internal}
     (nil))
(insn 20 19 21 4 (parallel [
            (set (reg/f:DI 0 ax [orig:84 _3 ] [84])
                (plus:DI (reg/f:DI 0 ax [91])
                    (reg:DI 1 dx [orig:83 _2 ] [83])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":78:18 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -24 [0xffffffffffffffe8])) [1 A+0 S8 A64])
            (reg:DI 1 dx [orig:83 _2 ] [83]))
        (nil)))
(insn 21 20 22 4 (set (reg/f:DI 1 dx [orig:85 _4 ] [85])
        (mem/f:DI (reg/f:DI 0 ax [orig:84 _3 ] [84]) [4 *_3+0 S8 A64])) "game_of_life.c":78:18 74 {*movdi_internal}
     (nil))
(insn 22 21 23 4 (set (reg:SI 0 ax [92])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [2 j+0 S4 A32])) "game_of_life.c":78:21 75 {*movsi_internal}
     (nil))
(insn 23 22 24 4 (set (reg:DI 0 ax [orig:86 _5 ] [86])
        (sign_extend:DI (reg:SI 0 ax [92]))) "game_of_life.c":78:21 147 {*extendsidi2_rex64}
     (nil))
(insn 24 23 25 4 (parallel [
            (set (reg:DI 0 ax [orig:87 _6 ] [87])
                (ashift:DI (reg:DI 0 ax [orig:86 _5 ] [86])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":78:21 656 {*ashldi3_1}
     (nil))
(insn 25 24 26 4 (parallel [
            (set (reg/f:DI 0 ax [orig:88 _7 ] [88])
                (plus:DI (reg:DI 0 ax [orig:87 _6 ] [87])
                    (reg/f:DI 1 dx [orig:85 _4 ] [85])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":78:21 210 {*adddi_1}
     (nil))
(insn 26 25 27 4 (set (reg:SI 0 ax [orig:89 _8 ] [89])
        (mem:SI (reg/f:DI 0 ax [orig:88 _7 ] [88]) [2 *_7+0 S4 A32])) "game_of_life.c":78:21 75 {*movsi_internal}
     (nil))
(insn 27 26 28 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:89 _8 ] [89])
            (const_int 0 [0]))) "game_of_life.c":78:16 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 28 27 29 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 34)
            (pc))) "game_of_life.c":78:16 806 {*jcc}
     (nil)
 -> 34)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
(note 29 28 30 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 31 5 (set (reg:SI 5 di)
        (const_int 32 [0x20])) "game_of_life.c":79:17 75 {*movsi_internal}
     (nil))
(call_insn 31 30 64 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("putchar") [flags 0x41]  <function_decl 0x7fd3e900f400 __builtin_putchar>) [0 __builtin_putchar S1 A8])
            (const_int 0 [0]))) "game_of_life.c":79:17 824 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(jump_insn 64 31 65 5 (set (pc)
        (label_ref 38)) 807 {jump}
     (nil)
 -> 38)
;;  succ:       7 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 65 64 34)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
(code_label 34 65 35 6 18 (nil) [1 uses])
(note 35 34 36 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 37 6 (set (reg:SI 5 di)
        (const_int 111 [0x6f])) "game_of_life.c":81:17 75 {*movsi_internal}
     (nil))
(call_insn 37 36 38 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("putchar") [flags 0x41]  <function_decl 0x7fd3e900f400 __builtin_putchar>) [0 __builtin_putchar S1 A8])
            (const_int 0 [0]))) "game_of_life.c":81:17 824 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              5 [always] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(code_label 38 37 39 7 19 (nil) [1 uses])
(note 39 38 40 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [2 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [2 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":77:33 209 {*addsi_1}
     (nil))
;;  succ:       8 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU,DFS_BACK)
;;              3 [always] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 93
(code_label 41 40 42 8 17 (nil) [1 uses])
(note 42 41 44 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 44 42 45 8 (set (reg:SI 0 ax [93])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [2 j+0 S4 A32])) "game_of_life.c":77:27 75 {*movsi_internal}
     (nil))
(insn 45 44 46 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [93])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [2 M+0 S4 A32]))) "game_of_life.c":77:27 11 {*cmpsi_1}
     (nil))
(jump_insn 46 45 47 8 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 43)
            (pc))) "game_of_life.c":77:27 806 {*jcc}
     (nil)
 -> 43)
;;  succ:       4
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
(note 47 46 48 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 48 47 49 9 (set (reg:SI 5 di)
        (const_int 10 [0xa])) "game_of_life.c":83:9 75 {*movsi_internal}
     (nil))
(call_insn 49 48 50 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("putchar") [flags 0x41]  <function_decl 0x7fd3e900f400 __builtin_putchar>) [0 __builtin_putchar S1 A8])
            (const_int 0 [0]))) "game_of_life.c":83:9 824 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 50 49 51 9 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A64])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":76:29 209 {*addsi_1}
     (nil))
;;  succ:       10 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 12, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 94
(code_label 51 50 52 10 16 (nil) [1 uses])
(note 52 51 54 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 54 52 55 10 (set (reg:SI 0 ax [94])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A64])) "game_of_life.c":76:23 75 {*movsi_internal}
     (nil))
(insn 55 54 56 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [94])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [2 N+0 S4 A32]))) "game_of_life.c":76:23 11 {*cmpsi_1}
     (nil))
(jump_insn 56 55 66 10 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 53)
            (pc))) "game_of_life.c":76:23 806 {*jcc}
     (nil)
 -> 53)
;;  succ:       3
;;              12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 12, loop depth 0, maybe hot
;;  prev block 10, next block 11, flags: (RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 66 56 67 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 57 12 (const_int 0 [0]) "game_of_life.c":85:1 843 {nop}
     (nil))
;;  succ:       11 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 11, loop depth 0, maybe hot
;;  prev block 12, next block 13, flags: (RTL, MODIFIED)
;;  pred:       12 [always]  (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 57 67 68 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
;;  succ:       13 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 11, next block 1, flags: (RTL, MODIFIED)
;;  pred:       11 [always]  (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 68 57 69 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 70 13 (const_int 0 [0]) "game_of_life.c":85:1 843 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 70 69 0 NOTE_INSN_DELETED)

;; Function dynamic_array_alloc (dynamic_array_alloc, funcdef_no=8, decl_uid=4931, cgraph_uid=9, symbol_order=8)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=32, prev_offset=0)
Can eliminate 19 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 13:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 24:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 30:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 31:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) r  (1) rm {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 47: point = 0, n_alt = -1
   Insn 46: point = 0, n_alt = -2
   Insn 42: point = 1, n_alt = -2
   Insn 39: point = 3, n_alt = 3
  BB 4
   Insn 37: point = 4, n_alt = -1
   Insn 36: point = 4, n_alt = 1
   Insn 35: point = 5, n_alt = 0
  BB 2
   Insn 49: point = 6, n_alt = -1
   Insn 14: point = 6, n_alt = 1
   Insn 13: point = 6, n_alt = 5
   Insn 12: point = 7, n_alt = -2
   Insn 11: point = 8, n_alt = 0
   Insn 10: point = 8, n_alt = -2
   Insn 9: point = 9, n_alt = 0
   Insn 8: point = 11, n_alt = 0
   Insn 7: point = 13, n_alt = 0
   Insn 3: point = 14, n_alt = 1
   Insn 2: point = 14, n_alt = 1
  BB 3
   Insn 31: point = 14, n_alt = 0
   Insn 30: point = 14, n_alt = 5
   Insn 29: point = 15, n_alt = -2
   Insn 28: point = 17, n_alt = -2
   Insn 27: point = 18, n_alt = 0
   Insn 26: point = 18, n_alt = -2
   Insn 25: point = 19, n_alt = 3
   Insn 24: point = 21, n_alt = 3
   Insn 23: point = 22, n_alt = 1
   Insn 22: point = 24, n_alt = 1
   Insn 21: point = 26, n_alt = 0
   Insn 20: point = 27, n_alt = 0
   Insn 19: point = 29, n_alt = 0
   Insn 18: point = 31, n_alt = 0
 r82: [10..11]
 r83: [8..9]
 r84: [28..29]
 r85: [18..27]
 r86: [23..24]
 r87: [20..22]
 r88: [14..19]
 r89: [14..15]
 r90: [2..3]
 r91: [0..1]
 r92: [12..13]
 r93: [6..7]
 r94: [30..31]
 r95: [25..26]
 r96: [20..21]
 r97: [16..17]
 r98: [4..5]
Compressing live ranges: from 32 to 30 - 93%
Ranges after the compression:
 r82: [10..11]
 r83: [8..9]
 r84: [26..27]
 r85: [18..25]
 r86: [22..23]
 r87: [20..21]
 r88: [14..19]
 r89: [14..15]
 r90: [2..3]
 r91: [0..1]
 r92: [12..13]
 r93: [6..7]
 r94: [28..29]
 r95: [24..25]
 r96: [20..21]
 r97: [16..17]
 r98: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=32, prev_offset=0)
Can eliminate 19 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 8
changing reg in insn 9
changing reg in insn 9
changing reg in insn 10
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 26
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 25
changing reg in insn 25
changing reg in insn 25
changing reg in insn 30
changing reg in insn 29
changing reg in insn 30
changing reg in insn 39
changing reg in insn 42
changing reg in insn 42
changing reg in insn 46
changing reg in insn 7
changing reg in insn 8
changing reg in insn 12
changing reg in insn 13
changing reg in insn 18
changing reg in insn 19
changing reg in insn 21
changing reg in insn 22
changing reg in insn 24
changing reg in insn 25
changing reg in insn 28
changing reg in insn 29
changing reg in insn 35
changing reg in insn 36
deleting insn with uid = 12.
deleting insn with uid = 28.
deleting insn with uid = 29.
deleting insn with uid = 42.
deleting insn with uid = 46.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 11.
verify found no changes in insn with uid = 27.


dynamic_array_alloc

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={11d,11u} r1={6d,3u} r2={4d,1u,1e} r3={1d,1u} r4={3d,1u} r5={5d,3u} r6={1d,18u} r7={1d,7u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={8d,1u} r18={2d} r19={1d,1u,1e} r20={3d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={3d} r37={3d} r38={2d} r39={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} 
;;    total ref usage 222{173d,47u,2e} in 27{25 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 82 83 92 93
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [2 N+0 S4 A32])
        (reg:SI 5 di [ N ])) "game_of_life.c":87:41 75 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [2 M+0 S4 A32])
        (reg:SI 4 si [ M ])) "game_of_life.c":87:41 75 {*movsi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:SI 0 ax [92])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [2 N+0 S4 A32])) "game_of_life.c":88:23 75 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 0 ax [orig:82 _1 ] [82])
        (sign_extend:DI (reg:SI 0 ax [92]))) "game_of_life.c":88:23 147 {*extendsidi2_rex64}
     (nil))
(insn 9 8 10 2 (parallel [
            (set (reg:DI 0 ax [orig:83 _2 ] [83])
                (ashift:DI (reg:DI 0 ax [orig:82 _1 ] [82])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":88:23 656 {*ashldi3_1}
     (nil))
(insn 10 9 11 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:83 _2 ] [83])) "game_of_life.c":88:23 74 {*movdi_internal}
     (nil))
(call_insn 11 10 13 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7fd3e902e800 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) "game_of_life.c":88:23 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 13 11 14 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 A+0 S8 A64])
        (reg/f:DI 0 ax [93])) "game_of_life.c":88:23 74 {*movdi_internal}
     (nil))
(insn 14 13 49 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 i+0 S4 A32])
        (const_int 0 [0])) "game_of_life.c":89:14 75 {*movsi_internal}
     (nil))
(jump_insn 49 14 50 2 (set (pc)
        (label_ref 32)) "game_of_life.c":89:5 807 {jump}
     (nil)
 -> 32)
;;  succ:       4 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 50 49 34)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 84 85 86 87 88 89 94 95 96 97
(code_label 34 50 17 3 24 (nil) [1 uses])
(note 17 34 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 3 (set (reg:SI 0 ax [94])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [2 M+0 S4 A32])) "game_of_life.c":89:47 75 {*movsi_internal}
     (nil))
(insn 19 18 20 3 (set (reg:DI 0 ax [orig:84 _3 ] [84])
        (sign_extend:DI (reg:SI 0 ax [94]))) "game_of_life.c":89:47 147 {*extendsidi2_rex64}
     (nil))
(insn 20 19 21 3 (parallel [
            (set (reg:DI 0 ax [orig:85 _4 ] [85])
                (ashift:DI (reg:DI 0 ax [orig:84 _3 ] [84])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":89:47 656 {*ashldi3_1}
     (nil))
(insn 21 20 22 3 (set (reg:SI 1 dx [95])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 i+0 S4 A32])) "game_of_life.c":89:34 75 {*movsi_internal}
     (nil))
(insn 22 21 23 3 (set (reg:DI 1 dx [orig:86 _5 ] [86])
        (sign_extend:DI (reg:SI 1 dx [95]))) "game_of_life.c":89:34 147 {*extendsidi2_rex64}
     (nil))
(insn 23 22 24 3 (parallel [
            (set (reg:DI 2 cx [orig:87 _6 ] [87])
                (ashift:DI (reg:DI 1 dx [orig:86 _5 ] [86])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":89:34 656 {*ashldi3_1}
     (nil))
(insn 24 23 25 3 (set (reg/f:DI 1 dx [96])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 A+0 S8 A64])) "game_of_life.c":89:34 74 {*movdi_internal}
     (nil))
(insn 25 24 26 3 (parallel [
            (set (reg/f:DI 3 bx [orig:88 _7 ] [88])
                (plus:DI (reg:DI 2 cx [orig:87 _6 ] [87])
                    (reg/f:DI 1 dx [96])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":89:34 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (reg:DI 2 cx [orig:87 _6 ] [87]))
        (nil)))
(insn 26 25 27 3 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:85 _4 ] [85])) "game_of_life.c":89:47 74 {*movdi_internal}
     (nil))
(call_insn 27 26 30 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7fd3e902e800 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) "game_of_life.c":89:47 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 30 27 31 3 (set (mem/f:DI (reg/f:DI 3 bx [orig:88 _7 ] [88]) [4 *_7+0 S8 A64])
        (reg/f:DI 0 ax [orig:89 _8 ] [89])) "game_of_life.c":89:38 74 {*movdi_internal}
     (nil))
(insn 31 30 32 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [2 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [2 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":89:29 209 {*addsi_1}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 98
(code_label 32 31 33 4 23 (nil) [1 uses])
(note 33 32 35 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 35 33 36 4 (set (reg:SI 0 ax [98])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 i+0 S4 A32])) "game_of_life.c":89:23 75 {*movsi_internal}
     (nil))
(insn 36 35 37 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [98])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [2 N+0 S4 A32]))) "game_of_life.c":89:23 11 {*cmpsi_1}
     (nil))
(jump_insn 37 36 38 4 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 34)
            (pc))) "game_of_life.c":89:23 806 {*jcc}
     (nil)
 -> 34)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 90 91
(note 38 37 39 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 47 5 (set (reg/f:DI 0 ax [orig:90 _16 ] [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 A+0 S8 A64])) "game_of_life.c":90:12 74 {*movdi_internal}
     (nil))
(insn 47 39 51 5 (use (reg/i:DI 0 ax)) "game_of_life.c":91:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 51 47 0 NOTE_INSN_DELETED)

;; Function dynamic_array_free (dynamic_array_free, funcdef_no=9, decl_uid=4934, cgraph_uid=10, symbol_order=9)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=32, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 15
	 Choosing alt 0 in insn 15:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 19:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) r  (1) rm {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 27:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4 5 6

********** Pseudo live ranges #1: **********

  BB 6
   Insn 35: point = 0, n_alt = -1
  BB 5
   Insn 29: point = 0, n_alt = 0
   Insn 28: point = 0, n_alt = -2
   Insn 27: point = 1, n_alt = 3
  BB 4
   Insn 25: point = 2, n_alt = -1
   Insn 24: point = 2, n_alt = 1
   Insn 23: point = 3, n_alt = 0
  BB 2
   Insn 32: point = 4, n_alt = -1
   Insn 7: point = 4, n_alt = 1
   Insn 3: point = 4, n_alt = 1
   Insn 2: point = 4, n_alt = 5
  BB 3
   Insn 19: point = 4, n_alt = 0
   Insn 18: point = 4, n_alt = 0
   Insn 17: point = 4, n_alt = -2
   Insn 16: point = 5, n_alt = 3
   Insn 15: point = 7, n_alt = 0
   Insn 14: point = 9, n_alt = 3
   Insn 13: point = 10, n_alt = 1
   Insn 12: point = 12, n_alt = 0
   Insn 11: point = 14, n_alt = 0
 r82: [11..12]
 r83: [8..10]
 r84: [6..7]
 r85: [4..5]
 r86: [13..14]
 r87: [8..9]
 r88: [2..3]
 r89: [0..1]
Compressing live ranges: from 15 to 14 - 93%
Ranges after the compression:
 r82: [10..11]
 r83: [8..9]
 r84: [6..7]
 r85: [4..5]
 r86: [12..13]
 r87: [8..9]
 r88: [2..3]
 r89: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=32, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 12
changing reg in insn 13
changing reg in insn 13
changing reg in insn 15
changing reg in insn 15
changing reg in insn 16
changing reg in insn 16
changing reg in insn 17
changing reg in insn 11
changing reg in insn 12
changing reg in insn 14
changing reg in insn 23
changing reg in insn 24
changing reg in insn 27
changing reg in insn 28
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 29.


dynamic_array_free

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={10d,7u} r1={4d,1u,1e} r2={3d} r4={3d,1u} r5={5d,3u} r6={1d,16u} r7={1d,8u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={6d,1u} r18={2d} r19={1d,1u,1e} r20={3d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={3d} r37={3d} r38={2d} r39={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} 
;;    total ref usage 206{166d,38u,2e} in 20{18 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 A+0 S8 A64])
        (reg:DI 5 di [ A ])) "game_of_life.c":93:41 74 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 N+0 S4 A32])
        (reg:SI 4 si [ N ])) "game_of_life.c":93:41 75 {*movsi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 32 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [2 i+0 S4 A32])
        (const_int 0 [0])) "game_of_life.c":94:14 75 {*movsi_internal}
     (nil))
(jump_insn 32 7 33 2 (set (pc)
        (label_ref 20)) "game_of_life.c":94:5 807 {jump}
     (nil)
 -> 20)
;;  succ:       4 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 33 32 22)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 82 83 84 85 86 87
(code_label 22 33 10 3 28 (nil) [1 uses])
(note 10 22 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg:SI 0 ax [86])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [2 i+0 S4 A32])) "game_of_life.c":94:39 75 {*movsi_internal}
     (nil))
(insn 12 11 13 3 (set (reg:DI 0 ax [orig:82 _1 ] [82])
        (sign_extend:DI (reg:SI 0 ax [86]))) "game_of_life.c":94:39 147 {*extendsidi2_rex64}
     (nil))
(insn 13 12 14 3 (parallel [
            (set (reg:DI 1 dx [orig:83 _2 ] [83])
                (ashift:DI (reg:DI 0 ax [orig:82 _1 ] [82])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":94:39 656 {*ashldi3_1}
     (nil))
(insn 14 13 15 3 (set (reg/f:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 A+0 S8 A64])) "game_of_life.c":94:39 74 {*movdi_internal}
     (nil))
(insn 15 14 16 3 (parallel [
            (set (reg/f:DI 0 ax [orig:84 _3 ] [84])
                (plus:DI (reg/f:DI 0 ax [87])
                    (reg:DI 1 dx [orig:83 _2 ] [83])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":94:39 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -24 [0xffffffffffffffe8])) [1 A+0 S8 A64])
            (reg:DI 1 dx [orig:83 _2 ] [83]))
        (nil)))
(insn 16 15 17 3 (set (reg/f:DI 0 ax [orig:85 _4 ] [85])
        (mem/f:DI (reg/f:DI 0 ax [orig:84 _3 ] [84]) [4 *_3+0 S8 A64])) "game_of_life.c":94:33 74 {*movdi_internal}
     (nil))
(insn 17 16 18 3 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:85 _4 ] [85])) "game_of_life.c":94:33 74 {*movdi_internal}
     (nil))
(call_insn 18 17 19 3 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fd3e9027d00 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) "game_of_life.c":94:33 813 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 19 18 20 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [2 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [2 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":94:29 209 {*addsi_1}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 88
(code_label 20 19 21 4 27 (nil) [1 uses])
(note 21 20 23 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 23 21 24 4 (set (reg:SI 0 ax [88])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [2 i+0 S4 A32])) "game_of_life.c":94:23 75 {*movsi_internal}
     (nil))
(insn 24 23 25 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [88])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [2 N+0 S4 A32]))) "game_of_life.c":94:23 11 {*cmpsi_1}
     (nil))
(jump_insn 25 24 26 4 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 22)
            (pc))) "game_of_life.c":94:23 806 {*jcc}
     (nil)
 -> 22)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 89
(note 26 25 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 5 (set (reg:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 A+0 S8 A64])) "game_of_life.c":95:5 74 {*movdi_internal}
     (nil))
(insn 28 27 29 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [89])) "game_of_life.c":95:5 74 {*movdi_internal}
     (nil))
(call_insn 29 28 34 5 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fd3e9027d00 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) "game_of_life.c":95:5 813 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       6 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 1, flags: (RTL, MODIFIED)
;;  pred:       5 [always]  (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 34 29 35 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 36 6 (const_int 0 [0]) "game_of_life.c":96:1 843 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 36 35 0 NOTE_INSN_DELETED)

;; Function dynamic_array_init (dynamic_array_init, funcdef_no=10, decl_uid=4938, cgraph_uid=11, symbol_order=10)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 21
	 Choosing alt 0 in insn 21:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 29:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 37:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) r  (1) rm {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5 6
EBB 7 8

********** Pseudo live ranges #1: **********

  BB 8
   Insn 53: point = 0, n_alt = -1
   Insn 52: point = 0, n_alt = -2
   Insn 48: point = 1, n_alt = -2
   Insn 45: point = 3, n_alt = 3
  BB 7
   Insn 43: point = 4, n_alt = -1
   Insn 42: point = 4, n_alt = 1
   Insn 41: point = 5, n_alt = 0
  BB 2
   Insn 55: point = 6, n_alt = -1
   Insn 9: point = 6, n_alt = 1
   Insn 8: point = 6, n_alt = 1
   Insn 4: point = 6, n_alt = 1
   Insn 3: point = 6, n_alt = 1
   Insn 2: point = 6, n_alt = 5
  BB 6
   Insn 37: point = 6, n_alt = 0
  BB 5
   Insn 35: point = 6, n_alt = -1
   Insn 34: point = 6, n_alt = 1
   Insn 33: point = 7, n_alt = 0
  BB 3
   Insn 57: point = 8, n_alt = -1
   Insn 13: point = 8, n_alt = 1
  BB 4
   Insn 29: point = 8, n_alt = 0
   Insn 28: point = 8, n_alt = 1
   Insn 27: point = 9, n_alt = 0
   Insn 26: point = 10, n_alt = 0
   Insn 25: point = 12, n_alt = 0
   Insn 24: point = 14, n_alt = 0
   Insn 23: point = 16, n_alt = 0
   Insn 22: point = 17, n_alt = 3
   Insn 21: point = 19, n_alt = 0
   Insn 20: point = 21, n_alt = 3
   Insn 19: point = 22, n_alt = 1
   Insn 18: point = 24, n_alt = 0
   Insn 17: point = 26, n_alt = 0
 r82: [23..24]
 r83: [20..22]
 r84: [18..19]
 r85: [11..17]
 r86: [13..14]
 r87: [11..12]
 r88: [8..10]
 r89: [2..3]
 r90: [0..1]
 r91: [25..26]
 r92: [20..21]
 r93: [15..16]
 r94: [8..9]
 r95: [6..7]
 r96: [4..5]
Compressing live ranges: from 27 to 24 - 88%
Ranges after the compression:
 r82: [20..21]
 r83: [18..19]
 r84: [16..17]
 r85: [10..15]
 r86: [12..13]
 r87: [10..11]
 r88: [8..9]
 r89: [2..3]
 r90: [0..1]
 r91: [22..23]
 r92: [18..19]
 r93: [14..15]
 r94: [8..9]
 r95: [6..7]
 r96: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 21
changing reg in insn 21
changing reg in insn 22
changing reg in insn 22
changing reg in insn 26
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 26
changing reg in insn 26
changing reg in insn 28
changing reg in insn 45
changing reg in insn 48
changing reg in insn 48
changing reg in insn 52
changing reg in insn 17
changing reg in insn 18
changing reg in insn 20
changing reg in insn 23
changing reg in insn 24
changing reg in insn 27
changing reg in insn 28
changing reg in insn 33
changing reg in insn 34
changing reg in insn 41
changing reg in insn 42
deleting insn with uid = 48.
deleting insn with uid = 52.
starting the processing of deferred insns
ending the processing of deferred insns


dynamic_array_init

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={12d,12u} r1={4d,4u,1e} r2={1d} r4={1d,1u} r5={1d,1u} r6={1d,27u} r7={1d,8u} r17={8d,2u} r19={1d,1u,1e} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r36={1d} r37={1d} 
;;    total ref usage 98{40d,56u,2e} in 30{30 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 A+0 S8 A64])
        (reg:DI 5 di [ A ])) "game_of_life.c":98:49 74 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 N+0 S4 A32])
        (reg:SI 4 si [ N ])) "game_of_life.c":98:49 75 {*movsi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 M+0 S4 A32])
        (reg:SI 1 dx [ M ])) "game_of_life.c":98:49 75 {*movsi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [2 x+0 S4 A32])
        (const_int 0 [0])) "game_of_life.c":99:9 75 {*movsi_internal}
     (nil))
(insn 9 8 55 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 i+0 S4 A32])
        (const_int 0 [0])) "game_of_life.c":100:14 75 {*movsi_internal}
     (nil))
(jump_insn 55 9 56 2 (set (pc)
        (label_ref 38)) "game_of_life.c":100:5 807 {jump}
     (nil)
 -> 38)
;;  succ:       7 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 56 55 40)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       7
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 40 56 12 3 33 (nil) [1 uses])
(note 12 40 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 57 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 j+0 S4 A64])
        (const_int 0 [0])) "game_of_life.c":101:18 75 {*movsi_internal}
     (nil))
(jump_insn 57 13 58 3 (set (pc)
        (label_ref 30)) "game_of_life.c":101:9 807 {jump}
     (nil)
 -> 30)
;;  succ:       5 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 58 57 32)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 82 83 84 85 86 87 88 91 92 93 94
(code_label 32 58 16 4 32 (nil) [1 uses])
(note 16 32 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 4 (set (reg:SI 0 ax [91])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 i+0 S4 A32])) "game_of_life.c":101:38 75 {*movsi_internal}
     (nil))
(insn 18 17 19 4 (set (reg:DI 0 ax [orig:82 _1 ] [82])
        (sign_extend:DI (reg:SI 0 ax [91]))) "game_of_life.c":101:38 147 {*extendsidi2_rex64}
     (nil))
(insn 19 18 20 4 (parallel [
            (set (reg:DI 1 dx [orig:83 _2 ] [83])
                (ashift:DI (reg:DI 0 ax [orig:82 _1 ] [82])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":101:38 656 {*ashldi3_1}
     (nil))
(insn 20 19 21 4 (set (reg/f:DI 0 ax [92])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 A+0 S8 A64])) "game_of_life.c":101:38 74 {*movdi_internal}
     (nil))
(insn 21 20 22 4 (parallel [
            (set (reg/f:DI 0 ax [orig:84 _3 ] [84])
                (plus:DI (reg/f:DI 0 ax [92])
                    (reg:DI 1 dx [orig:83 _2 ] [83])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":101:38 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -24 [0xffffffffffffffe8])) [1 A+0 S8 A64])
            (reg:DI 1 dx [orig:83 _2 ] [83]))
        (nil)))
(insn 22 21 23 4 (set (reg/f:DI 1 dx [orig:85 _4 ] [85])
        (mem/f:DI (reg/f:DI 0 ax [orig:84 _3 ] [84]) [4 *_3+0 S8 A64])) "game_of_life.c":101:38 74 {*movdi_internal}
     (nil))
(insn 23 22 24 4 (set (reg:SI 0 ax [93])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 j+0 S4 A64])) "game_of_life.c":101:41 75 {*movsi_internal}
     (nil))
(insn 24 23 25 4 (set (reg:DI 0 ax [orig:86 _5 ] [86])
        (sign_extend:DI (reg:SI 0 ax [93]))) "game_of_life.c":101:41 147 {*extendsidi2_rex64}
     (nil))
(insn 25 24 26 4 (parallel [
            (set (reg:DI 0 ax [orig:87 _6 ] [87])
                (ashift:DI (reg:DI 0 ax [orig:86 _5 ] [86])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":101:41 656 {*ashldi3_1}
     (nil))
(insn 26 25 27 4 (parallel [
            (set (reg/f:DI 1 dx [orig:88 _7 ] [88])
                (plus:DI (reg/f:DI 1 dx [orig:85 _4 ] [85])
                    (reg:DI 0 ax [orig:87 _6 ] [87])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":101:41 210 {*adddi_1}
     (nil))
(insn 27 26 28 4 (set (reg:SI 0 ax [94])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [2 x+0 S4 A32])) "game_of_life.c":101:45 75 {*movsi_internal}
     (nil))
(insn 28 27 29 4 (set (mem:SI (reg/f:DI 1 dx [orig:88 _7 ] [88]) [2 *_7+0 S4 A32])
        (reg:SI 0 ax [94])) "game_of_life.c":101:45 75 {*movsi_internal}
     (nil))
(insn 29 28 30 4 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [2 j+0 S4 A64])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [2 j+0 S4 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":101:33 209 {*addsi_1}
     (nil))
;;  succ:       5 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU,DFS_BACK)
;;              3 [always] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 95
(code_label 30 29 31 5 31 (nil) [1 uses])
(note 31 30 33 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 33 31 34 5 (set (reg:SI 0 ax [95])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 j+0 S4 A64])) "game_of_life.c":101:27 75 {*movsi_internal}
     (nil))
(insn 34 33 35 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [95])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [2 M+0 S4 A32]))) "game_of_life.c":101:27 11 {*cmpsi_1}
     (nil))
(jump_insn 35 34 36 5 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 32)
            (pc))) "game_of_life.c":101:27 806 {*jcc}
     (nil)
 -> 32)
;;  succ:       4
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(note 36 35 37 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 38 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [2 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [2 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":100:29 209 {*addsi_1}
     (nil))
;;  succ:       7 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 96
(code_label 38 37 39 7 30 (nil) [1 uses])
(note 39 38 41 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 41 39 42 7 (set (reg:SI 0 ax [96])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 i+0 S4 A32])) "game_of_life.c":100:23 75 {*movsi_internal}
     (nil))
(insn 42 41 43 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [96])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [2 N+0 S4 A32]))) "game_of_life.c":100:23 11 {*cmpsi_1}
     (nil))
(jump_insn 43 42 44 7 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 40)
            (pc))) "game_of_life.c":100:23 806 {*jcc}
     (nil)
 -> 40)
;;  succ:       3
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 1, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 89 90
(note 44 43 45 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 45 44 53 8 (set (reg/f:DI 0 ax [orig:89 _17 ] [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 A+0 S8 A64])) "game_of_life.c":102:12 74 {*movdi_internal}
     (nil))
(insn 53 45 59 8 (use (reg/i:DI 0 ax)) "game_of_life.c":103:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 59 53 0 NOTE_INSN_DELETED)

;; Function dynamic_array_init_life (dynamic_array_init_life, funcdef_no=11, decl_uid=4942, cgraph_uid=12, symbol_order=11)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 11:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=183 from oldreg=137, assigning class GENERAL_REGS to r183
   11: {r183:SI=r183:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  141: r183:SI=r136:SI
    Inserting insn reload after:
  142: r137:SI=r183:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 12
	 Choosing alt 0 in insn 12:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 18
	 Choosing alt 0 in insn 18:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 23:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=184 from oldreg=142, assigning class GENERAL_REGS to r184
   23: {r184:SI=r184:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  143: r184:SI=r141:SI
    Inserting insn reload after:
  144: r142:SI=r184:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 24
	 Choosing alt 0 in insn 24:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 29
	 Choosing alt 0 in insn 29:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 34:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=185 from oldreg=146, assigning class GENERAL_REGS to r185
   34: {r185:SI=r185:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  145: r185:SI=r145:SI
    Inserting insn reload after:
  146: r146:SI=r185:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 35
	 Choosing alt 0 in insn 35:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 39:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 41:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 42
	 Choosing alt 0 in insn 42:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 47:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=186 from oldreg=151, assigning class GENERAL_REGS to r186
   47: {r186:SI=r186:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  147: r186:SI=r150:SI
    Inserting insn reload after:
  148: r151:SI=r186:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 48
	 Choosing alt 0 in insn 48:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 52:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 54
	 Choosing alt 0 in insn 54:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 59:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=187 from oldreg=155, assigning class GENERAL_REGS to r187
   59: {r187:SI=r187:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  149: r187:SI=r154:SI
    Inserting insn reload after:
  150: r155:SI=r187:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 60
	 Choosing alt 0 in insn 60:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 64:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 65:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 67
	 Choosing alt 0 in insn 67:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 68:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 72:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=188 from oldreg=160, assigning class GENERAL_REGS to r188
   72: {r188:SI=r188:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  151: r188:SI=r159:SI
    Inserting insn reload after:
  152: r160:SI=r188:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 73
	 Choosing alt 0 in insn 73:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 77:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 79
	 Choosing alt 0 in insn 79:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 80:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 84:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=189 from oldreg=164, assigning class GENERAL_REGS to r189
   84: {r189:SI=r189:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  153: r189:SI=r163:SI
    Inserting insn reload after:
  154: r164:SI=r189:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 85
	 Choosing alt 0 in insn 85:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 89:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 90:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 91:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 92
	 Choosing alt 0 in insn 92:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 93:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 97:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=190 from oldreg=169, assigning class GENERAL_REGS to r190
   97: {r190:SI=r190:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  155: r190:SI=r168:SI
    Inserting insn reload after:
  156: r169:SI=r190:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 98
	 Choosing alt 0 in insn 98:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 103
	 Choosing alt 0 in insn 103:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 104:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 108:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=191 from oldreg=173, assigning class GENERAL_REGS to r191
  108: {r191:SI=r191:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  157: r191:SI=r172:SI
    Inserting insn reload after:
  158: r173:SI=r191:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 109
	 Choosing alt 0 in insn 109:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 113:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 114:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 115:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 116
	 Choosing alt 0 in insn 116:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 117:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 121:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=192 from oldreg=178, assigning class GENERAL_REGS to r192
  121: {r192:SI=r192:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  159: r192:SI=r177:SI
    Inserting insn reload after:
  160: r178:SI=r192:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 122
	 Choosing alt 0 in insn 122:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 127:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 128
	 Choosing alt 0 in insn 128:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 129:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 130:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 138: point = 0, n_alt = -1
   Insn 137: point = 0, n_alt = -2
   Insn 133: point = 1, n_alt = -2
   Insn 130: point = 3, n_alt = 3
   Insn 129: point = 4, n_alt = 1
   Insn 128: point = 5, n_alt = 0
   Insn 127: point = 7, n_alt = 0
   Insn 126: point = 9, n_alt = 0
   Insn 125: point = 11, n_alt = 0
   Insn 124: point = 13, n_alt = -2
   Insn 123: point = 15, n_alt = 0
   Insn 122: point = 17, n_alt = 0
   Insn 160: point = 19, n_alt = -2
	Hard reg 2 is preferable by r192 with profit 1000
   Insn 121: point = 21, n_alt = 0
   Insn 159: point = 22, n_alt = -2
	Hard reg 2 is preferable by r192 with profit 1000
	Hard reg 0 is preferable by r192 with profit 1000
   Insn 118: point = 23, n_alt = 0
   Insn 117: point = 24, n_alt = 3
   Insn 116: point = 26, n_alt = 0
   Insn 115: point = 28, n_alt = 3
   Insn 114: point = 29, n_alt = 1
   Insn 113: point = 31, n_alt = 0
   Insn 112: point = 33, n_alt = 0
   Insn 111: point = 35, n_alt = -2
   Insn 110: point = 37, n_alt = 0
   Insn 109: point = 39, n_alt = 0
   Insn 158: point = 41, n_alt = -2
	Hard reg 1 is preferable by r191 with profit 1000
   Insn 108: point = 43, n_alt = 0
   Insn 157: point = 44, n_alt = -2
	Hard reg 1 is preferable by r191 with profit 1000
	Hard reg 0 is preferable by r191 with profit 1000
   Insn 105: point = 45, n_alt = 0
   Insn 104: point = 46, n_alt = 1
   Insn 103: point = 47, n_alt = 0
   Insn 102: point = 49, n_alt = 0
   Insn 101: point = 51, n_alt = 0
   Insn 100: point = 53, n_alt = -2
   Insn 99: point = 55, n_alt = 0
   Insn 98: point = 57, n_alt = 0
   Insn 156: point = 59, n_alt = -2
	Hard reg 2 is preferable by r190 with profit 1000
   Insn 97: point = 61, n_alt = 0
   Insn 155: point = 62, n_alt = -2
	Hard reg 2 is preferable by r190 with profit 1000
	Hard reg 0 is preferable by r190 with profit 1000
   Insn 94: point = 63, n_alt = 0
   Insn 93: point = 64, n_alt = 3
   Insn 92: point = 66, n_alt = 0
   Insn 91: point = 68, n_alt = 3
   Insn 90: point = 69, n_alt = 1
   Insn 89: point = 71, n_alt = 0
   Insn 88: point = 73, n_alt = 0
   Insn 87: point = 75, n_alt = -2
   Insn 86: point = 77, n_alt = 0
   Insn 85: point = 79, n_alt = 0
   Insn 154: point = 81, n_alt = -2
	Hard reg 1 is preferable by r189 with profit 1000
   Insn 84: point = 83, n_alt = 0
   Insn 153: point = 84, n_alt = -2
	Hard reg 1 is preferable by r189 with profit 1000
	Hard reg 0 is preferable by r189 with profit 1000
   Insn 81: point = 85, n_alt = 0
   Insn 80: point = 86, n_alt = 1
   Insn 79: point = 87, n_alt = 0
   Insn 78: point = 89, n_alt = 0
   Insn 77: point = 91, n_alt = 0
   Insn 76: point = 93, n_alt = 0
   Insn 75: point = 95, n_alt = -2
   Insn 74: point = 97, n_alt = 0
   Insn 73: point = 99, n_alt = 0
   Insn 152: point = 101, n_alt = -2
	Hard reg 2 is preferable by r188 with profit 1000
   Insn 72: point = 103, n_alt = 0
   Insn 151: point = 104, n_alt = -2
	Hard reg 2 is preferable by r188 with profit 1000
	Hard reg 0 is preferable by r188 with profit 1000
   Insn 69: point = 105, n_alt = 0
   Insn 68: point = 106, n_alt = 3
   Insn 67: point = 108, n_alt = 0
   Insn 66: point = 110, n_alt = 3
   Insn 65: point = 111, n_alt = 1
   Insn 64: point = 113, n_alt = 0
   Insn 63: point = 115, n_alt = 0
   Insn 62: point = 117, n_alt = -2
   Insn 61: point = 119, n_alt = 0
   Insn 60: point = 121, n_alt = 0
   Insn 150: point = 123, n_alt = -2
	Hard reg 1 is preferable by r187 with profit 1000
   Insn 59: point = 125, n_alt = 0
   Insn 149: point = 126, n_alt = -2
	Hard reg 1 is preferable by r187 with profit 1000
	Hard reg 0 is preferable by r187 with profit 1000
   Insn 56: point = 127, n_alt = 0
   Insn 55: point = 128, n_alt = 1
   Insn 54: point = 129, n_alt = 0
   Insn 53: point = 131, n_alt = 0
   Insn 52: point = 133, n_alt = 0
   Insn 51: point = 135, n_alt = 0
   Insn 50: point = 137, n_alt = -2
   Insn 49: point = 139, n_alt = 0
   Insn 48: point = 141, n_alt = 0
   Insn 148: point = 143, n_alt = -2
	Hard reg 2 is preferable by r186 with profit 1000
   Insn 47: point = 145, n_alt = 0
   Insn 147: point = 146, n_alt = -2
	Hard reg 2 is preferable by r186 with profit 1000
	Hard reg 0 is preferable by r186 with profit 1000
   Insn 44: point = 147, n_alt = 0
   Insn 43: point = 148, n_alt = 3
   Insn 42: point = 150, n_alt = 0
   Insn 41: point = 152, n_alt = 3
   Insn 40: point = 153, n_alt = 1
   Insn 39: point = 155, n_alt = 0
   Insn 38: point = 157, n_alt = 0
   Insn 37: point = 159, n_alt = -2
   Insn 36: point = 161, n_alt = 0
   Insn 35: point = 163, n_alt = 0
   Insn 146: point = 165, n_alt = -2
	Hard reg 1 is preferable by r185 with profit 1000
   Insn 34: point = 167, n_alt = 0
   Insn 145: point = 168, n_alt = -2
	Hard reg 1 is preferable by r185 with profit 1000
	Hard reg 0 is preferable by r185 with profit 1000
   Insn 31: point = 169, n_alt = 0
   Insn 30: point = 170, n_alt = 1
   Insn 29: point = 171, n_alt = 0
   Insn 28: point = 173, n_alt = 0
   Insn 27: point = 175, n_alt = 0
   Insn 26: point = 177, n_alt = -2
   Insn 25: point = 179, n_alt = 0
   Insn 24: point = 181, n_alt = 0
   Insn 144: point = 183, n_alt = -2
	Hard reg 2 is preferable by r184 with profit 1000
   Insn 23: point = 185, n_alt = 0
   Insn 143: point = 186, n_alt = -2
	Hard reg 2 is preferable by r184 with profit 1000
	Hard reg 0 is preferable by r184 with profit 1000
   Insn 20: point = 187, n_alt = 0
   Insn 19: point = 188, n_alt = 3
   Insn 18: point = 190, n_alt = 0
   Insn 17: point = 192, n_alt = 3
   Insn 16: point = 193, n_alt = 1
   Insn 15: point = 195, n_alt = 0
   Insn 14: point = 197, n_alt = -2
   Insn 13: point = 199, n_alt = 0
   Insn 12: point = 201, n_alt = 0
   Insn 142: point = 203, n_alt = -2
	Hard reg 1 is preferable by r183 with profit 1000
   Insn 11: point = 205, n_alt = 0
   Insn 141: point = 206, n_alt = -2
	Hard reg 1 is preferable by r183 with profit 1000
	Hard reg 0 is preferable by r183 with profit 1000
   Insn 8: point = 207, n_alt = 0
   Insn 4: point = 208, n_alt = 1
   Insn 3: point = 208, n_alt = 1
   Insn 2: point = 208, n_alt = 5
 r82: [196..197]
 r83: [194..195]
 r84: [191..193]
 r85: [189..190]
 r86: [172..188]
 r87: [176..177]
 r88: [174..175]
 r89: [172..173]
 r90: [170..171]
 r91: [158..159]
 r92: [156..157]
 r93: [154..155]
 r94: [151..153]
 r95: [149..150]
 r96: [130..148]
 r97: [136..137]
 r98: [134..135]
 r99: [132..133]
 r100: [130..131]
 r101: [128..129]
 r102: [116..117]
 r103: [114..115]
 r104: [112..113]
 r105: [109..111]
 r106: [107..108]
 r107: [88..106]
 r108: [94..95]
 r109: [92..93]
 r110: [90..91]
 r111: [88..89]
 r112: [86..87]
 r113: [74..75]
 r114: [72..73]
 r115: [70..71]
 r116: [67..69]
 r117: [65..66]
 r118: [48..64]
 r119: [52..53]
 r120: [50..51]
 r121: [48..49]
 r122: [46..47]
 r123: [34..35]
 r124: [32..33]
 r125: [30..31]
 r126: [27..29]
 r127: [25..26]
 r128: [6..24]
 r129: [12..13]
 r130: [10..11]
 r131: [8..9]
 r132: [6..7]
 r133: [4..5]
 r134: [2..3]
 r135: [0..1]
 r136: [202..207]
 r137: [202..203]
 r138: [200..201]
 r139: [198..199]
 r140: [191..192]
 r141: [182..187]
 r142: [182..183]
 r143: [180..181]
 r144: [178..179]
 r145: [164..169]
 r146: [164..165]
 r147: [162..163]
 r148: [160..161]
 r149: [151..152]
 r150: [142..147]
 r151: [142..143]
 r152: [140..141]
 r153: [138..139]
 r154: [122..127]
 r155: [122..123]
 r156: [120..121]
 r157: [118..119]
 r158: [109..110]
 r159: [100..105]
 r160: [100..101]
 r161: [98..99]
 r162: [96..97]
 r163: [80..85]
 r164: [80..81]
 r165: [78..79]
 r166: [76..77]
 r167: [67..68]
 r168: [58..63]
 r169: [58..59]
 r170: [56..57]
 r171: [54..55]
 r172: [40..45]
 r173: [40..41]
 r174: [38..39]
 r175: [36..37]
 r176: [27..28]
 r177: [18..23]
 r178: [18..19]
 r179: [16..17]
 r180: [14..15]
 r183: [204..206]
 r184: [184..186]
 r185: [166..168]
 r186: [144..146]
 r187: [124..126]
 r188: [102..104]
 r189: [82..84]
 r190: [60..62]
 r191: [42..44]
 r192: [20..22]
Compressing live ranges: from 208 to 178 - 85%
Ranges after the compression:
 r82: [168..169]
 r83: [166..167]
 r84: [164..165]
 r85: [162..163]
 r86: [148..161]
 r87: [152..153]
 r88: [150..151]
 r89: [148..149]
 r90: [146..147]
 r91: [136..137]
 r92: [134..135]
 r93: [132..133]
 r94: [130..131]
 r95: [128..129]
 r96: [112..127]
 r97: [118..119]
 r98: [116..117]
 r99: [114..115]
 r100: [112..113]
 r101: [110..111]
 r102: [100..101]
 r103: [98..99]
 r104: [96..97]
 r105: [94..95]
 r106: [92..93]
 r107: [76..91]
 r108: [82..83]
 r109: [80..81]
 r110: [78..79]
 r111: [76..77]
 r112: [74..75]
 r113: [64..65]
 r114: [62..63]
 r115: [60..61]
 r116: [58..59]
 r117: [56..57]
 r118: [42..55]
 r119: [46..47]
 r120: [44..45]
 r121: [42..43]
 r122: [40..41]
 r123: [30..31]
 r124: [28..29]
 r125: [26..27]
 r126: [24..25]
 r127: [22..23]
 r128: [6..21]
 r129: [12..13]
 r130: [10..11]
 r131: [8..9]
 r132: [6..7]
 r133: [4..5]
 r134: [2..3]
 r135: [0..1]
 r136: [174..177]
 r137: [174..175]
 r138: [172..173]
 r139: [170..171]
 r140: [164..165]
 r141: [158..161]
 r142: [158..159]
 r143: [156..157]
 r144: [154..155]
 r145: [142..145]
 r146: [142..143]
 r147: [140..141]
 r148: [138..139]
 r149: [130..131]
 r150: [124..127]
 r151: [124..125]
 r152: [122..123]
 r153: [120..121]
 r154: [106..109]
 r155: [106..107]
 r156: [104..105]
 r157: [102..103]
 r158: [94..95]
 r159: [88..91]
 r160: [88..89]
 r161: [86..87]
 r162: [84..85]
 r163: [70..73]
 r164: [70..71]
 r165: [68..69]
 r166: [66..67]
 r167: [58..59]
 r168: [52..55]
 r169: [52..53]
 r170: [50..51]
 r171: [48..49]
 r172: [36..39]
 r173: [36..37]
 r174: [34..35]
 r175: [32..33]
 r176: [24..25]
 r177: [18..21]
 r178: [18..19]
 r179: [16..17]
 r180: [14..15]
 r183: [176..177]
 r184: [160..161]
 r185: [144..145]
 r186: [126..127]
 r187: [108..109]
 r188: [90..91]
 r189: [72..73]
 r190: [54..55]
 r191: [38..39]
 r192: [20..21]

********** Assignment #1: **********

	 Assigning to 183 (cl=GENERAL_REGS, orig=137, freq=3000, tfirst=183, tfreq=3000)...
	   Assign 1 to reload r183 (freq=3000)
	 Assigning to 184 (cl=GENERAL_REGS, orig=142, freq=3000, tfirst=184, tfreq=3000)...
	   Assign 2 to reload r184 (freq=3000)
	 Assigning to 185 (cl=GENERAL_REGS, orig=146, freq=3000, tfirst=185, tfreq=3000)...
	   Assign 1 to reload r185 (freq=3000)
	 Assigning to 186 (cl=GENERAL_REGS, orig=151, freq=3000, tfirst=186, tfreq=3000)...
	   Assign 2 to reload r186 (freq=3000)
	 Assigning to 187 (cl=GENERAL_REGS, orig=155, freq=3000, tfirst=187, tfreq=3000)...
	   Assign 1 to reload r187 (freq=3000)
	 Assigning to 188 (cl=GENERAL_REGS, orig=160, freq=3000, tfirst=188, tfreq=3000)...
	   Assign 2 to reload r188 (freq=3000)
	 Assigning to 189 (cl=GENERAL_REGS, orig=164, freq=3000, tfirst=189, tfreq=3000)...
	   Assign 1 to reload r189 (freq=3000)
	 Assigning to 190 (cl=GENERAL_REGS, orig=169, freq=3000, tfirst=190, tfreq=3000)...
	   Assign 2 to reload r190 (freq=3000)
	 Assigning to 191 (cl=GENERAL_REGS, orig=173, freq=3000, tfirst=191, tfreq=3000)...
	   Assign 1 to reload r191 (freq=3000)
	 Assigning to 192 (cl=GENERAL_REGS, orig=178, freq=3000, tfirst=192, tfreq=3000)...
	   Assign 2 to reload r192 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 14
changing reg in insn 15
changing reg in insn 15
changing reg in insn 16
changing reg in insn 16
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 39
changing reg in insn 39
changing reg in insn 40
changing reg in insn 40
changing reg in insn 42
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 52
changing reg in insn 52
changing reg in insn 53
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 62
changing reg in insn 63
changing reg in insn 63
changing reg in insn 64
changing reg in insn 64
changing reg in insn 65
changing reg in insn 65
changing reg in insn 67
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 75
changing reg in insn 76
changing reg in insn 76
changing reg in insn 77
changing reg in insn 77
changing reg in insn 78
changing reg in insn 78
changing reg in insn 79
changing reg in insn 80
changing reg in insn 87
changing reg in insn 88
changing reg in insn 88
changing reg in insn 89
changing reg in insn 89
changing reg in insn 90
changing reg in insn 90
changing reg in insn 92
changing reg in insn 92
changing reg in insn 93
changing reg in insn 93
changing reg in insn 100
changing reg in insn 101
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 103
changing reg in insn 104
changing reg in insn 111
changing reg in insn 112
changing reg in insn 112
changing reg in insn 113
changing reg in insn 113
changing reg in insn 114
changing reg in insn 114
changing reg in insn 116
changing reg in insn 116
changing reg in insn 117
changing reg in insn 117
changing reg in insn 124
changing reg in insn 125
changing reg in insn 125
changing reg in insn 126
changing reg in insn 126
changing reg in insn 127
changing reg in insn 127
changing reg in insn 128
changing reg in insn 129
changing reg in insn 130
changing reg in insn 133
changing reg in insn 133
changing reg in insn 137
changing reg in insn 8
changing reg in insn 12
changing reg in insn 13
changing reg in insn 13
changing reg in insn 14
changing reg in insn 17
changing reg in insn 20
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 26
changing reg in insn 31
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 37
changing reg in insn 41
changing reg in insn 44
changing reg in insn 48
changing reg in insn 49
changing reg in insn 49
changing reg in insn 50
changing reg in insn 56
changing reg in insn 60
changing reg in insn 61
changing reg in insn 61
changing reg in insn 62
changing reg in insn 66
changing reg in insn 69
changing reg in insn 73
changing reg in insn 74
changing reg in insn 74
changing reg in insn 75
changing reg in insn 81
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 87
changing reg in insn 91
changing reg in insn 94
changing reg in insn 98
changing reg in insn 99
changing reg in insn 99
changing reg in insn 100
changing reg in insn 105
changing reg in insn 109
changing reg in insn 110
changing reg in insn 110
changing reg in insn 111
changing reg in insn 115
changing reg in insn 118
changing reg in insn 122
changing reg in insn 123
changing reg in insn 123
changing reg in insn 124
deleting insn with uid = 142.
deleting insn with uid = 14.
deleting insn with uid = 144.
deleting insn with uid = 26.
deleting insn with uid = 146.
deleting insn with uid = 37.
deleting insn with uid = 148.
deleting insn with uid = 50.
deleting insn with uid = 150.
deleting insn with uid = 62.
deleting insn with uid = 152.
deleting insn with uid = 75.
deleting insn with uid = 154.
deleting insn with uid = 87.
deleting insn with uid = 156.
deleting insn with uid = 100.
deleting insn with uid = 158.
deleting insn with uid = 111.
deleting insn with uid = 160.
deleting insn with uid = 124.
deleting insn with uid = 133.
deleting insn with uid = 137.
starting the processing of deferred insns
ending the processing of deferred insns


dynamic_array_init_life

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={69d,79u} r1={21d,21u,5e} r2={11d,10u} r4={1d,1u} r5={1d,1u} r6={1d,21u} r7={1d,2u} r17={57d} r19={1d,1u,5e} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r36={1d} r37={1d} 
;;    total ref usage 319{173d,136u,10e} in 107{107 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 17 [flags] 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
        (reg:DI 5 di [ A ])) "game_of_life.c":105:54 74 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 N+0 S4 A32])
        (reg:SI 4 si [ N ])) "game_of_life.c":105:54 75 {*movsi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 M+0 S4 A32])
        (reg:SI 1 dx [ M ])) "game_of_life.c":105:54 75 {*movsi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 141 2 (set (reg:SI 0 ax [136])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 N+0 S4 A32])) "game_of_life.c":108:9 75 {*movsi_internal}
     (nil))
(insn 141 8 11 2 (set (reg:SI 1 dx [137])
        (reg:SI 0 ax [136])) "game_of_life.c":108:9 75 {*movsi_internal}
     (nil))
(insn 11 141 12 2 (parallel [
            (set (reg:SI 1 dx [137])
                (lshiftrt:SI (reg:SI 1 dx [137])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":108:9 701 {*lshrsi3_1}
     (nil))
(insn 12 11 13 2 (parallel [
            (set (reg:SI 0 ax [138])
                (plus:SI (reg:SI 0 ax [136])
                    (reg:SI 1 dx [137])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":108:9 209 {*addsi_1}
     (nil))
(insn 13 12 15 2 (parallel [
            (set (reg:SI 0 ax [139])
                (ashiftrt:SI (reg:SI 0 ax [138])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":108:9 702 {*ashrsi3_1}
     (nil))
(insn 15 13 16 2 (set (reg:DI 0 ax [orig:83 _2 ] [83])
        (sign_extend:DI (reg:SI 0 ax [orig:82 _1 ] [82]))) "game_of_life.c":108:9 147 {*extendsidi2_rex64}
     (nil))
(insn 16 15 17 2 (parallel [
            (set (reg:DI 1 dx [orig:84 _3 ] [84])
                (ashift:DI (reg:DI 0 ax [orig:83 _2 ] [83])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":108:6 656 {*ashldi3_1}
     (nil))
(insn 17 16 18 2 (set (reg/f:DI 0 ax [140])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":108:6 74 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (parallel [
            (set (reg/f:DI 0 ax [orig:85 _4 ] [85])
                (plus:DI (reg/f:DI 0 ax [140])
                    (reg:DI 1 dx [orig:84 _3 ] [84])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":108:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (reg:DI 1 dx [orig:84 _3 ] [84]))
        (nil)))
(insn 19 18 20 2 (set (reg/f:DI 1 dx [orig:86 _5 ] [86])
        (mem/f:DI (reg/f:DI 0 ax [orig:85 _4 ] [85]) [4 *_4+0 S8 A64])) "game_of_life.c":108:6 74 {*movdi_internal}
     (nil))
(insn 20 19 143 2 (set (reg:SI 0 ax [141])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 M+0 S4 A32])) "game_of_life.c":108:16 75 {*movsi_internal}
     (nil))
(insn 143 20 23 2 (set (reg:SI 2 cx [142])
        (reg:SI 0 ax [141])) "game_of_life.c":108:16 75 {*movsi_internal}
     (nil))
(insn 23 143 24 2 (parallel [
            (set (reg:SI 2 cx [142])
                (lshiftrt:SI (reg:SI 2 cx [142])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":108:16 701 {*lshrsi3_1}
     (nil))
(insn 24 23 25 2 (parallel [
            (set (reg:SI 0 ax [143])
                (plus:SI (reg:SI 0 ax [141])
                    (reg:SI 2 cx [142])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":108:16 209 {*addsi_1}
     (nil))
(insn 25 24 27 2 (parallel [
            (set (reg:SI 0 ax [144])
                (ashiftrt:SI (reg:SI 0 ax [143])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":108:16 702 {*ashrsi3_1}
     (nil))
(insn 27 25 28 2 (set (reg:DI 0 ax [orig:88 _7 ] [88])
        (sign_extend:DI (reg:SI 0 ax [orig:87 _6 ] [87]))) "game_of_life.c":108:16 147 {*extendsidi2_rex64}
     (nil))
(insn 28 27 29 2 (parallel [
            (set (reg:DI 0 ax [orig:89 _8 ] [89])
                (ashift:DI (reg:DI 0 ax [orig:88 _7 ] [88])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":108:13 656 {*ashldi3_1}
     (nil))
(insn 29 28 30 2 (parallel [
            (set (reg/f:DI 0 ax [orig:90 _9 ] [90])
                (plus:DI (reg:DI 0 ax [orig:89 _8 ] [89])
                    (reg/f:DI 1 dx [orig:86 _5 ] [86])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":108:13 210 {*adddi_1}
     (nil))
(insn 30 29 31 2 (set (mem:SI (reg/f:DI 0 ax [orig:90 _9 ] [90]) [2 *_9+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":108:21 75 {*movsi_internal}
     (nil))
(insn 31 30 145 2 (set (reg:SI 0 ax [145])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 N+0 S4 A32])) "game_of_life.c":109:10 75 {*movsi_internal}
     (nil))
(insn 145 31 34 2 (set (reg:SI 1 dx [146])
        (reg:SI 0 ax [145])) "game_of_life.c":109:10 75 {*movsi_internal}
     (nil))
(insn 34 145 35 2 (parallel [
            (set (reg:SI 1 dx [146])
                (lshiftrt:SI (reg:SI 1 dx [146])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":109:10 701 {*lshrsi3_1}
     (nil))
(insn 35 34 36 2 (parallel [
            (set (reg:SI 0 ax [147])
                (plus:SI (reg:SI 0 ax [145])
                    (reg:SI 1 dx [146])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":109:10 209 {*addsi_1}
     (nil))
(insn 36 35 38 2 (parallel [
            (set (reg:SI 0 ax [148])
                (ashiftrt:SI (reg:SI 0 ax [147])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":109:10 702 {*ashrsi3_1}
     (nil))
(insn 38 36 39 2 (set (reg:DI 0 ax [orig:92 _11 ] [92])
        (sign_extend:DI (reg:SI 0 ax [orig:91 _10 ] [91]))) "game_of_life.c":109:6 147 {*extendsidi2_rex64}
     (nil))
(insn 39 38 40 2 (parallel [
            (set (reg:DI 0 ax [orig:93 _12 ] [93])
                (plus:DI (reg:DI 0 ax [orig:92 _11 ] [92])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":109:6 210 {*adddi_1}
     (nil))
(insn 40 39 41 2 (parallel [
            (set (reg:DI 1 dx [orig:94 _13 ] [94])
                (ashift:DI (reg:DI 0 ax [orig:93 _12 ] [93])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":109:6 656 {*ashldi3_1}
     (nil))
(insn 41 40 42 2 (set (reg/f:DI 0 ax [149])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":109:6 74 {*movdi_internal}
     (nil))
(insn 42 41 43 2 (parallel [
            (set (reg/f:DI 0 ax [orig:95 _14 ] [95])
                (plus:DI (reg/f:DI 0 ax [149])
                    (reg:DI 1 dx [orig:94 _13 ] [94])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":109:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (reg:DI 1 dx [orig:94 _13 ] [94]))
        (nil)))
(insn 43 42 44 2 (set (reg/f:DI 1 dx [orig:96 _15 ] [96])
        (mem/f:DI (reg/f:DI 0 ax [orig:95 _14 ] [95]) [4 *_14+0 S8 A64])) "game_of_life.c":109:6 74 {*movdi_internal}
     (nil))
(insn 44 43 147 2 (set (reg:SI 0 ax [150])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 M+0 S4 A32])) "game_of_life.c":109:23 75 {*movsi_internal}
     (nil))
(insn 147 44 47 2 (set (reg:SI 2 cx [151])
        (reg:SI 0 ax [150])) "game_of_life.c":109:23 75 {*movsi_internal}
     (nil))
(insn 47 147 48 2 (parallel [
            (set (reg:SI 2 cx [151])
                (lshiftrt:SI (reg:SI 2 cx [151])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":109:23 701 {*lshrsi3_1}
     (nil))
(insn 48 47 49 2 (parallel [
            (set (reg:SI 0 ax [152])
                (plus:SI (reg:SI 0 ax [150])
                    (reg:SI 2 cx [151])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":109:23 209 {*addsi_1}
     (nil))
(insn 49 48 51 2 (parallel [
            (set (reg:SI 0 ax [153])
                (ashiftrt:SI (reg:SI 0 ax [152])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":109:23 702 {*ashrsi3_1}
     (nil))
(insn 51 49 52 2 (set (reg:DI 0 ax [orig:98 _17 ] [98])
        (sign_extend:DI (reg:SI 0 ax [orig:97 _16 ] [97]))) "game_of_life.c":109:19 147 {*extendsidi2_rex64}
     (nil))
(insn 52 51 53 2 (parallel [
            (set (reg:DI 0 ax [orig:99 _18 ] [99])
                (plus:DI (reg:DI 0 ax [orig:98 _17 ] [98])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":109:19 210 {*adddi_1}
     (nil))
(insn 53 52 54 2 (parallel [
            (set (reg:DI 0 ax [orig:100 _19 ] [100])
                (ashift:DI (reg:DI 0 ax [orig:99 _18 ] [99])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":109:19 656 {*ashldi3_1}
     (nil))
(insn 54 53 55 2 (parallel [
            (set (reg/f:DI 0 ax [orig:101 _20 ] [101])
                (plus:DI (reg:DI 0 ax [orig:100 _19 ] [100])
                    (reg/f:DI 1 dx [orig:96 _15 ] [96])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":109:19 210 {*adddi_1}
     (nil))
(insn 55 54 56 2 (set (mem:SI (reg/f:DI 0 ax [orig:101 _20 ] [101]) [2 *_20+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":109:33 75 {*movsi_internal}
     (nil))
(insn 56 55 149 2 (set (reg:SI 0 ax [154])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 N+0 S4 A32])) "game_of_life.c":110:10 75 {*movsi_internal}
     (nil))
(insn 149 56 59 2 (set (reg:SI 1 dx [155])
        (reg:SI 0 ax [154])) "game_of_life.c":110:10 75 {*movsi_internal}
     (nil))
(insn 59 149 60 2 (parallel [
            (set (reg:SI 1 dx [155])
                (lshiftrt:SI (reg:SI 1 dx [155])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":110:10 701 {*lshrsi3_1}
     (nil))
(insn 60 59 61 2 (parallel [
            (set (reg:SI 0 ax [156])
                (plus:SI (reg:SI 0 ax [154])
                    (reg:SI 1 dx [155])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":110:10 209 {*addsi_1}
     (nil))
(insn 61 60 63 2 (parallel [
            (set (reg:SI 0 ax [157])
                (ashiftrt:SI (reg:SI 0 ax [156])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":110:10 702 {*ashrsi3_1}
     (nil))
(insn 63 61 64 2 (set (reg:DI 0 ax [orig:103 _22 ] [103])
        (sign_extend:DI (reg:SI 0 ax [orig:102 _21 ] [102]))) "game_of_life.c":110:6 147 {*extendsidi2_rex64}
     (nil))
(insn 64 63 65 2 (parallel [
            (set (reg:DI 0 ax [orig:104 _23 ] [104])
                (plus:DI (reg:DI 0 ax [orig:103 _22 ] [103])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":110:6 210 {*adddi_1}
     (nil))
(insn 65 64 66 2 (parallel [
            (set (reg:DI 1 dx [orig:105 _24 ] [105])
                (ashift:DI (reg:DI 0 ax [orig:104 _23 ] [104])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":110:6 656 {*ashldi3_1}
     (nil))
(insn 66 65 67 2 (set (reg/f:DI 0 ax [158])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":110:6 74 {*movdi_internal}
     (nil))
(insn 67 66 68 2 (parallel [
            (set (reg/f:DI 0 ax [orig:106 _25 ] [106])
                (plus:DI (reg/f:DI 0 ax [158])
                    (reg:DI 1 dx [orig:105 _24 ] [105])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":110:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (reg:DI 1 dx [orig:105 _24 ] [105]))
        (nil)))
(insn 68 67 69 2 (set (reg/f:DI 1 dx [orig:107 _26 ] [107])
        (mem/f:DI (reg/f:DI 0 ax [orig:106 _25 ] [106]) [4 *_25+0 S8 A64])) "game_of_life.c":110:6 74 {*movdi_internal}
     (nil))
(insn 69 68 151 2 (set (reg:SI 0 ax [159])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 M+0 S4 A32])) "game_of_life.c":110:23 75 {*movsi_internal}
     (nil))
(insn 151 69 72 2 (set (reg:SI 2 cx [160])
        (reg:SI 0 ax [159])) "game_of_life.c":110:23 75 {*movsi_internal}
     (nil))
(insn 72 151 73 2 (parallel [
            (set (reg:SI 2 cx [160])
                (lshiftrt:SI (reg:SI 2 cx [160])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":110:23 701 {*lshrsi3_1}
     (nil))
(insn 73 72 74 2 (parallel [
            (set (reg:SI 0 ax [161])
                (plus:SI (reg:SI 0 ax [159])
                    (reg:SI 2 cx [160])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":110:23 209 {*addsi_1}
     (nil))
(insn 74 73 76 2 (parallel [
            (set (reg:SI 0 ax [162])
                (ashiftrt:SI (reg:SI 0 ax [161])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":110:23 702 {*ashrsi3_1}
     (nil))
(insn 76 74 77 2 (set (reg:DI 0 ax [orig:109 _28 ] [109])
        (sign_extend:DI (reg:SI 0 ax [orig:108 _27 ] [108]))) "game_of_life.c":110:19 147 {*extendsidi2_rex64}
     (nil))
(insn 77 76 78 2 (parallel [
            (set (reg:DI 0 ax [orig:110 _29 ] [110])
                (plus:DI (reg:DI 0 ax [orig:109 _28 ] [109])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":110:19 210 {*adddi_1}
     (nil))
(insn 78 77 79 2 (parallel [
            (set (reg:DI 0 ax [orig:111 _30 ] [111])
                (ashift:DI (reg:DI 0 ax [orig:110 _29 ] [110])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":110:19 656 {*ashldi3_1}
     (nil))
(insn 79 78 80 2 (parallel [
            (set (reg/f:DI 0 ax [orig:112 _31 ] [112])
                (plus:DI (reg:DI 0 ax [orig:111 _30 ] [111])
                    (reg/f:DI 1 dx [orig:107 _26 ] [107])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":110:19 210 {*adddi_1}
     (nil))
(insn 80 79 81 2 (set (mem:SI (reg/f:DI 0 ax [orig:112 _31 ] [112]) [2 *_31+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":110:33 75 {*movsi_internal}
     (nil))
(insn 81 80 153 2 (set (reg:SI 0 ax [163])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 N+0 S4 A32])) "game_of_life.c":111:10 75 {*movsi_internal}
     (nil))
(insn 153 81 84 2 (set (reg:SI 1 dx [164])
        (reg:SI 0 ax [163])) "game_of_life.c":111:10 75 {*movsi_internal}
     (nil))
(insn 84 153 85 2 (parallel [
            (set (reg:SI 1 dx [164])
                (lshiftrt:SI (reg:SI 1 dx [164])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":111:10 701 {*lshrsi3_1}
     (nil))
(insn 85 84 86 2 (parallel [
            (set (reg:SI 0 ax [165])
                (plus:SI (reg:SI 0 ax [163])
                    (reg:SI 1 dx [164])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":111:10 209 {*addsi_1}
     (nil))
(insn 86 85 88 2 (parallel [
            (set (reg:SI 0 ax [166])
                (ashiftrt:SI (reg:SI 0 ax [165])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":111:10 702 {*ashrsi3_1}
     (nil))
(insn 88 86 89 2 (set (reg:DI 0 ax [orig:114 _33 ] [114])
        (sign_extend:DI (reg:SI 0 ax [orig:113 _32 ] [113]))) "game_of_life.c":111:6 147 {*extendsidi2_rex64}
     (nil))
(insn 89 88 90 2 (parallel [
            (set (reg:DI 0 ax [orig:115 _34 ] [115])
                (plus:DI (reg:DI 0 ax [orig:114 _33 ] [114])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":111:6 210 {*adddi_1}
     (nil))
(insn 90 89 91 2 (parallel [
            (set (reg:DI 1 dx [orig:116 _35 ] [116])
                (ashift:DI (reg:DI 0 ax [orig:115 _34 ] [115])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":111:6 656 {*ashldi3_1}
     (nil))
(insn 91 90 92 2 (set (reg/f:DI 0 ax [167])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":111:6 74 {*movdi_internal}
     (nil))
(insn 92 91 93 2 (parallel [
            (set (reg/f:DI 0 ax [orig:117 _36 ] [117])
                (plus:DI (reg/f:DI 0 ax [167])
                    (reg:DI 1 dx [orig:116 _35 ] [116])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":111:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (reg:DI 1 dx [orig:116 _35 ] [116]))
        (nil)))
(insn 93 92 94 2 (set (reg/f:DI 1 dx [orig:118 _37 ] [118])
        (mem/f:DI (reg/f:DI 0 ax [orig:117 _36 ] [117]) [4 *_36+0 S8 A64])) "game_of_life.c":111:6 74 {*movdi_internal}
     (nil))
(insn 94 93 155 2 (set (reg:SI 0 ax [168])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 M+0 S4 A32])) "game_of_life.c":111:23 75 {*movsi_internal}
     (nil))
(insn 155 94 97 2 (set (reg:SI 2 cx [169])
        (reg:SI 0 ax [168])) "game_of_life.c":111:23 75 {*movsi_internal}
     (nil))
(insn 97 155 98 2 (parallel [
            (set (reg:SI 2 cx [169])
                (lshiftrt:SI (reg:SI 2 cx [169])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":111:23 701 {*lshrsi3_1}
     (nil))
(insn 98 97 99 2 (parallel [
            (set (reg:SI 0 ax [170])
                (plus:SI (reg:SI 0 ax [168])
                    (reg:SI 2 cx [169])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":111:23 209 {*addsi_1}
     (nil))
(insn 99 98 101 2 (parallel [
            (set (reg:SI 0 ax [171])
                (ashiftrt:SI (reg:SI 0 ax [170])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":111:23 702 {*ashrsi3_1}
     (nil))
(insn 101 99 102 2 (set (reg:DI 0 ax [orig:120 _39 ] [120])
        (sign_extend:DI (reg:SI 0 ax [orig:119 _38 ] [119]))) "game_of_life.c":111:23 147 {*extendsidi2_rex64}
     (nil))
(insn 102 101 103 2 (parallel [
            (set (reg:DI 0 ax [orig:121 _40 ] [121])
                (ashift:DI (reg:DI 0 ax [orig:120 _39 ] [120])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":111:19 656 {*ashldi3_1}
     (nil))
(insn 103 102 104 2 (parallel [
            (set (reg/f:DI 0 ax [orig:122 _41 ] [122])
                (plus:DI (reg:DI 0 ax [orig:121 _40 ] [121])
                    (reg/f:DI 1 dx [orig:118 _37 ] [118])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":111:19 210 {*adddi_1}
     (nil))
(insn 104 103 105 2 (set (mem:SI (reg/f:DI 0 ax [orig:122 _41 ] [122]) [2 *_41+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":111:29 75 {*movsi_internal}
     (nil))
(insn 105 104 157 2 (set (reg:SI 0 ax [172])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 N+0 S4 A32])) "game_of_life.c":112:10 75 {*movsi_internal}
     (nil))
(insn 157 105 108 2 (set (reg:SI 1 dx [173])
        (reg:SI 0 ax [172])) "game_of_life.c":112:10 75 {*movsi_internal}
     (nil))
(insn 108 157 109 2 (parallel [
            (set (reg:SI 1 dx [173])
                (lshiftrt:SI (reg:SI 1 dx [173])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":112:10 701 {*lshrsi3_1}
     (nil))
(insn 109 108 110 2 (parallel [
            (set (reg:SI 0 ax [174])
                (plus:SI (reg:SI 0 ax [172])
                    (reg:SI 1 dx [173])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":112:10 209 {*addsi_1}
     (nil))
(insn 110 109 112 2 (parallel [
            (set (reg:SI 0 ax [175])
                (ashiftrt:SI (reg:SI 0 ax [174])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":112:10 702 {*ashrsi3_1}
     (nil))
(insn 112 110 113 2 (set (reg:DI 0 ax [orig:124 _43 ] [124])
        (sign_extend:DI (reg:SI 0 ax [orig:123 _42 ] [123]))) "game_of_life.c":112:6 147 {*extendsidi2_rex64}
     (nil))
(insn 113 112 114 2 (parallel [
            (set (reg:DI 0 ax [orig:125 _44 ] [125])
                (plus:DI (reg:DI 0 ax [orig:124 _43 ] [124])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":112:6 210 {*adddi_1}
     (nil))
(insn 114 113 115 2 (parallel [
            (set (reg:DI 1 dx [orig:126 _45 ] [126])
                (ashift:DI (reg:DI 0 ax [orig:125 _44 ] [125])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":112:6 656 {*ashldi3_1}
     (nil))
(insn 115 114 116 2 (set (reg/f:DI 0 ax [176])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":112:6 74 {*movdi_internal}
     (nil))
(insn 116 115 117 2 (parallel [
            (set (reg/f:DI 0 ax [orig:127 _46 ] [127])
                (plus:DI (reg/f:DI 0 ax [176])
                    (reg:DI 1 dx [orig:126 _45 ] [126])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":112:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (reg:DI 1 dx [orig:126 _45 ] [126]))
        (nil)))
(insn 117 116 118 2 (set (reg/f:DI 1 dx [orig:128 _47 ] [128])
        (mem/f:DI (reg/f:DI 0 ax [orig:127 _46 ] [127]) [4 *_46+0 S8 A64])) "game_of_life.c":112:6 74 {*movdi_internal}
     (nil))
(insn 118 117 159 2 (set (reg:SI 0 ax [177])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 M+0 S4 A32])) "game_of_life.c":112:23 75 {*movsi_internal}
     (nil))
(insn 159 118 121 2 (set (reg:SI 2 cx [178])
        (reg:SI 0 ax [177])) "game_of_life.c":112:23 75 {*movsi_internal}
     (nil))
(insn 121 159 122 2 (parallel [
            (set (reg:SI 2 cx [178])
                (lshiftrt:SI (reg:SI 2 cx [178])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":112:23 701 {*lshrsi3_1}
     (nil))
(insn 122 121 123 2 (parallel [
            (set (reg:SI 0 ax [179])
                (plus:SI (reg:SI 0 ax [177])
                    (reg:SI 2 cx [178])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":112:23 209 {*addsi_1}
     (nil))
(insn 123 122 125 2 (parallel [
            (set (reg:SI 0 ax [180])
                (ashiftrt:SI (reg:SI 0 ax [179])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":112:23 702 {*ashrsi3_1}
     (nil))
(insn 125 123 126 2 (set (reg:DI 0 ax [orig:130 _49 ] [130])
        (sign_extend:DI (reg:SI 0 ax [orig:129 _48 ] [129]))) "game_of_life.c":112:23 147 {*extendsidi2_rex64}
     (nil))
(insn 126 125 127 2 (parallel [
            (set (reg:DI 0 ax [orig:131 _50 ] [131])
                (ashift:DI (reg:DI 0 ax [orig:130 _49 ] [130])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":112:19 656 {*ashldi3_1}
     (nil))
(insn 127 126 128 2 (parallel [
            (set (reg:DI 0 ax [orig:132 _51 ] [132])
                (plus:DI (reg:DI 0 ax [orig:131 _50 ] [131])
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":112:19 210 {*adddi_1}
     (nil))
(insn 128 127 129 2 (parallel [
            (set (reg/f:DI 0 ax [orig:133 _52 ] [133])
                (plus:DI (reg:DI 0 ax [orig:132 _51 ] [132])
                    (reg/f:DI 1 dx [orig:128 _47 ] [128])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":112:19 210 {*adddi_1}
     (nil))
(insn 129 128 130 2 (set (mem:SI (reg/f:DI 0 ax [orig:133 _52 ] [133]) [2 *_52+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":112:33 75 {*movsi_internal}
     (nil))
(insn 130 129 138 2 (set (reg/f:DI 0 ax [orig:134 _62 ] [134])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":114:12 74 {*movdi_internal}
     (nil))
(insn 138 130 140 2 (use (reg/i:DI 0 ax)) "game_of_life.c":115:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 140 138 0 NOTE_INSN_DELETED)

;; Function dynamic_array_init_life2 (dynamic_array_init_life2, funcdef_no=12, decl_uid=4946, cgraph_uid=13, symbol_order=12)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 11:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=222 from oldreg=158, assigning class GENERAL_REGS to r222
   11: {r222:SI=r222:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  190: r222:SI=r157:SI
    Inserting insn reload after:
  191: r158:SI=r222:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 12
	 Choosing alt 0 in insn 12:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 16:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 19
	 Choosing alt 0 in insn 19:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 24:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=223 from oldreg=163, assigning class GENERAL_REGS to r223
   24: {r223:SI=r223:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  192: r223:SI=r162:SI
    Inserting insn reload after:
  193: r163:SI=r223:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 25
	 Choosing alt 0 in insn 25:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 30:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 31
	 Choosing alt 0 in insn 31:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 36:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=224 from oldreg=167, assigning class GENERAL_REGS to r224
   36: {r224:SI=r224:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  194: r224:SI=r166:SI
    Inserting insn reload after:
  195: r167:SI=r224:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 37
	 Choosing alt 0 in insn 37:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 42:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 43
	 Choosing alt 0 in insn 43:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 44:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 48:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=225 from oldreg=172, assigning class GENERAL_REGS to r225
   48: {r225:SI=r225:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  196: r225:SI=r171:SI
    Inserting insn reload after:
  197: r172:SI=r225:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 49
	 Choosing alt 0 in insn 49:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 54
	 Choosing alt 0 in insn 54:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 59:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=226 from oldreg=176, assigning class GENERAL_REGS to r226
   59: {r226:SI=r226:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  198: r226:SI=r175:SI
    Inserting insn reload after:
  199: r176:SI=r226:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 60
	 Choosing alt 0 in insn 60:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 64:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 65:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 66
	 Choosing alt 0 in insn 66:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 67:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 71:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=227 from oldreg=181, assigning class GENERAL_REGS to r227
   71: {r227:SI=r227:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  200: r227:SI=r180:SI
    Inserting insn reload after:
  201: r181:SI=r227:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 72
	 Choosing alt 0 in insn 72:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 76:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 78
	 Choosing alt 0 in insn 78:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 79:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 83:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=228 from oldreg=185, assigning class GENERAL_REGS to r228
   83: {r228:SI=r228:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  202: r228:SI=r184:SI
    Inserting insn reload after:
  203: r185:SI=r228:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 84
	 Choosing alt 0 in insn 84:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 88:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 89:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 90:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 91
	 Choosing alt 0 in insn 91:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 92:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 96:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=229 from oldreg=190, assigning class GENERAL_REGS to r229
   96: {r229:SI=r229:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  204: r229:SI=r189:SI
    Inserting insn reload after:
  205: r190:SI=r229:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 97
	 Choosing alt 0 in insn 97:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 101:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 103
	 Choosing alt 0 in insn 103:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 104:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 108:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=230 from oldreg=194, assigning class GENERAL_REGS to r230
  108: {r230:SI=r230:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  206: r230:SI=r193:SI
    Inserting insn reload after:
  207: r194:SI=r230:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 109
	 Choosing alt 0 in insn 109:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 113:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 114:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 115:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 116
	 Choosing alt 0 in insn 116:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 117:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 121:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=231 from oldreg=199, assigning class GENERAL_REGS to r231
  121: {r231:SI=r231:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  208: r231:SI=r198:SI
    Inserting insn reload after:
  209: r199:SI=r231:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 122
	 Choosing alt 0 in insn 122:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 126:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 128
	 Choosing alt 0 in insn 128:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 129:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 133:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=232 from oldreg=203, assigning class GENERAL_REGS to r232
  133: {r232:SI=r232:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  210: r232:SI=r202:SI
    Inserting insn reload after:
  211: r203:SI=r232:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 134
	 Choosing alt 0 in insn 134:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 138:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 139:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 140:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 141
	 Choosing alt 0 in insn 141:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 142:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 146:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=233 from oldreg=208, assigning class GENERAL_REGS to r233
  146: {r233:SI=r233:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  212: r233:SI=r207:SI
    Inserting insn reload after:
  213: r208:SI=r233:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 147
	 Choosing alt 0 in insn 147:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 152
	 Choosing alt 0 in insn 152:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 153:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 157:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=234 from oldreg=212, assigning class GENERAL_REGS to r234
  157: {r234:SI=r234:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  214: r234:SI=r211:SI
    Inserting insn reload after:
  215: r212:SI=r234:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 158
	 Choosing alt 0 in insn 158:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 162:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 163:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 164:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 165
	 Choosing alt 0 in insn 165:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 166:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 170:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=235 from oldreg=217, assigning class GENERAL_REGS to r235
  170: {r235:SI=r235:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  216: r235:SI=r216:SI
    Inserting insn reload after:
  217: r217:SI=r235:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 171
	 Choosing alt 0 in insn 171:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 172:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 174:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 175:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 176:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 177
	 Choosing alt 0 in insn 177:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 178:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 179:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 187: point = 0, n_alt = -1
   Insn 186: point = 0, n_alt = -2
   Insn 182: point = 1, n_alt = -2
   Insn 179: point = 3, n_alt = 3
   Insn 178: point = 4, n_alt = 1
   Insn 177: point = 5, n_alt = 0
   Insn 176: point = 7, n_alt = 0
   Insn 175: point = 9, n_alt = 0
   Insn 174: point = 11, n_alt = 0
   Insn 173: point = 13, n_alt = -2
   Insn 172: point = 15, n_alt = 0
   Insn 171: point = 17, n_alt = 0
   Insn 217: point = 19, n_alt = -2
	Hard reg 2 is preferable by r235 with profit 1000
   Insn 170: point = 21, n_alt = 0
   Insn 216: point = 22, n_alt = -2
	Hard reg 2 is preferable by r235 with profit 1000
	Hard reg 0 is preferable by r235 with profit 1000
   Insn 167: point = 23, n_alt = 0
   Insn 166: point = 24, n_alt = 3
   Insn 165: point = 26, n_alt = 0
   Insn 164: point = 28, n_alt = 3
   Insn 163: point = 29, n_alt = 1
   Insn 162: point = 31, n_alt = 0
   Insn 161: point = 33, n_alt = 0
   Insn 160: point = 35, n_alt = -2
   Insn 159: point = 37, n_alt = 0
   Insn 158: point = 39, n_alt = 0
   Insn 215: point = 41, n_alt = -2
	Hard reg 1 is preferable by r234 with profit 1000
   Insn 157: point = 43, n_alt = 0
   Insn 214: point = 44, n_alt = -2
	Hard reg 1 is preferable by r234 with profit 1000
	Hard reg 0 is preferable by r234 with profit 1000
   Insn 154: point = 45, n_alt = 0
   Insn 153: point = 46, n_alt = 1
   Insn 152: point = 47, n_alt = 0
   Insn 151: point = 49, n_alt = 0
   Insn 150: point = 51, n_alt = 0
   Insn 149: point = 53, n_alt = -2
   Insn 148: point = 55, n_alt = 0
   Insn 147: point = 57, n_alt = 0
   Insn 213: point = 59, n_alt = -2
	Hard reg 2 is preferable by r233 with profit 1000
   Insn 146: point = 61, n_alt = 0
   Insn 212: point = 62, n_alt = -2
	Hard reg 2 is preferable by r233 with profit 1000
	Hard reg 0 is preferable by r233 with profit 1000
   Insn 143: point = 63, n_alt = 0
   Insn 142: point = 64, n_alt = 3
   Insn 141: point = 66, n_alt = 0
   Insn 140: point = 68, n_alt = 3
   Insn 139: point = 69, n_alt = 1
   Insn 138: point = 71, n_alt = 0
   Insn 137: point = 73, n_alt = 0
   Insn 136: point = 75, n_alt = -2
   Insn 135: point = 77, n_alt = 0
   Insn 134: point = 79, n_alt = 0
   Insn 211: point = 81, n_alt = -2
	Hard reg 1 is preferable by r232 with profit 1000
   Insn 133: point = 83, n_alt = 0
   Insn 210: point = 84, n_alt = -2
	Hard reg 1 is preferable by r232 with profit 1000
	Hard reg 0 is preferable by r232 with profit 1000
   Insn 130: point = 85, n_alt = 0
   Insn 129: point = 86, n_alt = 1
   Insn 128: point = 87, n_alt = 0
   Insn 127: point = 89, n_alt = 0
   Insn 126: point = 91, n_alt = 0
   Insn 125: point = 93, n_alt = 0
   Insn 124: point = 95, n_alt = -2
   Insn 123: point = 97, n_alt = 0
   Insn 122: point = 99, n_alt = 0
   Insn 209: point = 101, n_alt = -2
	Hard reg 2 is preferable by r231 with profit 1000
   Insn 121: point = 103, n_alt = 0
   Insn 208: point = 104, n_alt = -2
	Hard reg 2 is preferable by r231 with profit 1000
	Hard reg 0 is preferable by r231 with profit 1000
   Insn 118: point = 105, n_alt = 0
   Insn 117: point = 106, n_alt = 3
   Insn 116: point = 108, n_alt = 0
   Insn 115: point = 110, n_alt = 3
   Insn 114: point = 111, n_alt = 1
   Insn 113: point = 113, n_alt = 0
   Insn 112: point = 115, n_alt = 0
   Insn 111: point = 117, n_alt = -2
   Insn 110: point = 119, n_alt = 0
   Insn 109: point = 121, n_alt = 0
   Insn 207: point = 123, n_alt = -2
	Hard reg 1 is preferable by r230 with profit 1000
   Insn 108: point = 125, n_alt = 0
   Insn 206: point = 126, n_alt = -2
	Hard reg 1 is preferable by r230 with profit 1000
	Hard reg 0 is preferable by r230 with profit 1000
   Insn 105: point = 127, n_alt = 0
   Insn 104: point = 128, n_alt = 1
   Insn 103: point = 129, n_alt = 0
   Insn 102: point = 131, n_alt = 0
   Insn 101: point = 133, n_alt = 0
   Insn 100: point = 135, n_alt = 0
   Insn 99: point = 137, n_alt = -2
   Insn 98: point = 139, n_alt = 0
   Insn 97: point = 141, n_alt = 0
   Insn 205: point = 143, n_alt = -2
	Hard reg 2 is preferable by r229 with profit 1000
   Insn 96: point = 145, n_alt = 0
   Insn 204: point = 146, n_alt = -2
	Hard reg 2 is preferable by r229 with profit 1000
	Hard reg 0 is preferable by r229 with profit 1000
   Insn 93: point = 147, n_alt = 0
   Insn 92: point = 148, n_alt = 3
   Insn 91: point = 150, n_alt = 0
   Insn 90: point = 152, n_alt = 3
   Insn 89: point = 153, n_alt = 1
   Insn 88: point = 155, n_alt = 0
   Insn 87: point = 157, n_alt = 0
   Insn 86: point = 159, n_alt = -2
   Insn 85: point = 161, n_alt = 0
   Insn 84: point = 163, n_alt = 0
   Insn 203: point = 165, n_alt = -2
	Hard reg 1 is preferable by r228 with profit 1000
   Insn 83: point = 167, n_alt = 0
   Insn 202: point = 168, n_alt = -2
	Hard reg 1 is preferable by r228 with profit 1000
	Hard reg 0 is preferable by r228 with profit 1000
   Insn 80: point = 169, n_alt = 0
   Insn 79: point = 170, n_alt = 1
   Insn 78: point = 171, n_alt = 0
   Insn 77: point = 173, n_alt = 0
   Insn 76: point = 175, n_alt = 0
   Insn 75: point = 177, n_alt = 0
   Insn 74: point = 179, n_alt = -2
   Insn 73: point = 181, n_alt = 0
   Insn 72: point = 183, n_alt = 0
   Insn 201: point = 185, n_alt = -2
	Hard reg 2 is preferable by r227 with profit 1000
   Insn 71: point = 187, n_alt = 0
   Insn 200: point = 188, n_alt = -2
	Hard reg 2 is preferable by r227 with profit 1000
	Hard reg 0 is preferable by r227 with profit 1000
   Insn 68: point = 189, n_alt = 0
   Insn 67: point = 190, n_alt = 3
   Insn 66: point = 192, n_alt = 0
   Insn 65: point = 194, n_alt = 3
   Insn 64: point = 195, n_alt = 1
   Insn 63: point = 197, n_alt = 0
   Insn 62: point = 199, n_alt = -2
   Insn 61: point = 201, n_alt = 0
   Insn 60: point = 203, n_alt = 0
   Insn 199: point = 205, n_alt = -2
	Hard reg 1 is preferable by r226 with profit 1000
   Insn 59: point = 207, n_alt = 0
   Insn 198: point = 208, n_alt = -2
	Hard reg 1 is preferable by r226 with profit 1000
	Hard reg 0 is preferable by r226 with profit 1000
   Insn 56: point = 209, n_alt = 0
   Insn 55: point = 210, n_alt = 1
   Insn 54: point = 211, n_alt = 0
   Insn 53: point = 213, n_alt = 0
   Insn 52: point = 215, n_alt = 0
   Insn 51: point = 217, n_alt = -2
   Insn 50: point = 219, n_alt = 0
   Insn 49: point = 221, n_alt = 0
   Insn 197: point = 223, n_alt = -2
	Hard reg 2 is preferable by r225 with profit 1000
   Insn 48: point = 225, n_alt = 0
   Insn 196: point = 226, n_alt = -2
	Hard reg 2 is preferable by r225 with profit 1000
	Hard reg 0 is preferable by r225 with profit 1000
   Insn 45: point = 227, n_alt = 0
   Insn 44: point = 228, n_alt = 3
   Insn 43: point = 230, n_alt = 0
   Insn 42: point = 232, n_alt = 3
   Insn 41: point = 233, n_alt = 1
   Insn 40: point = 235, n_alt = 0
   Insn 39: point = 237, n_alt = -2
   Insn 38: point = 239, n_alt = 0
   Insn 37: point = 241, n_alt = 0
   Insn 195: point = 243, n_alt = -2
	Hard reg 1 is preferable by r224 with profit 1000
   Insn 36: point = 245, n_alt = 0
   Insn 194: point = 246, n_alt = -2
	Hard reg 1 is preferable by r224 with profit 1000
	Hard reg 0 is preferable by r224 with profit 1000
   Insn 33: point = 247, n_alt = 0
   Insn 32: point = 248, n_alt = 1
   Insn 31: point = 249, n_alt = 0
   Insn 30: point = 251, n_alt = 0
   Insn 29: point = 253, n_alt = 0
   Insn 28: point = 255, n_alt = 0
   Insn 27: point = 257, n_alt = -2
   Insn 26: point = 259, n_alt = 0
   Insn 25: point = 261, n_alt = 0
   Insn 193: point = 263, n_alt = -2
	Hard reg 2 is preferable by r223 with profit 1000
   Insn 24: point = 265, n_alt = 0
   Insn 192: point = 266, n_alt = -2
	Hard reg 2 is preferable by r223 with profit 1000
	Hard reg 0 is preferable by r223 with profit 1000
   Insn 21: point = 267, n_alt = 0
   Insn 20: point = 268, n_alt = 3
   Insn 19: point = 270, n_alt = 0
   Insn 18: point = 272, n_alt = 3
   Insn 17: point = 273, n_alt = 1
   Insn 16: point = 275, n_alt = 0
   Insn 15: point = 277, n_alt = 0
   Insn 14: point = 279, n_alt = -2
   Insn 13: point = 281, n_alt = 0
   Insn 12: point = 283, n_alt = 0
   Insn 191: point = 285, n_alt = -2
	Hard reg 1 is preferable by r222 with profit 1000
   Insn 11: point = 287, n_alt = 0
   Insn 190: point = 288, n_alt = -2
	Hard reg 1 is preferable by r222 with profit 1000
	Hard reg 0 is preferable by r222 with profit 1000
   Insn 8: point = 289, n_alt = 0
   Insn 4: point = 290, n_alt = 1
   Insn 3: point = 290, n_alt = 1
   Insn 2: point = 290, n_alt = 5
 r82: [278..279]
 r83: [276..277]
 r84: [274..275]
 r85: [271..273]
 r86: [269..270]
 r87: [250..268]
 r88: [256..257]
 r89: [254..255]
 r90: [252..253]
 r91: [250..251]
 r92: [248..249]
 r93: [236..237]
 r94: [234..235]
 r95: [231..233]
 r96: [229..230]
 r97: [212..228]
 r98: [216..217]
 r99: [214..215]
 r100: [212..213]
 r101: [210..211]
 r102: [198..199]
 r103: [196..197]
 r104: [193..195]
 r105: [191..192]
 r106: [172..190]
 r107: [178..179]
 r108: [176..177]
 r109: [174..175]
 r110: [172..173]
 r111: [170..171]
 r112: [158..159]
 r113: [156..157]
 r114: [154..155]
 r115: [151..153]
 r116: [149..150]
 r117: [130..148]
 r118: [136..137]
 r119: [134..135]
 r120: [132..133]
 r121: [130..131]
 r122: [128..129]
 r123: [116..117]
 r124: [114..115]
 r125: [112..113]
 r126: [109..111]
 r127: [107..108]
 r128: [88..106]
 r129: [94..95]
 r130: [92..93]
 r131: [90..91]
 r132: [88..89]
 r133: [86..87]
 r134: [74..75]
 r135: [72..73]
 r136: [70..71]
 r137: [67..69]
 r138: [65..66]
 r139: [48..64]
 r140: [52..53]
 r141: [50..51]
 r142: [48..49]
 r143: [46..47]
 r144: [34..35]
 r145: [32..33]
 r146: [30..31]
 r147: [27..29]
 r148: [25..26]
 r149: [6..24]
 r150: [12..13]
 r151: [10..11]
 r152: [8..9]
 r153: [6..7]
 r154: [4..5]
 r155: [2..3]
 r156: [0..1]
 r157: [284..289]
 r158: [284..285]
 r159: [282..283]
 r160: [280..281]
 r161: [271..272]
 r162: [262..267]
 r163: [262..263]
 r164: [260..261]
 r165: [258..259]
 r166: [242..247]
 r167: [242..243]
 r168: [240..241]
 r169: [238..239]
 r170: [231..232]
 r171: [222..227]
 r172: [222..223]
 r173: [220..221]
 r174: [218..219]
 r175: [204..209]
 r176: [204..205]
 r177: [202..203]
 r178: [200..201]
 r179: [193..194]
 r180: [184..189]
 r181: [184..185]
 r182: [182..183]
 r183: [180..181]
 r184: [164..169]
 r185: [164..165]
 r186: [162..163]
 r187: [160..161]
 r188: [151..152]
 r189: [142..147]
 r190: [142..143]
 r191: [140..141]
 r192: [138..139]
 r193: [122..127]
 r194: [122..123]
 r195: [120..121]
 r196: [118..119]
 r197: [109..110]
 r198: [100..105]
 r199: [100..101]
 r200: [98..99]
 r201: [96..97]
 r202: [80..85]
 r203: [80..81]
 r204: [78..79]
 r205: [76..77]
 r206: [67..68]
 r207: [58..63]
 r208: [58..59]
 r209: [56..57]
 r210: [54..55]
 r211: [40..45]
 r212: [40..41]
 r213: [38..39]
 r214: [36..37]
 r215: [27..28]
 r216: [18..23]
 r217: [18..19]
 r218: [16..17]
 r219: [14..15]
 r222: [286..288]
 r223: [264..266]
 r224: [244..246]
 r225: [224..226]
 r226: [206..208]
 r227: [186..188]
 r228: [166..168]
 r229: [144..146]
 r230: [124..126]
 r231: [102..104]
 r232: [82..84]
 r233: [60..62]
 r234: [42..44]
 r235: [20..22]
Compressing live ranges: from 290 to 248 - 85%
Ranges after the compression:
 r82: [238..239]
 r83: [236..237]
 r84: [234..235]
 r85: [232..233]
 r86: [230..231]
 r87: [214..229]
 r88: [220..221]
 r89: [218..219]
 r90: [216..217]
 r91: [214..215]
 r92: [212..213]
 r93: [202..203]
 r94: [200..201]
 r95: [198..199]
 r96: [196..197]
 r97: [182..195]
 r98: [186..187]
 r99: [184..185]
 r100: [182..183]
 r101: [180..181]
 r102: [170..171]
 r103: [168..169]
 r104: [166..167]
 r105: [164..165]
 r106: [148..163]
 r107: [154..155]
 r108: [152..153]
 r109: [150..151]
 r110: [148..149]
 r111: [146..147]
 r112: [136..137]
 r113: [134..135]
 r114: [132..133]
 r115: [130..131]
 r116: [128..129]
 r117: [112..127]
 r118: [118..119]
 r119: [116..117]
 r120: [114..115]
 r121: [112..113]
 r122: [110..111]
 r123: [100..101]
 r124: [98..99]
 r125: [96..97]
 r126: [94..95]
 r127: [92..93]
 r128: [76..91]
 r129: [82..83]
 r130: [80..81]
 r131: [78..79]
 r132: [76..77]
 r133: [74..75]
 r134: [64..65]
 r135: [62..63]
 r136: [60..61]
 r137: [58..59]
 r138: [56..57]
 r139: [42..55]
 r140: [46..47]
 r141: [44..45]
 r142: [42..43]
 r143: [40..41]
 r144: [30..31]
 r145: [28..29]
 r146: [26..27]
 r147: [24..25]
 r148: [22..23]
 r149: [6..21]
 r150: [12..13]
 r151: [10..11]
 r152: [8..9]
 r153: [6..7]
 r154: [4..5]
 r155: [2..3]
 r156: [0..1]
 r157: [244..247]
 r158: [244..245]
 r159: [242..243]
 r160: [240..241]
 r161: [232..233]
 r162: [226..229]
 r163: [226..227]
 r164: [224..225]
 r165: [222..223]
 r166: [208..211]
 r167: [208..209]
 r168: [206..207]
 r169: [204..205]
 r170: [198..199]
 r171: [192..195]
 r172: [192..193]
 r173: [190..191]
 r174: [188..189]
 r175: [176..179]
 r176: [176..177]
 r177: [174..175]
 r178: [172..173]
 r179: [166..167]
 r180: [160..163]
 r181: [160..161]
 r182: [158..159]
 r183: [156..157]
 r184: [142..145]
 r185: [142..143]
 r186: [140..141]
 r187: [138..139]
 r188: [130..131]
 r189: [124..127]
 r190: [124..125]
 r191: [122..123]
 r192: [120..121]
 r193: [106..109]
 r194: [106..107]
 r195: [104..105]
 r196: [102..103]
 r197: [94..95]
 r198: [88..91]
 r199: [88..89]
 r200: [86..87]
 r201: [84..85]
 r202: [70..73]
 r203: [70..71]
 r204: [68..69]
 r205: [66..67]
 r206: [58..59]
 r207: [52..55]
 r208: [52..53]
 r209: [50..51]
 r210: [48..49]
 r211: [36..39]
 r212: [36..37]
 r213: [34..35]
 r214: [32..33]
 r215: [24..25]
 r216: [18..21]
 r217: [18..19]
 r218: [16..17]
 r219: [14..15]
 r222: [246..247]
 r223: [228..229]
 r224: [210..211]
 r225: [194..195]
 r226: [178..179]
 r227: [162..163]
 r228: [144..145]
 r229: [126..127]
 r230: [108..109]
 r231: [90..91]
 r232: [72..73]
 r233: [54..55]
 r234: [38..39]
 r235: [20..21]

********** Assignment #1: **********

	 Assigning to 222 (cl=GENERAL_REGS, orig=158, freq=3000, tfirst=222, tfreq=3000)...
	   Assign 1 to reload r222 (freq=3000)
	 Assigning to 223 (cl=GENERAL_REGS, orig=163, freq=3000, tfirst=223, tfreq=3000)...
	   Assign 2 to reload r223 (freq=3000)
	 Assigning to 224 (cl=GENERAL_REGS, orig=167, freq=3000, tfirst=224, tfreq=3000)...
	   Assign 1 to reload r224 (freq=3000)
	 Assigning to 225 (cl=GENERAL_REGS, orig=172, freq=3000, tfirst=225, tfreq=3000)...
	   Assign 2 to reload r225 (freq=3000)
	 Assigning to 226 (cl=GENERAL_REGS, orig=176, freq=3000, tfirst=226, tfreq=3000)...
	   Assign 1 to reload r226 (freq=3000)
	 Assigning to 227 (cl=GENERAL_REGS, orig=181, freq=3000, tfirst=227, tfreq=3000)...
	   Assign 2 to reload r227 (freq=3000)
	 Assigning to 228 (cl=GENERAL_REGS, orig=185, freq=3000, tfirst=228, tfreq=3000)...
	   Assign 1 to reload r228 (freq=3000)
	 Assigning to 229 (cl=GENERAL_REGS, orig=190, freq=3000, tfirst=229, tfreq=3000)...
	   Assign 2 to reload r229 (freq=3000)
	 Assigning to 230 (cl=GENERAL_REGS, orig=194, freq=3000, tfirst=230, tfreq=3000)...
	   Assign 1 to reload r230 (freq=3000)
	 Assigning to 231 (cl=GENERAL_REGS, orig=199, freq=3000, tfirst=231, tfreq=3000)...
	   Assign 2 to reload r231 (freq=3000)
	 Assigning to 232 (cl=GENERAL_REGS, orig=203, freq=3000, tfirst=232, tfreq=3000)...
	   Assign 1 to reload r232 (freq=3000)
	 Assigning to 233 (cl=GENERAL_REGS, orig=208, freq=3000, tfirst=233, tfreq=3000)...
	   Assign 2 to reload r233 (freq=3000)
	 Assigning to 234 (cl=GENERAL_REGS, orig=212, freq=3000, tfirst=234, tfreq=3000)...
	   Assign 1 to reload r234 (freq=3000)
	 Assigning to 235 (cl=GENERAL_REGS, orig=217, freq=3000, tfirst=235, tfreq=3000)...
	   Assign 2 to reload r235 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 14
changing reg in insn 15
changing reg in insn 15
changing reg in insn 16
changing reg in insn 16
changing reg in insn 17
changing reg in insn 17
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 29
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 39
changing reg in insn 40
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 43
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 51
changing reg in insn 52
changing reg in insn 52
changing reg in insn 53
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 62
changing reg in insn 63
changing reg in insn 63
changing reg in insn 64
changing reg in insn 64
changing reg in insn 66
changing reg in insn 66
changing reg in insn 67
changing reg in insn 67
changing reg in insn 74
changing reg in insn 75
changing reg in insn 75
changing reg in insn 76
changing reg in insn 76
changing reg in insn 77
changing reg in insn 77
changing reg in insn 78
changing reg in insn 79
changing reg in insn 86
changing reg in insn 87
changing reg in insn 87
changing reg in insn 88
changing reg in insn 88
changing reg in insn 89
changing reg in insn 89
changing reg in insn 91
changing reg in insn 91
changing reg in insn 92
changing reg in insn 92
changing reg in insn 99
changing reg in insn 100
changing reg in insn 100
changing reg in insn 101
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 103
changing reg in insn 104
changing reg in insn 111
changing reg in insn 112
changing reg in insn 112
changing reg in insn 113
changing reg in insn 113
changing reg in insn 114
changing reg in insn 114
changing reg in insn 116
changing reg in insn 116
changing reg in insn 117
changing reg in insn 117
changing reg in insn 124
changing reg in insn 125
changing reg in insn 125
changing reg in insn 126
changing reg in insn 126
changing reg in insn 127
changing reg in insn 127
changing reg in insn 128
changing reg in insn 129
changing reg in insn 136
changing reg in insn 137
changing reg in insn 137
changing reg in insn 138
changing reg in insn 138
changing reg in insn 139
changing reg in insn 139
changing reg in insn 141
changing reg in insn 141
changing reg in insn 142
changing reg in insn 142
changing reg in insn 149
changing reg in insn 150
changing reg in insn 150
changing reg in insn 151
changing reg in insn 151
changing reg in insn 152
changing reg in insn 153
changing reg in insn 160
changing reg in insn 161
changing reg in insn 161
changing reg in insn 162
changing reg in insn 162
changing reg in insn 163
changing reg in insn 163
changing reg in insn 165
changing reg in insn 165
changing reg in insn 166
changing reg in insn 166
changing reg in insn 173
changing reg in insn 174
changing reg in insn 174
changing reg in insn 175
changing reg in insn 175
changing reg in insn 176
changing reg in insn 176
changing reg in insn 177
changing reg in insn 178
changing reg in insn 179
changing reg in insn 182
changing reg in insn 182
changing reg in insn 186
changing reg in insn 8
changing reg in insn 12
changing reg in insn 13
changing reg in insn 13
changing reg in insn 14
changing reg in insn 18
changing reg in insn 21
changing reg in insn 25
changing reg in insn 26
changing reg in insn 26
changing reg in insn 27
changing reg in insn 33
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 39
changing reg in insn 42
changing reg in insn 45
changing reg in insn 49
changing reg in insn 50
changing reg in insn 50
changing reg in insn 51
changing reg in insn 56
changing reg in insn 60
changing reg in insn 61
changing reg in insn 61
changing reg in insn 62
changing reg in insn 65
changing reg in insn 68
changing reg in insn 72
changing reg in insn 73
changing reg in insn 73
changing reg in insn 74
changing reg in insn 80
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 86
changing reg in insn 90
changing reg in insn 93
changing reg in insn 97
changing reg in insn 98
changing reg in insn 98
changing reg in insn 99
changing reg in insn 105
changing reg in insn 109
changing reg in insn 110
changing reg in insn 110
changing reg in insn 111
changing reg in insn 115
changing reg in insn 118
changing reg in insn 122
changing reg in insn 123
changing reg in insn 123
changing reg in insn 124
changing reg in insn 130
changing reg in insn 134
changing reg in insn 135
changing reg in insn 135
changing reg in insn 136
changing reg in insn 140
changing reg in insn 143
changing reg in insn 147
changing reg in insn 148
changing reg in insn 148
changing reg in insn 149
changing reg in insn 154
changing reg in insn 158
changing reg in insn 159
changing reg in insn 159
changing reg in insn 160
changing reg in insn 164
changing reg in insn 167
changing reg in insn 171
changing reg in insn 172
changing reg in insn 172
changing reg in insn 173
deleting insn with uid = 191.
deleting insn with uid = 14.
deleting insn with uid = 193.
deleting insn with uid = 27.
deleting insn with uid = 195.
deleting insn with uid = 39.
deleting insn with uid = 197.
deleting insn with uid = 51.
deleting insn with uid = 199.
deleting insn with uid = 62.
deleting insn with uid = 201.
deleting insn with uid = 74.
deleting insn with uid = 203.
deleting insn with uid = 86.
deleting insn with uid = 205.
deleting insn with uid = 99.
deleting insn with uid = 207.
deleting insn with uid = 111.
deleting insn with uid = 209.
deleting insn with uid = 124.
deleting insn with uid = 211.
deleting insn with uid = 136.
deleting insn with uid = 213.
deleting insn with uid = 149.
deleting insn with uid = 215.
deleting insn with uid = 160.
deleting insn with uid = 217.
deleting insn with uid = 173.
deleting insn with uid = 182.
deleting insn with uid = 186.
starting the processing of deferred insns
ending the processing of deferred insns


dynamic_array_init_life2

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={96d,110u} r1={29d,29u,7e} r2={15d,14u} r4={1d,1u} r5={1d,1u} r6={1d,27u} r7={1d,2u} r17={80d} r19={1d,1u,7e} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r36={1d} r37={1d} 
;;    total ref usage 434{235d,185u,14e} in 148{148 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 17 [flags] 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
        (reg:DI 5 di [ A ])) "game_of_life.c":117:55 74 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 N+0 S4 A32])
        (reg:SI 4 si [ N ])) "game_of_life.c":117:55 75 {*movsi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 M+0 S4 A32])
        (reg:SI 1 dx [ M ])) "game_of_life.c":117:55 75 {*movsi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 190 2 (set (reg:SI 0 ax [157])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 N+0 S4 A32])) "game_of_life.c":119:10 75 {*movsi_internal}
     (nil))
(insn 190 8 11 2 (set (reg:SI 1 dx [158])
        (reg:SI 0 ax [157])) "game_of_life.c":119:10 75 {*movsi_internal}
     (nil))
(insn 11 190 12 2 (parallel [
            (set (reg:SI 1 dx [158])
                (lshiftrt:SI (reg:SI 1 dx [158])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":119:10 701 {*lshrsi3_1}
     (nil))
(insn 12 11 13 2 (parallel [
            (set (reg:SI 0 ax [159])
                (plus:SI (reg:SI 0 ax [157])
                    (reg:SI 1 dx [158])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":119:10 209 {*addsi_1}
     (nil))
(insn 13 12 15 2 (parallel [
            (set (reg:SI 0 ax [160])
                (ashiftrt:SI (reg:SI 0 ax [159])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":119:10 702 {*ashrsi3_1}
     (nil))
(insn 15 13 16 2 (set (reg:DI 0 ax [orig:83 _2 ] [83])
        (sign_extend:DI (reg:SI 0 ax [orig:82 _1 ] [82]))) "game_of_life.c":119:6 147 {*extendsidi2_rex64}
     (nil))
(insn 16 15 17 2 (parallel [
            (set (reg:DI 0 ax [orig:84 _3 ] [84])
                (plus:DI (reg:DI 0 ax [orig:83 _2 ] [83])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":119:6 210 {*adddi_1}
     (nil))
(insn 17 16 18 2 (parallel [
            (set (reg:DI 1 dx [orig:85 _4 ] [85])
                (ashift:DI (reg:DI 0 ax [orig:84 _3 ] [84])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":119:6 656 {*ashldi3_1}
     (nil))
(insn 18 17 19 2 (set (reg/f:DI 0 ax [161])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":119:6 74 {*movdi_internal}
     (nil))
(insn 19 18 20 2 (parallel [
            (set (reg/f:DI 0 ax [orig:86 _5 ] [86])
                (plus:DI (reg/f:DI 0 ax [161])
                    (reg:DI 1 dx [orig:85 _4 ] [85])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":119:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (reg:DI 1 dx [orig:85 _4 ] [85]))
        (nil)))
(insn 20 19 21 2 (set (reg/f:DI 1 dx [orig:87 _6 ] [87])
        (mem/f:DI (reg/f:DI 0 ax [orig:86 _5 ] [86]) [4 *_5+0 S8 A64])) "game_of_life.c":119:6 74 {*movdi_internal}
     (nil))
(insn 21 20 192 2 (set (reg:SI 0 ax [162])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 M+0 S4 A32])) "game_of_life.c":119:23 75 {*movsi_internal}
     (nil))
(insn 192 21 24 2 (set (reg:SI 2 cx [163])
        (reg:SI 0 ax [162])) "game_of_life.c":119:23 75 {*movsi_internal}
     (nil))
(insn 24 192 25 2 (parallel [
            (set (reg:SI 2 cx [163])
                (lshiftrt:SI (reg:SI 2 cx [163])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":119:23 701 {*lshrsi3_1}
     (nil))
(insn 25 24 26 2 (parallel [
            (set (reg:SI 0 ax [164])
                (plus:SI (reg:SI 0 ax [162])
                    (reg:SI 2 cx [163])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":119:23 209 {*addsi_1}
     (nil))
(insn 26 25 28 2 (parallel [
            (set (reg:SI 0 ax [165])
                (ashiftrt:SI (reg:SI 0 ax [164])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":119:23 702 {*ashrsi3_1}
     (nil))
(insn 28 26 29 2 (set (reg:DI 0 ax [orig:89 _8 ] [89])
        (sign_extend:DI (reg:SI 0 ax [orig:88 _7 ] [88]))) "game_of_life.c":119:23 147 {*extendsidi2_rex64}
     (nil))
(insn 29 28 30 2 (parallel [
            (set (reg:DI 0 ax [orig:90 _9 ] [90])
                (ashift:DI (reg:DI 0 ax [orig:89 _8 ] [89])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":119:19 656 {*ashldi3_1}
     (nil))
(insn 30 29 31 2 (parallel [
            (set (reg:DI 0 ax [orig:91 _10 ] [91])
                (plus:DI (reg:DI 0 ax [orig:90 _9 ] [90])
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":119:19 210 {*adddi_1}
     (nil))
(insn 31 30 32 2 (parallel [
            (set (reg/f:DI 0 ax [orig:92 _11 ] [92])
                (plus:DI (reg:DI 0 ax [orig:91 _10 ] [91])
                    (reg/f:DI 1 dx [orig:87 _6 ] [87])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":119:19 210 {*adddi_1}
     (nil))
(insn 32 31 33 2 (set (mem:SI (reg/f:DI 0 ax [orig:92 _11 ] [92]) [2 *_11+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":119:33 75 {*movsi_internal}
     (nil))
(insn 33 32 194 2 (set (reg:SI 0 ax [166])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 N+0 S4 A32])) "game_of_life.c":120:9 75 {*movsi_internal}
     (nil))
(insn 194 33 36 2 (set (reg:SI 1 dx [167])
        (reg:SI 0 ax [166])) "game_of_life.c":120:9 75 {*movsi_internal}
     (nil))
(insn 36 194 37 2 (parallel [
            (set (reg:SI 1 dx [167])
                (lshiftrt:SI (reg:SI 1 dx [167])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":120:9 701 {*lshrsi3_1}
     (nil))
(insn 37 36 38 2 (parallel [
            (set (reg:SI 0 ax [168])
                (plus:SI (reg:SI 0 ax [166])
                    (reg:SI 1 dx [167])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":120:9 209 {*addsi_1}
     (nil))
(insn 38 37 40 2 (parallel [
            (set (reg:SI 0 ax [169])
                (ashiftrt:SI (reg:SI 0 ax [168])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":120:9 702 {*ashrsi3_1}
     (nil))
(insn 40 38 41 2 (set (reg:DI 0 ax [orig:94 _13 ] [94])
        (sign_extend:DI (reg:SI 0 ax [orig:93 _12 ] [93]))) "game_of_life.c":120:9 147 {*extendsidi2_rex64}
     (nil))
(insn 41 40 42 2 (parallel [
            (set (reg:DI 1 dx [orig:95 _14 ] [95])
                (ashift:DI (reg:DI 0 ax [orig:94 _13 ] [94])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":120:6 656 {*ashldi3_1}
     (nil))
(insn 42 41 43 2 (set (reg/f:DI 0 ax [170])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":120:6 74 {*movdi_internal}
     (nil))
(insn 43 42 44 2 (parallel [
            (set (reg/f:DI 0 ax [orig:96 _15 ] [96])
                (plus:DI (reg/f:DI 0 ax [170])
                    (reg:DI 1 dx [orig:95 _14 ] [95])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":120:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (reg:DI 1 dx [orig:95 _14 ] [95]))
        (nil)))
(insn 44 43 45 2 (set (reg/f:DI 1 dx [orig:97 _16 ] [97])
        (mem/f:DI (reg/f:DI 0 ax [orig:96 _15 ] [96]) [4 *_15+0 S8 A64])) "game_of_life.c":120:6 74 {*movdi_internal}
     (nil))
(insn 45 44 196 2 (set (reg:SI 0 ax [171])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 M+0 S4 A32])) "game_of_life.c":120:16 75 {*movsi_internal}
     (nil))
(insn 196 45 48 2 (set (reg:SI 2 cx [172])
        (reg:SI 0 ax [171])) "game_of_life.c":120:16 75 {*movsi_internal}
     (nil))
(insn 48 196 49 2 (parallel [
            (set (reg:SI 2 cx [172])
                (lshiftrt:SI (reg:SI 2 cx [172])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":120:16 701 {*lshrsi3_1}
     (nil))
(insn 49 48 50 2 (parallel [
            (set (reg:SI 0 ax [173])
                (plus:SI (reg:SI 0 ax [171])
                    (reg:SI 2 cx [172])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":120:16 209 {*addsi_1}
     (nil))
(insn 50 49 52 2 (parallel [
            (set (reg:SI 0 ax [174])
                (ashiftrt:SI (reg:SI 0 ax [173])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":120:16 702 {*ashrsi3_1}
     (nil))
(insn 52 50 53 2 (set (reg:DI 0 ax [orig:99 _18 ] [99])
        (sign_extend:DI (reg:SI 0 ax [orig:98 _17 ] [98]))) "game_of_life.c":120:16 147 {*extendsidi2_rex64}
     (nil))
(insn 53 52 54 2 (parallel [
            (set (reg:DI 0 ax [orig:100 _19 ] [100])
                (ashift:DI (reg:DI 0 ax [orig:99 _18 ] [99])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":120:13 656 {*ashldi3_1}
     (nil))
(insn 54 53 55 2 (parallel [
            (set (reg/f:DI 0 ax [orig:101 _20 ] [101])
                (plus:DI (reg:DI 0 ax [orig:100 _19 ] [100])
                    (reg/f:DI 1 dx [orig:97 _16 ] [97])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":120:13 210 {*adddi_1}
     (nil))
(insn 55 54 56 2 (set (mem:SI (reg/f:DI 0 ax [orig:101 _20 ] [101]) [2 *_20+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":120:21 75 {*movsi_internal}
     (nil))
(insn 56 55 198 2 (set (reg:SI 0 ax [175])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 N+0 S4 A32])) "game_of_life.c":121:10 75 {*movsi_internal}
     (nil))
(insn 198 56 59 2 (set (reg:SI 1 dx [176])
        (reg:SI 0 ax [175])) "game_of_life.c":121:10 75 {*movsi_internal}
     (nil))
(insn 59 198 60 2 (parallel [
            (set (reg:SI 1 dx [176])
                (lshiftrt:SI (reg:SI 1 dx [176])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":121:10 701 {*lshrsi3_1}
     (nil))
(insn 60 59 61 2 (parallel [
            (set (reg:SI 0 ax [177])
                (plus:SI (reg:SI 0 ax [175])
                    (reg:SI 1 dx [176])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":121:10 209 {*addsi_1}
     (nil))
(insn 61 60 63 2 (parallel [
            (set (reg:SI 0 ax [178])
                (ashiftrt:SI (reg:SI 0 ax [177])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":121:10 702 {*ashrsi3_1}
     (nil))
(insn 63 61 64 2 (set (reg:DI 0 ax [orig:103 _22 ] [103])
        (sign_extend:DI (reg:SI 0 ax [orig:102 _21 ] [102]))) "game_of_life.c":121:10 147 {*extendsidi2_rex64}
     (nil))
(insn 64 63 65 2 (parallel [
            (set (reg:DI 1 dx [orig:104 _23 ] [104])
                (ashift:DI (reg:DI 0 ax [orig:103 _22 ] [103])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":121:6 656 {*ashldi3_1}
     (nil))
(insn 65 64 66 2 (set (reg/f:DI 0 ax [179])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":121:6 74 {*movdi_internal}
     (nil))
(insn 66 65 67 2 (parallel [
            (set (reg/f:DI 0 ax [orig:105 _24 ] [105])
                (plus:DI (reg/f:DI 0 ax [179])
                    (reg:DI 1 dx [orig:104 _23 ] [104])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":121:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (reg:DI 1 dx [orig:104 _23 ] [104]))
        (nil)))
(insn 67 66 68 2 (set (reg/f:DI 1 dx [orig:106 _25 ] [106])
        (mem/f:DI (reg/f:DI 0 ax [orig:105 _24 ] [105]) [4 *_24+0 S8 A64])) "game_of_life.c":121:6 74 {*movdi_internal}
     (nil))
(insn 68 67 200 2 (set (reg:SI 0 ax [180])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 M+0 S4 A32])) "game_of_life.c":121:19 75 {*movsi_internal}
     (nil))
(insn 200 68 71 2 (set (reg:SI 2 cx [181])
        (reg:SI 0 ax [180])) "game_of_life.c":121:19 75 {*movsi_internal}
     (nil))
(insn 71 200 72 2 (parallel [
            (set (reg:SI 2 cx [181])
                (lshiftrt:SI (reg:SI 2 cx [181])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":121:19 701 {*lshrsi3_1}
     (nil))
(insn 72 71 73 2 (parallel [
            (set (reg:SI 0 ax [182])
                (plus:SI (reg:SI 0 ax [180])
                    (reg:SI 2 cx [181])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":121:19 209 {*addsi_1}
     (nil))
(insn 73 72 75 2 (parallel [
            (set (reg:SI 0 ax [183])
                (ashiftrt:SI (reg:SI 0 ax [182])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":121:19 702 {*ashrsi3_1}
     (nil))
(insn 75 73 76 2 (set (reg:DI 0 ax [orig:108 _27 ] [108])
        (sign_extend:DI (reg:SI 0 ax [orig:107 _26 ] [107]))) "game_of_life.c":121:15 147 {*extendsidi2_rex64}
     (nil))
(insn 76 75 77 2 (parallel [
            (set (reg:DI 0 ax [orig:109 _28 ] [109])
                (plus:DI (reg:DI 0 ax [orig:108 _27 ] [108])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":121:15 210 {*adddi_1}
     (nil))
(insn 77 76 78 2 (parallel [
            (set (reg:DI 0 ax [orig:110 _29 ] [110])
                (ashift:DI (reg:DI 0 ax [orig:109 _28 ] [109])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":121:15 656 {*ashldi3_1}
     (nil))
(insn 78 77 79 2 (parallel [
            (set (reg/f:DI 0 ax [orig:111 _30 ] [111])
                (plus:DI (reg:DI 0 ax [orig:110 _29 ] [110])
                    (reg/f:DI 1 dx [orig:106 _25 ] [106])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":121:15 210 {*adddi_1}
     (nil))
(insn 79 78 80 2 (set (mem:SI (reg/f:DI 0 ax [orig:111 _30 ] [111]) [2 *_30+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":121:29 75 {*movsi_internal}
     (nil))
(insn 80 79 202 2 (set (reg:SI 0 ax [184])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 N+0 S4 A32])) "game_of_life.c":122:10 75 {*movsi_internal}
     (nil))
(insn 202 80 83 2 (set (reg:SI 1 dx [185])
        (reg:SI 0 ax [184])) "game_of_life.c":122:10 75 {*movsi_internal}
     (nil))
(insn 83 202 84 2 (parallel [
            (set (reg:SI 1 dx [185])
                (lshiftrt:SI (reg:SI 1 dx [185])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":122:10 701 {*lshrsi3_1}
     (nil))
(insn 84 83 85 2 (parallel [
            (set (reg:SI 0 ax [186])
                (plus:SI (reg:SI 0 ax [184])
                    (reg:SI 1 dx [185])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":122:10 209 {*addsi_1}
     (nil))
(insn 85 84 87 2 (parallel [
            (set (reg:SI 0 ax [187])
                (ashiftrt:SI (reg:SI 0 ax [186])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":122:10 702 {*ashrsi3_1}
     (nil))
(insn 87 85 88 2 (set (reg:DI 0 ax [orig:113 _32 ] [113])
        (sign_extend:DI (reg:SI 0 ax [orig:112 _31 ] [112]))) "game_of_life.c":122:6 147 {*extendsidi2_rex64}
     (nil))
(insn 88 87 89 2 (parallel [
            (set (reg:DI 0 ax [orig:114 _33 ] [114])
                (plus:DI (reg:DI 0 ax [orig:113 _32 ] [113])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":122:6 210 {*adddi_1}
     (nil))
(insn 89 88 90 2 (parallel [
            (set (reg:DI 1 dx [orig:115 _34 ] [115])
                (ashift:DI (reg:DI 0 ax [orig:114 _33 ] [114])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":122:6 656 {*ashldi3_1}
     (nil))
(insn 90 89 91 2 (set (reg/f:DI 0 ax [188])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":122:6 74 {*movdi_internal}
     (nil))
(insn 91 90 92 2 (parallel [
            (set (reg/f:DI 0 ax [orig:116 _35 ] [116])
                (plus:DI (reg/f:DI 0 ax [188])
                    (reg:DI 1 dx [orig:115 _34 ] [115])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":122:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (reg:DI 1 dx [orig:115 _34 ] [115]))
        (nil)))
(insn 92 91 93 2 (set (reg/f:DI 1 dx [orig:117 _36 ] [117])
        (mem/f:DI (reg/f:DI 0 ax [orig:116 _35 ] [116]) [4 *_35+0 S8 A64])) "game_of_life.c":122:6 74 {*movdi_internal}
     (nil))
(insn 93 92 204 2 (set (reg:SI 0 ax [189])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 M+0 S4 A32])) "game_of_life.c":122:23 75 {*movsi_internal}
     (nil))
(insn 204 93 96 2 (set (reg:SI 2 cx [190])
        (reg:SI 0 ax [189])) "game_of_life.c":122:23 75 {*movsi_internal}
     (nil))
(insn 96 204 97 2 (parallel [
            (set (reg:SI 2 cx [190])
                (lshiftrt:SI (reg:SI 2 cx [190])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":122:23 701 {*lshrsi3_1}
     (nil))
(insn 97 96 98 2 (parallel [
            (set (reg:SI 0 ax [191])
                (plus:SI (reg:SI 0 ax [189])
                    (reg:SI 2 cx [190])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":122:23 209 {*addsi_1}
     (nil))
(insn 98 97 100 2 (parallel [
            (set (reg:SI 0 ax [192])
                (ashiftrt:SI (reg:SI 0 ax [191])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":122:23 702 {*ashrsi3_1}
     (nil))
(insn 100 98 101 2 (set (reg:DI 0 ax [orig:119 _38 ] [119])
        (sign_extend:DI (reg:SI 0 ax [orig:118 _37 ] [118]))) "game_of_life.c":122:19 147 {*extendsidi2_rex64}
     (nil))
(insn 101 100 102 2 (parallel [
            (set (reg:DI 0 ax [orig:120 _39 ] [120])
                (plus:DI (reg:DI 0 ax [orig:119 _38 ] [119])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":122:19 210 {*adddi_1}
     (nil))
(insn 102 101 103 2 (parallel [
            (set (reg:DI 0 ax [orig:121 _40 ] [121])
                (ashift:DI (reg:DI 0 ax [orig:120 _39 ] [120])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":122:19 656 {*ashldi3_1}
     (nil))
(insn 103 102 104 2 (parallel [
            (set (reg/f:DI 0 ax [orig:122 _41 ] [122])
                (plus:DI (reg:DI 0 ax [orig:121 _40 ] [121])
                    (reg/f:DI 1 dx [orig:117 _36 ] [117])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":122:19 210 {*adddi_1}
     (nil))
(insn 104 103 105 2 (set (mem:SI (reg/f:DI 0 ax [orig:122 _41 ] [122]) [2 *_41+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":122:33 75 {*movsi_internal}
     (nil))
(insn 105 104 206 2 (set (reg:SI 0 ax [193])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 N+0 S4 A32])) "game_of_life.c":123:10 75 {*movsi_internal}
     (nil))
(insn 206 105 108 2 (set (reg:SI 1 dx [194])
        (reg:SI 0 ax [193])) "game_of_life.c":123:10 75 {*movsi_internal}
     (nil))
(insn 108 206 109 2 (parallel [
            (set (reg:SI 1 dx [194])
                (lshiftrt:SI (reg:SI 1 dx [194])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":123:10 701 {*lshrsi3_1}
     (nil))
(insn 109 108 110 2 (parallel [
            (set (reg:SI 0 ax [195])
                (plus:SI (reg:SI 0 ax [193])
                    (reg:SI 1 dx [194])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":123:10 209 {*addsi_1}
     (nil))
(insn 110 109 112 2 (parallel [
            (set (reg:SI 0 ax [196])
                (ashiftrt:SI (reg:SI 0 ax [195])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":123:10 702 {*ashrsi3_1}
     (nil))
(insn 112 110 113 2 (set (reg:DI 0 ax [orig:124 _43 ] [124])
        (sign_extend:DI (reg:SI 0 ax [orig:123 _42 ] [123]))) "game_of_life.c":123:6 147 {*extendsidi2_rex64}
     (nil))
(insn 113 112 114 2 (parallel [
            (set (reg:DI 0 ax [orig:125 _44 ] [125])
                (plus:DI (reg:DI 0 ax [orig:124 _43 ] [124])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":123:6 210 {*adddi_1}
     (nil))
(insn 114 113 115 2 (parallel [
            (set (reg:DI 1 dx [orig:126 _45 ] [126])
                (ashift:DI (reg:DI 0 ax [orig:125 _44 ] [125])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":123:6 656 {*ashldi3_1}
     (nil))
(insn 115 114 116 2 (set (reg/f:DI 0 ax [197])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":123:6 74 {*movdi_internal}
     (nil))
(insn 116 115 117 2 (parallel [
            (set (reg/f:DI 0 ax [orig:127 _46 ] [127])
                (plus:DI (reg/f:DI 0 ax [197])
                    (reg:DI 1 dx [orig:126 _45 ] [126])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":123:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (reg:DI 1 dx [orig:126 _45 ] [126]))
        (nil)))
(insn 117 116 118 2 (set (reg/f:DI 1 dx [orig:128 _47 ] [128])
        (mem/f:DI (reg/f:DI 0 ax [orig:127 _46 ] [127]) [4 *_46+0 S8 A64])) "game_of_life.c":123:6 74 {*movdi_internal}
     (nil))
(insn 118 117 208 2 (set (reg:SI 0 ax [198])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 M+0 S4 A32])) "game_of_life.c":123:23 75 {*movsi_internal}
     (nil))
(insn 208 118 121 2 (set (reg:SI 2 cx [199])
        (reg:SI 0 ax [198])) "game_of_life.c":123:23 75 {*movsi_internal}
     (nil))
(insn 121 208 122 2 (parallel [
            (set (reg:SI 2 cx [199])
                (lshiftrt:SI (reg:SI 2 cx [199])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":123:23 701 {*lshrsi3_1}
     (nil))
(insn 122 121 123 2 (parallel [
            (set (reg:SI 0 ax [200])
                (plus:SI (reg:SI 0 ax [198])
                    (reg:SI 2 cx [199])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":123:23 209 {*addsi_1}
     (nil))
(insn 123 122 125 2 (parallel [
            (set (reg:SI 0 ax [201])
                (ashiftrt:SI (reg:SI 0 ax [200])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":123:23 702 {*ashrsi3_1}
     (nil))
(insn 125 123 126 2 (set (reg:DI 0 ax [orig:130 _49 ] [130])
        (sign_extend:DI (reg:SI 0 ax [orig:129 _48 ] [129]))) "game_of_life.c":123:19 147 {*extendsidi2_rex64}
     (nil))
(insn 126 125 127 2 (parallel [
            (set (reg:DI 0 ax [orig:131 _50 ] [131])
                (plus:DI (reg:DI 0 ax [orig:130 _49 ] [130])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":123:19 210 {*adddi_1}
     (nil))
(insn 127 126 128 2 (parallel [
            (set (reg:DI 0 ax [orig:132 _51 ] [132])
                (ashift:DI (reg:DI 0 ax [orig:131 _50 ] [131])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":123:19 656 {*ashldi3_1}
     (nil))
(insn 128 127 129 2 (parallel [
            (set (reg/f:DI 0 ax [orig:133 _52 ] [133])
                (plus:DI (reg:DI 0 ax [orig:132 _51 ] [132])
                    (reg/f:DI 1 dx [orig:128 _47 ] [128])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":123:19 210 {*adddi_1}
     (nil))
(insn 129 128 130 2 (set (mem:SI (reg/f:DI 0 ax [orig:133 _52 ] [133]) [2 *_52+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":123:33 75 {*movsi_internal}
     (nil))
(insn 130 129 210 2 (set (reg:SI 0 ax [202])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 N+0 S4 A32])) "game_of_life.c":124:10 75 {*movsi_internal}
     (nil))
(insn 210 130 133 2 (set (reg:SI 1 dx [203])
        (reg:SI 0 ax [202])) "game_of_life.c":124:10 75 {*movsi_internal}
     (nil))
(insn 133 210 134 2 (parallel [
            (set (reg:SI 1 dx [203])
                (lshiftrt:SI (reg:SI 1 dx [203])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":124:10 701 {*lshrsi3_1}
     (nil))
(insn 134 133 135 2 (parallel [
            (set (reg:SI 0 ax [204])
                (plus:SI (reg:SI 0 ax [202])
                    (reg:SI 1 dx [203])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":124:10 209 {*addsi_1}
     (nil))
(insn 135 134 137 2 (parallel [
            (set (reg:SI 0 ax [205])
                (ashiftrt:SI (reg:SI 0 ax [204])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":124:10 702 {*ashrsi3_1}
     (nil))
(insn 137 135 138 2 (set (reg:DI 0 ax [orig:135 _54 ] [135])
        (sign_extend:DI (reg:SI 0 ax [orig:134 _53 ] [134]))) "game_of_life.c":124:6 147 {*extendsidi2_rex64}
     (nil))
(insn 138 137 139 2 (parallel [
            (set (reg:DI 0 ax [orig:136 _55 ] [136])
                (plus:DI (reg:DI 0 ax [orig:135 _54 ] [135])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":124:6 210 {*adddi_1}
     (nil))
(insn 139 138 140 2 (parallel [
            (set (reg:DI 1 dx [orig:137 _56 ] [137])
                (ashift:DI (reg:DI 0 ax [orig:136 _55 ] [136])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":124:6 656 {*ashldi3_1}
     (nil))
(insn 140 139 141 2 (set (reg/f:DI 0 ax [206])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":124:6 74 {*movdi_internal}
     (nil))
(insn 141 140 142 2 (parallel [
            (set (reg/f:DI 0 ax [orig:138 _57 ] [138])
                (plus:DI (reg/f:DI 0 ax [206])
                    (reg:DI 1 dx [orig:137 _56 ] [137])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":124:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (reg:DI 1 dx [orig:137 _56 ] [137]))
        (nil)))
(insn 142 141 143 2 (set (reg/f:DI 1 dx [orig:139 _58 ] [139])
        (mem/f:DI (reg/f:DI 0 ax [orig:138 _57 ] [138]) [4 *_57+0 S8 A64])) "game_of_life.c":124:6 74 {*movdi_internal}
     (nil))
(insn 143 142 212 2 (set (reg:SI 0 ax [207])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 M+0 S4 A32])) "game_of_life.c":124:22 75 {*movsi_internal}
     (nil))
(insn 212 143 146 2 (set (reg:SI 2 cx [208])
        (reg:SI 0 ax [207])) "game_of_life.c":124:22 75 {*movsi_internal}
     (nil))
(insn 146 212 147 2 (parallel [
            (set (reg:SI 2 cx [208])
                (lshiftrt:SI (reg:SI 2 cx [208])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":124:22 701 {*lshrsi3_1}
     (nil))
(insn 147 146 148 2 (parallel [
            (set (reg:SI 0 ax [209])
                (plus:SI (reg:SI 0 ax [207])
                    (reg:SI 2 cx [208])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":124:22 209 {*addsi_1}
     (nil))
(insn 148 147 150 2 (parallel [
            (set (reg:SI 0 ax [210])
                (ashiftrt:SI (reg:SI 0 ax [209])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":124:22 702 {*ashrsi3_1}
     (nil))
(insn 150 148 151 2 (set (reg:DI 0 ax [orig:141 _60 ] [141])
        (sign_extend:DI (reg:SI 0 ax [orig:140 _59 ] [140]))) "game_of_life.c":124:22 147 {*extendsidi2_rex64}
     (nil))
(insn 151 150 152 2 (parallel [
            (set (reg:DI 0 ax [orig:142 _61 ] [142])
                (ashift:DI (reg:DI 0 ax [orig:141 _60 ] [141])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":124:19 656 {*ashldi3_1}
     (nil))
(insn 152 151 153 2 (parallel [
            (set (reg/f:DI 0 ax [orig:143 _62 ] [143])
                (plus:DI (reg:DI 0 ax [orig:142 _61 ] [142])
                    (reg/f:DI 1 dx [orig:139 _58 ] [139])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":124:19 210 {*adddi_1}
     (nil))
(insn 153 152 154 2 (set (mem:SI (reg/f:DI 0 ax [orig:143 _62 ] [143]) [2 *_62+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":124:27 75 {*movsi_internal}
     (nil))
(insn 154 153 214 2 (set (reg:SI 0 ax [211])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 N+0 S4 A32])) "game_of_life.c":125:10 75 {*movsi_internal}
     (nil))
(insn 214 154 157 2 (set (reg:SI 1 dx [212])
        (reg:SI 0 ax [211])) "game_of_life.c":125:10 75 {*movsi_internal}
     (nil))
(insn 157 214 158 2 (parallel [
            (set (reg:SI 1 dx [212])
                (lshiftrt:SI (reg:SI 1 dx [212])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":125:10 701 {*lshrsi3_1}
     (nil))
(insn 158 157 159 2 (parallel [
            (set (reg:SI 0 ax [213])
                (plus:SI (reg:SI 0 ax [211])
                    (reg:SI 1 dx [212])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":125:10 209 {*addsi_1}
     (nil))
(insn 159 158 161 2 (parallel [
            (set (reg:SI 0 ax [214])
                (ashiftrt:SI (reg:SI 0 ax [213])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":125:10 702 {*ashrsi3_1}
     (nil))
(insn 161 159 162 2 (set (reg:DI 0 ax [orig:145 _64 ] [145])
        (sign_extend:DI (reg:SI 0 ax [orig:144 _63 ] [144]))) "game_of_life.c":125:6 147 {*extendsidi2_rex64}
     (nil))
(insn 162 161 163 2 (parallel [
            (set (reg:DI 0 ax [orig:146 _65 ] [146])
                (plus:DI (reg:DI 0 ax [orig:145 _64 ] [145])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":125:6 210 {*adddi_1}
     (nil))
(insn 163 162 164 2 (parallel [
            (set (reg:DI 1 dx [orig:147 _66 ] [147])
                (ashift:DI (reg:DI 0 ax [orig:146 _65 ] [146])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":125:6 656 {*ashldi3_1}
     (nil))
(insn 164 163 165 2 (set (reg/f:DI 0 ax [215])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":125:6 74 {*movdi_internal}
     (nil))
(insn 165 164 166 2 (parallel [
            (set (reg/f:DI 0 ax [orig:148 _67 ] [148])
                (plus:DI (reg/f:DI 0 ax [215])
                    (reg:DI 1 dx [orig:147 _66 ] [147])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":125:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (reg:DI 1 dx [orig:147 _66 ] [147]))
        (nil)))
(insn 166 165 167 2 (set (reg/f:DI 1 dx [orig:149 _68 ] [149])
        (mem/f:DI (reg/f:DI 0 ax [orig:148 _67 ] [148]) [4 *_67+0 S8 A64])) "game_of_life.c":125:6 74 {*movdi_internal}
     (nil))
(insn 167 166 216 2 (set (reg:SI 0 ax [216])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 M+0 S4 A32])) "game_of_life.c":125:23 75 {*movsi_internal}
     (nil))
(insn 216 167 170 2 (set (reg:SI 2 cx [217])
        (reg:SI 0 ax [216])) "game_of_life.c":125:23 75 {*movsi_internal}
     (nil))
(insn 170 216 171 2 (parallel [
            (set (reg:SI 2 cx [217])
                (lshiftrt:SI (reg:SI 2 cx [217])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":125:23 701 {*lshrsi3_1}
     (nil))
(insn 171 170 172 2 (parallel [
            (set (reg:SI 0 ax [218])
                (plus:SI (reg:SI 0 ax [216])
                    (reg:SI 2 cx [217])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":125:23 209 {*addsi_1}
     (nil))
(insn 172 171 174 2 (parallel [
            (set (reg:SI 0 ax [219])
                (ashiftrt:SI (reg:SI 0 ax [218])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":125:23 702 {*ashrsi3_1}
     (nil))
(insn 174 172 175 2 (set (reg:DI 0 ax [orig:151 _70 ] [151])
        (sign_extend:DI (reg:SI 0 ax [orig:150 _69 ] [150]))) "game_of_life.c":125:19 147 {*extendsidi2_rex64}
     (nil))
(insn 175 174 176 2 (parallel [
            (set (reg:DI 0 ax [orig:152 _71 ] [152])
                (plus:DI (reg:DI 0 ax [orig:151 _70 ] [151])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":125:19 210 {*adddi_1}
     (nil))
(insn 176 175 177 2 (parallel [
            (set (reg:DI 0 ax [orig:153 _72 ] [153])
                (ashift:DI (reg:DI 0 ax [orig:152 _71 ] [152])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":125:19 656 {*ashldi3_1}
     (nil))
(insn 177 176 178 2 (parallel [
            (set (reg/f:DI 0 ax [orig:154 _73 ] [154])
                (plus:DI (reg:DI 0 ax [orig:153 _72 ] [153])
                    (reg/f:DI 1 dx [orig:149 _68 ] [149])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":125:19 210 {*adddi_1}
     (nil))
(insn 178 177 179 2 (set (mem:SI (reg/f:DI 0 ax [orig:154 _73 ] [154]) [2 *_73+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":125:33 75 {*movsi_internal}
     (nil))
(insn 179 178 187 2 (set (reg/f:DI 0 ax [orig:155 _85 ] [155])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":127:12 74 {*movdi_internal}
     (nil))
(insn 187 179 189 2 (use (reg/i:DI 0 ax)) "game_of_life.c":128:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 189 187 0 NOTE_INSN_DELETED)

;; Function dynamic_array_init_life3 (dynamic_array_init_life3, funcdef_no=13, decl_uid=4950, cgraph_uid=14, symbol_order=13)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 11:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=183 from oldreg=137, assigning class GENERAL_REGS to r183
   11: {r183:SI=r183:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  141: r183:SI=r136:SI
    Inserting insn reload after:
  142: r137:SI=r183:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 12
	 Choosing alt 0 in insn 12:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 18
	 Choosing alt 0 in insn 18:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 23:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=184 from oldreg=142, assigning class GENERAL_REGS to r184
   23: {r184:SI=r184:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  143: r184:SI=r141:SI
    Inserting insn reload after:
  144: r142:SI=r184:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 24
	 Choosing alt 0 in insn 24:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 29
	 Choosing alt 0 in insn 29:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 34:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=185 from oldreg=146, assigning class GENERAL_REGS to r185
   34: {r185:SI=r185:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  145: r185:SI=r145:SI
    Inserting insn reload after:
  146: r146:SI=r185:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 35
	 Choosing alt 0 in insn 35:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 39:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 41:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 42
	 Choosing alt 0 in insn 42:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 47:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=186 from oldreg=151, assigning class GENERAL_REGS to r186
   47: {r186:SI=r186:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  147: r186:SI=r150:SI
    Inserting insn reload after:
  148: r151:SI=r186:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 48
	 Choosing alt 0 in insn 48:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 53:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 54
	 Choosing alt 0 in insn 54:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 59:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=187 from oldreg=155, assigning class GENERAL_REGS to r187
   59: {r187:SI=r187:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  149: r187:SI=r154:SI
    Inserting insn reload after:
  150: r155:SI=r187:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 60
	 Choosing alt 0 in insn 60:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 64:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 65:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 67
	 Choosing alt 0 in insn 67:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 68:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 72:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=188 from oldreg=160, assigning class GENERAL_REGS to r188
   72: {r188:SI=r188:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  151: r188:SI=r159:SI
    Inserting insn reload after:
  152: r160:SI=r188:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 73
	 Choosing alt 0 in insn 73:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 77:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 79
	 Choosing alt 0 in insn 79:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 80:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 84:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=189 from oldreg=164, assigning class GENERAL_REGS to r189
   84: {r189:SI=r189:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  153: r189:SI=r163:SI
    Inserting insn reload after:
  154: r164:SI=r189:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 85
	 Choosing alt 0 in insn 85:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 89:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 90:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 91:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 92
	 Choosing alt 0 in insn 92:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 93:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 97:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=190 from oldreg=169, assigning class GENERAL_REGS to r190
   97: {r190:SI=r190:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  155: r190:SI=r168:SI
    Inserting insn reload after:
  156: r169:SI=r190:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 98
	 Choosing alt 0 in insn 98:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 102:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 104
	 Choosing alt 0 in insn 104:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 105:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 109:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=191 from oldreg=173, assigning class GENERAL_REGS to r191
  109: {r191:SI=r191:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  157: r191:SI=r172:SI
    Inserting insn reload after:
  158: r173:SI=r191:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 110
	 Choosing alt 0 in insn 110:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 114:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 115:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 116:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 117
	 Choosing alt 0 in insn 117:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 118:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 122:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=192 from oldreg=178, assigning class GENERAL_REGS to r192
  122: {r192:SI=r192:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  159: r192:SI=r177:SI
    Inserting insn reload after:
  160: r178:SI=r192:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 123
	 Choosing alt 0 in insn 123:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 128
	 Choosing alt 0 in insn 128:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 129:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 130:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 138: point = 0, n_alt = -1
   Insn 137: point = 0, n_alt = -2
   Insn 133: point = 1, n_alt = -2
   Insn 130: point = 3, n_alt = 3
   Insn 129: point = 4, n_alt = 1
   Insn 128: point = 5, n_alt = 0
   Insn 127: point = 7, n_alt = 0
   Insn 126: point = 9, n_alt = 0
   Insn 125: point = 11, n_alt = -2
   Insn 124: point = 13, n_alt = 0
   Insn 123: point = 15, n_alt = 0
   Insn 160: point = 17, n_alt = -2
	Hard reg 2 is preferable by r192 with profit 1000
   Insn 122: point = 19, n_alt = 0
   Insn 159: point = 20, n_alt = -2
	Hard reg 2 is preferable by r192 with profit 1000
	Hard reg 0 is preferable by r192 with profit 1000
   Insn 119: point = 21, n_alt = 0
   Insn 118: point = 22, n_alt = 3
   Insn 117: point = 24, n_alt = 0
   Insn 116: point = 26, n_alt = 3
   Insn 115: point = 27, n_alt = 1
   Insn 114: point = 29, n_alt = 0
   Insn 113: point = 31, n_alt = 0
   Insn 112: point = 33, n_alt = -2
   Insn 111: point = 35, n_alt = 0
   Insn 110: point = 37, n_alt = 0
   Insn 158: point = 39, n_alt = -2
	Hard reg 1 is preferable by r191 with profit 1000
   Insn 109: point = 41, n_alt = 0
   Insn 157: point = 42, n_alt = -2
	Hard reg 1 is preferable by r191 with profit 1000
	Hard reg 0 is preferable by r191 with profit 1000
   Insn 106: point = 43, n_alt = 0
   Insn 105: point = 44, n_alt = 1
   Insn 104: point = 45, n_alt = 0
   Insn 103: point = 47, n_alt = 0
   Insn 102: point = 49, n_alt = 0
   Insn 101: point = 51, n_alt = 0
   Insn 100: point = 53, n_alt = -2
   Insn 99: point = 55, n_alt = 0
   Insn 98: point = 57, n_alt = 0
   Insn 156: point = 59, n_alt = -2
	Hard reg 2 is preferable by r190 with profit 1000
   Insn 97: point = 61, n_alt = 0
   Insn 155: point = 62, n_alt = -2
	Hard reg 2 is preferable by r190 with profit 1000
	Hard reg 0 is preferable by r190 with profit 1000
   Insn 94: point = 63, n_alt = 0
   Insn 93: point = 64, n_alt = 3
   Insn 92: point = 66, n_alt = 0
   Insn 91: point = 68, n_alt = 3
   Insn 90: point = 69, n_alt = 1
   Insn 89: point = 71, n_alt = 0
   Insn 88: point = 73, n_alt = 0
   Insn 87: point = 75, n_alt = -2
   Insn 86: point = 77, n_alt = 0
   Insn 85: point = 79, n_alt = 0
   Insn 154: point = 81, n_alt = -2
	Hard reg 1 is preferable by r189 with profit 1000
   Insn 84: point = 83, n_alt = 0
   Insn 153: point = 84, n_alt = -2
	Hard reg 1 is preferable by r189 with profit 1000
	Hard reg 0 is preferable by r189 with profit 1000
   Insn 81: point = 85, n_alt = 0
   Insn 80: point = 86, n_alt = 1
   Insn 79: point = 87, n_alt = 0
   Insn 78: point = 89, n_alt = 0
   Insn 77: point = 91, n_alt = 0
   Insn 76: point = 93, n_alt = 0
   Insn 75: point = 95, n_alt = -2
   Insn 74: point = 97, n_alt = 0
   Insn 73: point = 99, n_alt = 0
   Insn 152: point = 101, n_alt = -2
	Hard reg 2 is preferable by r188 with profit 1000
   Insn 72: point = 103, n_alt = 0
   Insn 151: point = 104, n_alt = -2
	Hard reg 2 is preferable by r188 with profit 1000
	Hard reg 0 is preferable by r188 with profit 1000
   Insn 69: point = 105, n_alt = 0
   Insn 68: point = 106, n_alt = 3
   Insn 67: point = 108, n_alt = 0
   Insn 66: point = 110, n_alt = 3
   Insn 65: point = 111, n_alt = 1
   Insn 64: point = 113, n_alt = 0
   Insn 63: point = 115, n_alt = 0
   Insn 62: point = 117, n_alt = -2
   Insn 61: point = 119, n_alt = 0
   Insn 60: point = 121, n_alt = 0
   Insn 150: point = 123, n_alt = -2
	Hard reg 1 is preferable by r187 with profit 1000
   Insn 59: point = 125, n_alt = 0
   Insn 149: point = 126, n_alt = -2
	Hard reg 1 is preferable by r187 with profit 1000
	Hard reg 0 is preferable by r187 with profit 1000
   Insn 56: point = 127, n_alt = 0
   Insn 55: point = 128, n_alt = 1
   Insn 54: point = 129, n_alt = 0
   Insn 53: point = 131, n_alt = 0
   Insn 52: point = 133, n_alt = 0
   Insn 51: point = 135, n_alt = 0
   Insn 50: point = 137, n_alt = -2
   Insn 49: point = 139, n_alt = 0
   Insn 48: point = 141, n_alt = 0
   Insn 148: point = 143, n_alt = -2
	Hard reg 2 is preferable by r186 with profit 1000
   Insn 47: point = 145, n_alt = 0
   Insn 147: point = 146, n_alt = -2
	Hard reg 2 is preferable by r186 with profit 1000
	Hard reg 0 is preferable by r186 with profit 1000
   Insn 44: point = 147, n_alt = 0
   Insn 43: point = 148, n_alt = 3
   Insn 42: point = 150, n_alt = 0
   Insn 41: point = 152, n_alt = 3
   Insn 40: point = 153, n_alt = 1
   Insn 39: point = 155, n_alt = 0
   Insn 38: point = 157, n_alt = 0
   Insn 37: point = 159, n_alt = -2
   Insn 36: point = 161, n_alt = 0
   Insn 35: point = 163, n_alt = 0
   Insn 146: point = 165, n_alt = -2
	Hard reg 1 is preferable by r185 with profit 1000
   Insn 34: point = 167, n_alt = 0
   Insn 145: point = 168, n_alt = -2
	Hard reg 1 is preferable by r185 with profit 1000
	Hard reg 0 is preferable by r185 with profit 1000
   Insn 31: point = 169, n_alt = 0
   Insn 30: point = 170, n_alt = 1
   Insn 29: point = 171, n_alt = 0
   Insn 28: point = 173, n_alt = 0
   Insn 27: point = 175, n_alt = 0
   Insn 26: point = 177, n_alt = -2
   Insn 25: point = 179, n_alt = 0
   Insn 24: point = 181, n_alt = 0
   Insn 144: point = 183, n_alt = -2
	Hard reg 2 is preferable by r184 with profit 1000
   Insn 23: point = 185, n_alt = 0
   Insn 143: point = 186, n_alt = -2
	Hard reg 2 is preferable by r184 with profit 1000
	Hard reg 0 is preferable by r184 with profit 1000
   Insn 20: point = 187, n_alt = 0
   Insn 19: point = 188, n_alt = 3
   Insn 18: point = 190, n_alt = 0
   Insn 17: point = 192, n_alt = 3
   Insn 16: point = 193, n_alt = 1
   Insn 15: point = 195, n_alt = 0
   Insn 14: point = 197, n_alt = -2
   Insn 13: point = 199, n_alt = 0
   Insn 12: point = 201, n_alt = 0
   Insn 142: point = 203, n_alt = -2
	Hard reg 1 is preferable by r183 with profit 1000
   Insn 11: point = 205, n_alt = 0
   Insn 141: point = 206, n_alt = -2
	Hard reg 1 is preferable by r183 with profit 1000
	Hard reg 0 is preferable by r183 with profit 1000
   Insn 8: point = 207, n_alt = 0
   Insn 4: point = 208, n_alt = 1
   Insn 3: point = 208, n_alt = 1
   Insn 2: point = 208, n_alt = 5
 r82: [196..197]
 r83: [194..195]
 r84: [191..193]
 r85: [189..190]
 r86: [172..188]
 r87: [176..177]
 r88: [174..175]
 r89: [172..173]
 r90: [170..171]
 r91: [158..159]
 r92: [156..157]
 r93: [154..155]
 r94: [151..153]
 r95: [149..150]
 r96: [130..148]
 r97: [136..137]
 r98: [134..135]
 r99: [132..133]
 r100: [130..131]
 r101: [128..129]
 r102: [116..117]
 r103: [114..115]
 r104: [112..113]
 r105: [109..111]
 r106: [107..108]
 r107: [88..106]
 r108: [94..95]
 r109: [92..93]
 r110: [90..91]
 r111: [88..89]
 r112: [86..87]
 r113: [74..75]
 r114: [72..73]
 r115: [70..71]
 r116: [67..69]
 r117: [65..66]
 r118: [46..64]
 r119: [52..53]
 r120: [50..51]
 r121: [48..49]
 r122: [46..47]
 r123: [44..45]
 r124: [32..33]
 r125: [30..31]
 r126: [28..29]
 r127: [25..27]
 r128: [23..24]
 r129: [6..22]
 r130: [10..11]
 r131: [8..9]
 r132: [6..7]
 r133: [4..5]
 r134: [2..3]
 r135: [0..1]
 r136: [202..207]
 r137: [202..203]
 r138: [200..201]
 r139: [198..199]
 r140: [191..192]
 r141: [182..187]
 r142: [182..183]
 r143: [180..181]
 r144: [178..179]
 r145: [164..169]
 r146: [164..165]
 r147: [162..163]
 r148: [160..161]
 r149: [151..152]
 r150: [142..147]
 r151: [142..143]
 r152: [140..141]
 r153: [138..139]
 r154: [122..127]
 r155: [122..123]
 r156: [120..121]
 r157: [118..119]
 r158: [109..110]
 r159: [100..105]
 r160: [100..101]
 r161: [98..99]
 r162: [96..97]
 r163: [80..85]
 r164: [80..81]
 r165: [78..79]
 r166: [76..77]
 r167: [67..68]
 r168: [58..63]
 r169: [58..59]
 r170: [56..57]
 r171: [54..55]
 r172: [38..43]
 r173: [38..39]
 r174: [36..37]
 r175: [34..35]
 r176: [25..26]
 r177: [16..21]
 r178: [16..17]
 r179: [14..15]
 r180: [12..13]
 r183: [204..206]
 r184: [184..186]
 r185: [166..168]
 r186: [144..146]
 r187: [124..126]
 r188: [102..104]
 r189: [82..84]
 r190: [60..62]
 r191: [40..42]
 r192: [18..20]
Compressing live ranges: from 208 to 178 - 85%
Ranges after the compression:
 r82: [168..169]
 r83: [166..167]
 r84: [164..165]
 r85: [162..163]
 r86: [148..161]
 r87: [152..153]
 r88: [150..151]
 r89: [148..149]
 r90: [146..147]
 r91: [136..137]
 r92: [134..135]
 r93: [132..133]
 r94: [130..131]
 r95: [128..129]
 r96: [112..127]
 r97: [118..119]
 r98: [116..117]
 r99: [114..115]
 r100: [112..113]
 r101: [110..111]
 r102: [100..101]
 r103: [98..99]
 r104: [96..97]
 r105: [94..95]
 r106: [92..93]
 r107: [76..91]
 r108: [82..83]
 r109: [80..81]
 r110: [78..79]
 r111: [76..77]
 r112: [74..75]
 r113: [64..65]
 r114: [62..63]
 r115: [60..61]
 r116: [58..59]
 r117: [56..57]
 r118: [40..55]
 r119: [46..47]
 r120: [44..45]
 r121: [42..43]
 r122: [40..41]
 r123: [38..39]
 r124: [28..29]
 r125: [26..27]
 r126: [24..25]
 r127: [22..23]
 r128: [20..21]
 r129: [6..19]
 r130: [10..11]
 r131: [8..9]
 r132: [6..7]
 r133: [4..5]
 r134: [2..3]
 r135: [0..1]
 r136: [174..177]
 r137: [174..175]
 r138: [172..173]
 r139: [170..171]
 r140: [164..165]
 r141: [158..161]
 r142: [158..159]
 r143: [156..157]
 r144: [154..155]
 r145: [142..145]
 r146: [142..143]
 r147: [140..141]
 r148: [138..139]
 r149: [130..131]
 r150: [124..127]
 r151: [124..125]
 r152: [122..123]
 r153: [120..121]
 r154: [106..109]
 r155: [106..107]
 r156: [104..105]
 r157: [102..103]
 r158: [94..95]
 r159: [88..91]
 r160: [88..89]
 r161: [86..87]
 r162: [84..85]
 r163: [70..73]
 r164: [70..71]
 r165: [68..69]
 r166: [66..67]
 r167: [58..59]
 r168: [52..55]
 r169: [52..53]
 r170: [50..51]
 r171: [48..49]
 r172: [34..37]
 r173: [34..35]
 r174: [32..33]
 r175: [30..31]
 r176: [22..23]
 r177: [16..19]
 r178: [16..17]
 r179: [14..15]
 r180: [12..13]
 r183: [176..177]
 r184: [160..161]
 r185: [144..145]
 r186: [126..127]
 r187: [108..109]
 r188: [90..91]
 r189: [72..73]
 r190: [54..55]
 r191: [36..37]
 r192: [18..19]

********** Assignment #1: **********

	 Assigning to 183 (cl=GENERAL_REGS, orig=137, freq=3000, tfirst=183, tfreq=3000)...
	   Assign 1 to reload r183 (freq=3000)
	 Assigning to 184 (cl=GENERAL_REGS, orig=142, freq=3000, tfirst=184, tfreq=3000)...
	   Assign 2 to reload r184 (freq=3000)
	 Assigning to 185 (cl=GENERAL_REGS, orig=146, freq=3000, tfirst=185, tfreq=3000)...
	   Assign 1 to reload r185 (freq=3000)
	 Assigning to 186 (cl=GENERAL_REGS, orig=151, freq=3000, tfirst=186, tfreq=3000)...
	   Assign 2 to reload r186 (freq=3000)
	 Assigning to 187 (cl=GENERAL_REGS, orig=155, freq=3000, tfirst=187, tfreq=3000)...
	   Assign 1 to reload r187 (freq=3000)
	 Assigning to 188 (cl=GENERAL_REGS, orig=160, freq=3000, tfirst=188, tfreq=3000)...
	   Assign 2 to reload r188 (freq=3000)
	 Assigning to 189 (cl=GENERAL_REGS, orig=164, freq=3000, tfirst=189, tfreq=3000)...
	   Assign 1 to reload r189 (freq=3000)
	 Assigning to 190 (cl=GENERAL_REGS, orig=169, freq=3000, tfirst=190, tfreq=3000)...
	   Assign 2 to reload r190 (freq=3000)
	 Assigning to 191 (cl=GENERAL_REGS, orig=173, freq=3000, tfirst=191, tfreq=3000)...
	   Assign 1 to reload r191 (freq=3000)
	 Assigning to 192 (cl=GENERAL_REGS, orig=178, freq=3000, tfirst=192, tfreq=3000)...
	   Assign 2 to reload r192 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 14
changing reg in insn 15
changing reg in insn 15
changing reg in insn 16
changing reg in insn 16
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 39
changing reg in insn 39
changing reg in insn 40
changing reg in insn 40
changing reg in insn 42
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 52
changing reg in insn 52
changing reg in insn 53
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 62
changing reg in insn 63
changing reg in insn 63
changing reg in insn 64
changing reg in insn 64
changing reg in insn 65
changing reg in insn 65
changing reg in insn 67
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 75
changing reg in insn 76
changing reg in insn 76
changing reg in insn 77
changing reg in insn 77
changing reg in insn 78
changing reg in insn 78
changing reg in insn 79
changing reg in insn 80
changing reg in insn 87
changing reg in insn 88
changing reg in insn 88
changing reg in insn 89
changing reg in insn 89
changing reg in insn 90
changing reg in insn 90
changing reg in insn 92
changing reg in insn 92
changing reg in insn 93
changing reg in insn 93
changing reg in insn 100
changing reg in insn 101
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 103
changing reg in insn 103
changing reg in insn 104
changing reg in insn 105
changing reg in insn 112
changing reg in insn 113
changing reg in insn 113
changing reg in insn 114
changing reg in insn 114
changing reg in insn 115
changing reg in insn 115
changing reg in insn 117
changing reg in insn 117
changing reg in insn 118
changing reg in insn 118
changing reg in insn 125
changing reg in insn 126
changing reg in insn 126
changing reg in insn 127
changing reg in insn 127
changing reg in insn 128
changing reg in insn 129
changing reg in insn 130
changing reg in insn 133
changing reg in insn 133
changing reg in insn 137
changing reg in insn 8
changing reg in insn 12
changing reg in insn 13
changing reg in insn 13
changing reg in insn 14
changing reg in insn 17
changing reg in insn 20
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 26
changing reg in insn 31
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 37
changing reg in insn 41
changing reg in insn 44
changing reg in insn 48
changing reg in insn 49
changing reg in insn 49
changing reg in insn 50
changing reg in insn 56
changing reg in insn 60
changing reg in insn 61
changing reg in insn 61
changing reg in insn 62
changing reg in insn 66
changing reg in insn 69
changing reg in insn 73
changing reg in insn 74
changing reg in insn 74
changing reg in insn 75
changing reg in insn 81
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 87
changing reg in insn 91
changing reg in insn 94
changing reg in insn 98
changing reg in insn 99
changing reg in insn 99
changing reg in insn 100
changing reg in insn 106
changing reg in insn 110
changing reg in insn 111
changing reg in insn 111
changing reg in insn 112
changing reg in insn 116
changing reg in insn 119
changing reg in insn 123
changing reg in insn 124
changing reg in insn 124
changing reg in insn 125
deleting insn with uid = 142.
deleting insn with uid = 14.
deleting insn with uid = 144.
deleting insn with uid = 26.
deleting insn with uid = 146.
deleting insn with uid = 37.
deleting insn with uid = 148.
deleting insn with uid = 50.
deleting insn with uid = 150.
deleting insn with uid = 62.
deleting insn with uid = 152.
deleting insn with uid = 75.
deleting insn with uid = 154.
deleting insn with uid = 87.
deleting insn with uid = 156.
deleting insn with uid = 100.
deleting insn with uid = 158.
deleting insn with uid = 112.
deleting insn with uid = 160.
deleting insn with uid = 125.
deleting insn with uid = 133.
deleting insn with uid = 137.
starting the processing of deferred insns
ending the processing of deferred insns


dynamic_array_init_life3

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={69d,79u} r1={21d,21u,5e} r2={11d,10u} r4={1d,1u} r5={1d,1u} r6={1d,21u} r7={1d,2u} r17={57d} r19={1d,1u,5e} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r36={1d} r37={1d} 
;;    total ref usage 319{173d,136u,10e} in 107{107 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 17 [flags] 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
        (reg:DI 5 di [ A ])) "game_of_life.c":130:55 74 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 N+0 S4 A32])
        (reg:SI 4 si [ N ])) "game_of_life.c":130:55 75 {*movsi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 M+0 S4 A32])
        (reg:SI 1 dx [ M ])) "game_of_life.c":130:55 75 {*movsi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 141 2 (set (reg:SI 0 ax [136])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 N+0 S4 A32])) "game_of_life.c":132:9 75 {*movsi_internal}
     (nil))
(insn 141 8 11 2 (set (reg:SI 1 dx [137])
        (reg:SI 0 ax [136])) "game_of_life.c":132:9 75 {*movsi_internal}
     (nil))
(insn 11 141 12 2 (parallel [
            (set (reg:SI 1 dx [137])
                (lshiftrt:SI (reg:SI 1 dx [137])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":132:9 701 {*lshrsi3_1}
     (nil))
(insn 12 11 13 2 (parallel [
            (set (reg:SI 0 ax [138])
                (plus:SI (reg:SI 0 ax [136])
                    (reg:SI 1 dx [137])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":132:9 209 {*addsi_1}
     (nil))
(insn 13 12 15 2 (parallel [
            (set (reg:SI 0 ax [139])
                (ashiftrt:SI (reg:SI 0 ax [138])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":132:9 702 {*ashrsi3_1}
     (nil))
(insn 15 13 16 2 (set (reg:DI 0 ax [orig:83 _2 ] [83])
        (sign_extend:DI (reg:SI 0 ax [orig:82 _1 ] [82]))) "game_of_life.c":132:9 147 {*extendsidi2_rex64}
     (nil))
(insn 16 15 17 2 (parallel [
            (set (reg:DI 1 dx [orig:84 _3 ] [84])
                (ashift:DI (reg:DI 0 ax [orig:83 _2 ] [83])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":132:6 656 {*ashldi3_1}
     (nil))
(insn 17 16 18 2 (set (reg/f:DI 0 ax [140])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":132:6 74 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (parallel [
            (set (reg/f:DI 0 ax [orig:85 _4 ] [85])
                (plus:DI (reg/f:DI 0 ax [140])
                    (reg:DI 1 dx [orig:84 _3 ] [84])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":132:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (reg:DI 1 dx [orig:84 _3 ] [84]))
        (nil)))
(insn 19 18 20 2 (set (reg/f:DI 1 dx [orig:86 _5 ] [86])
        (mem/f:DI (reg/f:DI 0 ax [orig:85 _4 ] [85]) [4 *_4+0 S8 A64])) "game_of_life.c":132:6 74 {*movdi_internal}
     (nil))
(insn 20 19 143 2 (set (reg:SI 0 ax [141])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 M+0 S4 A32])) "game_of_life.c":132:16 75 {*movsi_internal}
     (nil))
(insn 143 20 23 2 (set (reg:SI 2 cx [142])
        (reg:SI 0 ax [141])) "game_of_life.c":132:16 75 {*movsi_internal}
     (nil))
(insn 23 143 24 2 (parallel [
            (set (reg:SI 2 cx [142])
                (lshiftrt:SI (reg:SI 2 cx [142])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":132:16 701 {*lshrsi3_1}
     (nil))
(insn 24 23 25 2 (parallel [
            (set (reg:SI 0 ax [143])
                (plus:SI (reg:SI 0 ax [141])
                    (reg:SI 2 cx [142])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":132:16 209 {*addsi_1}
     (nil))
(insn 25 24 27 2 (parallel [
            (set (reg:SI 0 ax [144])
                (ashiftrt:SI (reg:SI 0 ax [143])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":132:16 702 {*ashrsi3_1}
     (nil))
(insn 27 25 28 2 (set (reg:DI 0 ax [orig:88 _7 ] [88])
        (sign_extend:DI (reg:SI 0 ax [orig:87 _6 ] [87]))) "game_of_life.c":132:16 147 {*extendsidi2_rex64}
     (nil))
(insn 28 27 29 2 (parallel [
            (set (reg:DI 0 ax [orig:89 _8 ] [89])
                (ashift:DI (reg:DI 0 ax [orig:88 _7 ] [88])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":132:13 656 {*ashldi3_1}
     (nil))
(insn 29 28 30 2 (parallel [
            (set (reg/f:DI 0 ax [orig:90 _9 ] [90])
                (plus:DI (reg:DI 0 ax [orig:89 _8 ] [89])
                    (reg/f:DI 1 dx [orig:86 _5 ] [86])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":132:13 210 {*adddi_1}
     (nil))
(insn 30 29 31 2 (set (mem:SI (reg/f:DI 0 ax [orig:90 _9 ] [90]) [2 *_9+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":132:21 75 {*movsi_internal}
     (nil))
(insn 31 30 145 2 (set (reg:SI 0 ax [145])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 N+0 S4 A32])) "game_of_life.c":133:10 75 {*movsi_internal}
     (nil))
(insn 145 31 34 2 (set (reg:SI 1 dx [146])
        (reg:SI 0 ax [145])) "game_of_life.c":133:10 75 {*movsi_internal}
     (nil))
(insn 34 145 35 2 (parallel [
            (set (reg:SI 1 dx [146])
                (lshiftrt:SI (reg:SI 1 dx [146])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":133:10 701 {*lshrsi3_1}
     (nil))
(insn 35 34 36 2 (parallel [
            (set (reg:SI 0 ax [147])
                (plus:SI (reg:SI 0 ax [145])
                    (reg:SI 1 dx [146])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":133:10 209 {*addsi_1}
     (nil))
(insn 36 35 38 2 (parallel [
            (set (reg:SI 0 ax [148])
                (ashiftrt:SI (reg:SI 0 ax [147])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":133:10 702 {*ashrsi3_1}
     (nil))
(insn 38 36 39 2 (set (reg:DI 0 ax [orig:92 _11 ] [92])
        (sign_extend:DI (reg:SI 0 ax [orig:91 _10 ] [91]))) "game_of_life.c":133:6 147 {*extendsidi2_rex64}
     (nil))
(insn 39 38 40 2 (parallel [
            (set (reg:DI 0 ax [orig:93 _12 ] [93])
                (plus:DI (reg:DI 0 ax [orig:92 _11 ] [92])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":133:6 210 {*adddi_1}
     (nil))
(insn 40 39 41 2 (parallel [
            (set (reg:DI 1 dx [orig:94 _13 ] [94])
                (ashift:DI (reg:DI 0 ax [orig:93 _12 ] [93])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":133:6 656 {*ashldi3_1}
     (nil))
(insn 41 40 42 2 (set (reg/f:DI 0 ax [149])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":133:6 74 {*movdi_internal}
     (nil))
(insn 42 41 43 2 (parallel [
            (set (reg/f:DI 0 ax [orig:95 _14 ] [95])
                (plus:DI (reg/f:DI 0 ax [149])
                    (reg:DI 1 dx [orig:94 _13 ] [94])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":133:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (reg:DI 1 dx [orig:94 _13 ] [94]))
        (nil)))
(insn 43 42 44 2 (set (reg/f:DI 1 dx [orig:96 _15 ] [96])
        (mem/f:DI (reg/f:DI 0 ax [orig:95 _14 ] [95]) [4 *_14+0 S8 A64])) "game_of_life.c":133:6 74 {*movdi_internal}
     (nil))
(insn 44 43 147 2 (set (reg:SI 0 ax [150])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 M+0 S4 A32])) "game_of_life.c":133:23 75 {*movsi_internal}
     (nil))
(insn 147 44 47 2 (set (reg:SI 2 cx [151])
        (reg:SI 0 ax [150])) "game_of_life.c":133:23 75 {*movsi_internal}
     (nil))
(insn 47 147 48 2 (parallel [
            (set (reg:SI 2 cx [151])
                (lshiftrt:SI (reg:SI 2 cx [151])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":133:23 701 {*lshrsi3_1}
     (nil))
(insn 48 47 49 2 (parallel [
            (set (reg:SI 0 ax [152])
                (plus:SI (reg:SI 0 ax [150])
                    (reg:SI 2 cx [151])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":133:23 209 {*addsi_1}
     (nil))
(insn 49 48 51 2 (parallel [
            (set (reg:SI 0 ax [153])
                (ashiftrt:SI (reg:SI 0 ax [152])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":133:23 702 {*ashrsi3_1}
     (nil))
(insn 51 49 52 2 (set (reg:DI 0 ax [orig:98 _17 ] [98])
        (sign_extend:DI (reg:SI 0 ax [orig:97 _16 ] [97]))) "game_of_life.c":133:23 147 {*extendsidi2_rex64}
     (nil))
(insn 52 51 53 2 (parallel [
            (set (reg:DI 0 ax [orig:99 _18 ] [99])
                (ashift:DI (reg:DI 0 ax [orig:98 _17 ] [98])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":133:19 656 {*ashldi3_1}
     (nil))
(insn 53 52 54 2 (parallel [
            (set (reg:DI 0 ax [orig:100 _19 ] [100])
                (plus:DI (reg:DI 0 ax [orig:99 _18 ] [99])
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":133:19 210 {*adddi_1}
     (nil))
(insn 54 53 55 2 (parallel [
            (set (reg/f:DI 0 ax [orig:101 _20 ] [101])
                (plus:DI (reg:DI 0 ax [orig:100 _19 ] [100])
                    (reg/f:DI 1 dx [orig:96 _15 ] [96])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":133:19 210 {*adddi_1}
     (nil))
(insn 55 54 56 2 (set (mem:SI (reg/f:DI 0 ax [orig:101 _20 ] [101]) [2 *_20+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":133:33 75 {*movsi_internal}
     (nil))
(insn 56 55 149 2 (set (reg:SI 0 ax [154])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 N+0 S4 A32])) "game_of_life.c":134:10 75 {*movsi_internal}
     (nil))
(insn 149 56 59 2 (set (reg:SI 1 dx [155])
        (reg:SI 0 ax [154])) "game_of_life.c":134:10 75 {*movsi_internal}
     (nil))
(insn 59 149 60 2 (parallel [
            (set (reg:SI 1 dx [155])
                (lshiftrt:SI (reg:SI 1 dx [155])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":134:10 701 {*lshrsi3_1}
     (nil))
(insn 60 59 61 2 (parallel [
            (set (reg:SI 0 ax [156])
                (plus:SI (reg:SI 0 ax [154])
                    (reg:SI 1 dx [155])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":134:10 209 {*addsi_1}
     (nil))
(insn 61 60 63 2 (parallel [
            (set (reg:SI 0 ax [157])
                (ashiftrt:SI (reg:SI 0 ax [156])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":134:10 702 {*ashrsi3_1}
     (nil))
(insn 63 61 64 2 (set (reg:DI 0 ax [orig:103 _22 ] [103])
        (sign_extend:DI (reg:SI 0 ax [orig:102 _21 ] [102]))) "game_of_life.c":134:6 147 {*extendsidi2_rex64}
     (nil))
(insn 64 63 65 2 (parallel [
            (set (reg:DI 0 ax [orig:104 _23 ] [104])
                (plus:DI (reg:DI 0 ax [orig:103 _22 ] [103])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":134:6 210 {*adddi_1}
     (nil))
(insn 65 64 66 2 (parallel [
            (set (reg:DI 1 dx [orig:105 _24 ] [105])
                (ashift:DI (reg:DI 0 ax [orig:104 _23 ] [104])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":134:6 656 {*ashldi3_1}
     (nil))
(insn 66 65 67 2 (set (reg/f:DI 0 ax [158])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":134:6 74 {*movdi_internal}
     (nil))
(insn 67 66 68 2 (parallel [
            (set (reg/f:DI 0 ax [orig:106 _25 ] [106])
                (plus:DI (reg/f:DI 0 ax [158])
                    (reg:DI 1 dx [orig:105 _24 ] [105])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":134:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (reg:DI 1 dx [orig:105 _24 ] [105]))
        (nil)))
(insn 68 67 69 2 (set (reg/f:DI 1 dx [orig:107 _26 ] [107])
        (mem/f:DI (reg/f:DI 0 ax [orig:106 _25 ] [106]) [4 *_25+0 S8 A64])) "game_of_life.c":134:6 74 {*movdi_internal}
     (nil))
(insn 69 68 151 2 (set (reg:SI 0 ax [159])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 M+0 S4 A32])) "game_of_life.c":134:23 75 {*movsi_internal}
     (nil))
(insn 151 69 72 2 (set (reg:SI 2 cx [160])
        (reg:SI 0 ax [159])) "game_of_life.c":134:23 75 {*movsi_internal}
     (nil))
(insn 72 151 73 2 (parallel [
            (set (reg:SI 2 cx [160])
                (lshiftrt:SI (reg:SI 2 cx [160])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":134:23 701 {*lshrsi3_1}
     (nil))
(insn 73 72 74 2 (parallel [
            (set (reg:SI 0 ax [161])
                (plus:SI (reg:SI 0 ax [159])
                    (reg:SI 2 cx [160])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":134:23 209 {*addsi_1}
     (nil))
(insn 74 73 76 2 (parallel [
            (set (reg:SI 0 ax [162])
                (ashiftrt:SI (reg:SI 0 ax [161])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":134:23 702 {*ashrsi3_1}
     (nil))
(insn 76 74 77 2 (set (reg:DI 0 ax [orig:109 _28 ] [109])
        (sign_extend:DI (reg:SI 0 ax [orig:108 _27 ] [108]))) "game_of_life.c":134:19 147 {*extendsidi2_rex64}
     (nil))
(insn 77 76 78 2 (parallel [
            (set (reg:DI 0 ax [orig:110 _29 ] [110])
                (plus:DI (reg:DI 0 ax [orig:109 _28 ] [109])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":134:19 210 {*adddi_1}
     (nil))
(insn 78 77 79 2 (parallel [
            (set (reg:DI 0 ax [orig:111 _30 ] [111])
                (ashift:DI (reg:DI 0 ax [orig:110 _29 ] [110])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":134:19 656 {*ashldi3_1}
     (nil))
(insn 79 78 80 2 (parallel [
            (set (reg/f:DI 0 ax [orig:112 _31 ] [112])
                (plus:DI (reg:DI 0 ax [orig:111 _30 ] [111])
                    (reg/f:DI 1 dx [orig:107 _26 ] [107])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":134:19 210 {*adddi_1}
     (nil))
(insn 80 79 81 2 (set (mem:SI (reg/f:DI 0 ax [orig:112 _31 ] [112]) [2 *_31+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":134:33 75 {*movsi_internal}
     (nil))
(insn 81 80 153 2 (set (reg:SI 0 ax [163])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 N+0 S4 A32])) "game_of_life.c":135:10 75 {*movsi_internal}
     (nil))
(insn 153 81 84 2 (set (reg:SI 1 dx [164])
        (reg:SI 0 ax [163])) "game_of_life.c":135:10 75 {*movsi_internal}
     (nil))
(insn 84 153 85 2 (parallel [
            (set (reg:SI 1 dx [164])
                (lshiftrt:SI (reg:SI 1 dx [164])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":135:10 701 {*lshrsi3_1}
     (nil))
(insn 85 84 86 2 (parallel [
            (set (reg:SI 0 ax [165])
                (plus:SI (reg:SI 0 ax [163])
                    (reg:SI 1 dx [164])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":135:10 209 {*addsi_1}
     (nil))
(insn 86 85 88 2 (parallel [
            (set (reg:SI 0 ax [166])
                (ashiftrt:SI (reg:SI 0 ax [165])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":135:10 702 {*ashrsi3_1}
     (nil))
(insn 88 86 89 2 (set (reg:DI 0 ax [orig:114 _33 ] [114])
        (sign_extend:DI (reg:SI 0 ax [orig:113 _32 ] [113]))) "game_of_life.c":135:6 147 {*extendsidi2_rex64}
     (nil))
(insn 89 88 90 2 (parallel [
            (set (reg:DI 0 ax [orig:115 _34 ] [115])
                (plus:DI (reg:DI 0 ax [orig:114 _33 ] [114])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":135:6 210 {*adddi_1}
     (nil))
(insn 90 89 91 2 (parallel [
            (set (reg:DI 1 dx [orig:116 _35 ] [116])
                (ashift:DI (reg:DI 0 ax [orig:115 _34 ] [115])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":135:6 656 {*ashldi3_1}
     (nil))
(insn 91 90 92 2 (set (reg/f:DI 0 ax [167])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":135:6 74 {*movdi_internal}
     (nil))
(insn 92 91 93 2 (parallel [
            (set (reg/f:DI 0 ax [orig:117 _36 ] [117])
                (plus:DI (reg/f:DI 0 ax [167])
                    (reg:DI 1 dx [orig:116 _35 ] [116])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":135:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (reg:DI 1 dx [orig:116 _35 ] [116]))
        (nil)))
(insn 93 92 94 2 (set (reg/f:DI 1 dx [orig:118 _37 ] [118])
        (mem/f:DI (reg/f:DI 0 ax [orig:117 _36 ] [117]) [4 *_36+0 S8 A64])) "game_of_life.c":135:6 74 {*movdi_internal}
     (nil))
(insn 94 93 155 2 (set (reg:SI 0 ax [168])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 M+0 S4 A32])) "game_of_life.c":135:23 75 {*movsi_internal}
     (nil))
(insn 155 94 97 2 (set (reg:SI 2 cx [169])
        (reg:SI 0 ax [168])) "game_of_life.c":135:23 75 {*movsi_internal}
     (nil))
(insn 97 155 98 2 (parallel [
            (set (reg:SI 2 cx [169])
                (lshiftrt:SI (reg:SI 2 cx [169])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":135:23 701 {*lshrsi3_1}
     (nil))
(insn 98 97 99 2 (parallel [
            (set (reg:SI 0 ax [170])
                (plus:SI (reg:SI 0 ax [168])
                    (reg:SI 2 cx [169])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":135:23 209 {*addsi_1}
     (nil))
(insn 99 98 101 2 (parallel [
            (set (reg:SI 0 ax [171])
                (ashiftrt:SI (reg:SI 0 ax [170])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":135:23 702 {*ashrsi3_1}
     (nil))
(insn 101 99 102 2 (set (reg:DI 0 ax [orig:120 _39 ] [120])
        (sign_extend:DI (reg:SI 0 ax [orig:119 _38 ] [119]))) "game_of_life.c":135:19 147 {*extendsidi2_rex64}
     (nil))
(insn 102 101 103 2 (parallel [
            (set (reg:DI 0 ax [orig:121 _40 ] [121])
                (plus:DI (reg:DI 0 ax [orig:120 _39 ] [120])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":135:19 210 {*adddi_1}
     (nil))
(insn 103 102 104 2 (parallel [
            (set (reg:DI 0 ax [orig:122 _41 ] [122])
                (ashift:DI (reg:DI 0 ax [orig:121 _40 ] [121])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":135:19 656 {*ashldi3_1}
     (nil))
(insn 104 103 105 2 (parallel [
            (set (reg/f:DI 0 ax [orig:123 _42 ] [123])
                (plus:DI (reg:DI 0 ax [orig:122 _41 ] [122])
                    (reg/f:DI 1 dx [orig:118 _37 ] [118])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":135:19 210 {*adddi_1}
     (nil))
(insn 105 104 106 2 (set (mem:SI (reg/f:DI 0 ax [orig:123 _42 ] [123]) [2 *_42+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":135:33 75 {*movsi_internal}
     (nil))
(insn 106 105 157 2 (set (reg:SI 0 ax [172])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 N+0 S4 A32])) "game_of_life.c":136:10 75 {*movsi_internal}
     (nil))
(insn 157 106 109 2 (set (reg:SI 1 dx [173])
        (reg:SI 0 ax [172])) "game_of_life.c":136:10 75 {*movsi_internal}
     (nil))
(insn 109 157 110 2 (parallel [
            (set (reg:SI 1 dx [173])
                (lshiftrt:SI (reg:SI 1 dx [173])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":136:10 701 {*lshrsi3_1}
     (nil))
(insn 110 109 111 2 (parallel [
            (set (reg:SI 0 ax [174])
                (plus:SI (reg:SI 0 ax [172])
                    (reg:SI 1 dx [173])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":136:10 209 {*addsi_1}
     (nil))
(insn 111 110 113 2 (parallel [
            (set (reg:SI 0 ax [175])
                (ashiftrt:SI (reg:SI 0 ax [174])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":136:10 702 {*ashrsi3_1}
     (nil))
(insn 113 111 114 2 (set (reg:DI 0 ax [orig:125 _44 ] [125])
        (sign_extend:DI (reg:SI 0 ax [orig:124 _43 ] [124]))) "game_of_life.c":136:6 147 {*extendsidi2_rex64}
     (nil))
(insn 114 113 115 2 (parallel [
            (set (reg:DI 0 ax [orig:126 _45 ] [126])
                (plus:DI (reg:DI 0 ax [orig:125 _44 ] [125])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":136:6 210 {*adddi_1}
     (nil))
(insn 115 114 116 2 (parallel [
            (set (reg:DI 1 dx [orig:127 _46 ] [127])
                (ashift:DI (reg:DI 0 ax [orig:126 _45 ] [126])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":136:6 656 {*ashldi3_1}
     (nil))
(insn 116 115 117 2 (set (reg/f:DI 0 ax [176])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":136:6 74 {*movdi_internal}
     (nil))
(insn 117 116 118 2 (parallel [
            (set (reg/f:DI 0 ax [orig:128 _47 ] [128])
                (plus:DI (reg/f:DI 0 ax [176])
                    (reg:DI 1 dx [orig:127 _46 ] [127])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":136:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (reg:DI 1 dx [orig:127 _46 ] [127]))
        (nil)))
(insn 118 117 119 2 (set (reg/f:DI 1 dx [orig:129 _48 ] [129])
        (mem/f:DI (reg/f:DI 0 ax [orig:128 _47 ] [128]) [4 *_47+0 S8 A64])) "game_of_life.c":136:6 74 {*movdi_internal}
     (nil))
(insn 119 118 159 2 (set (reg:SI 0 ax [177])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 M+0 S4 A32])) "game_of_life.c":136:22 75 {*movsi_internal}
     (nil))
(insn 159 119 122 2 (set (reg:SI 2 cx [178])
        (reg:SI 0 ax [177])) "game_of_life.c":136:22 75 {*movsi_internal}
     (nil))
(insn 122 159 123 2 (parallel [
            (set (reg:SI 2 cx [178])
                (lshiftrt:SI (reg:SI 2 cx [178])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":136:22 701 {*lshrsi3_1}
     (nil))
(insn 123 122 124 2 (parallel [
            (set (reg:SI 0 ax [179])
                (plus:SI (reg:SI 0 ax [177])
                    (reg:SI 2 cx [178])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":136:22 209 {*addsi_1}
     (nil))
(insn 124 123 126 2 (parallel [
            (set (reg:SI 0 ax [180])
                (ashiftrt:SI (reg:SI 0 ax [179])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":136:22 702 {*ashrsi3_1}
     (nil))
(insn 126 124 127 2 (set (reg:DI 0 ax [orig:131 _50 ] [131])
        (sign_extend:DI (reg:SI 0 ax [orig:130 _49 ] [130]))) "game_of_life.c":136:22 147 {*extendsidi2_rex64}
     (nil))
(insn 127 126 128 2 (parallel [
            (set (reg:DI 0 ax [orig:132 _51 ] [132])
                (ashift:DI (reg:DI 0 ax [orig:131 _50 ] [131])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":136:19 656 {*ashldi3_1}
     (nil))
(insn 128 127 129 2 (parallel [
            (set (reg/f:DI 0 ax [orig:133 _52 ] [133])
                (plus:DI (reg:DI 0 ax [orig:132 _51 ] [132])
                    (reg/f:DI 1 dx [orig:129 _48 ] [129])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":136:19 210 {*adddi_1}
     (nil))
(insn 129 128 130 2 (set (mem:SI (reg/f:DI 0 ax [orig:133 _52 ] [133]) [2 *_52+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":136:27 75 {*movsi_internal}
     (nil))
(insn 130 129 138 2 (set (reg/f:DI 0 ax [orig:134 _62 ] [134])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":138:12 74 {*movdi_internal}
     (nil))
(insn 138 130 140 2 (use (reg/i:DI 0 ax)) "game_of_life.c":139:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 140 138 0 NOTE_INSN_DELETED)

;; Function dynamic_array_init_life4 (dynamic_array_init_life4, funcdef_no=14, decl_uid=4952, cgraph_uid=15, symbol_order=14)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 7:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 9:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 12:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 14:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 17:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 19:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 22:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 24:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 27:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 29:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 31:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 32:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 33:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 34:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 37:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 39:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 41:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 42:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 44:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 46:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 47:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 48:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 49:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 50:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 51:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 52:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 53:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 54:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 56:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 57:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 58:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 59:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 60:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 61:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 62:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 63:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 64:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 65:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 67:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 68:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 69:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 70:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 71:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 72:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 73:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 74:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 75:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 76:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 77:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 78:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 79:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 80:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 81:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 82:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 83:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 84:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 85:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 86:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 87:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 88:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 89:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 90:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 91:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 92:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 93:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 94:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 95:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 96:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 97:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 98:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 99:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 100:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 101:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 102:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 103:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 104:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 105:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 106:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 107:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 108:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 109:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 110:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 111:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 112:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 113:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 114:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 115:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 116:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 117:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 118:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 119:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 120:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 121:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 122:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 123:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 124:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 125:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 126:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 127:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 128:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 129:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 130:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 131:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 132:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 133:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 134:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 135:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 136:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 137:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 138:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 139:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 140:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 141:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 142:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 143:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 144:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 145:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 146:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 147:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 148:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 149:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 150:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 151:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 152:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 153:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 154:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 155:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 156:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 157:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 158:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 159:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 160:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 161:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 162:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 163:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 164:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 165:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 166:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 167:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 168:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 169:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 170:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 171:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 172:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 173:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 174:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 175:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 176:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 177:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 178:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 179:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 180:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 181:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 182:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 183:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 184:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 185:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 186:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 187:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 188:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 189:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 190:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 191:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 199: point = 0, n_alt = -1
   Insn 198: point = 0, n_alt = -2
   Insn 194: point = 1, n_alt = -2
   Insn 191: point = 3, n_alt = 3
   Insn 190: point = 4, n_alt = 1
   Insn 189: point = 5, n_alt = 0
   Insn 188: point = 7, n_alt = 3
   Insn 187: point = 9, n_alt = 0
   Insn 186: point = 11, n_alt = 3
   Insn 185: point = 12, n_alt = 1
   Insn 184: point = 13, n_alt = 0
   Insn 183: point = 15, n_alt = 3
   Insn 182: point = 17, n_alt = 0
   Insn 181: point = 19, n_alt = 3
   Insn 180: point = 20, n_alt = 1
   Insn 179: point = 21, n_alt = 0
   Insn 178: point = 23, n_alt = 3
   Insn 177: point = 25, n_alt = 0
   Insn 176: point = 27, n_alt = 3
   Insn 175: point = 28, n_alt = 1
   Insn 174: point = 29, n_alt = 0
   Insn 173: point = 31, n_alt = 3
   Insn 172: point = 33, n_alt = 0
   Insn 171: point = 35, n_alt = 3
   Insn 170: point = 36, n_alt = 1
   Insn 169: point = 37, n_alt = 0
   Insn 168: point = 39, n_alt = 3
   Insn 167: point = 41, n_alt = 0
   Insn 166: point = 43, n_alt = 3
   Insn 165: point = 44, n_alt = 1
   Insn 164: point = 45, n_alt = 0
   Insn 163: point = 47, n_alt = 3
   Insn 162: point = 49, n_alt = 0
   Insn 161: point = 51, n_alt = 3
   Insn 160: point = 52, n_alt = 1
   Insn 159: point = 53, n_alt = 0
   Insn 158: point = 55, n_alt = 3
   Insn 157: point = 57, n_alt = 0
   Insn 156: point = 59, n_alt = 3
   Insn 155: point = 60, n_alt = 1
   Insn 154: point = 61, n_alt = 0
   Insn 153: point = 63, n_alt = 3
   Insn 152: point = 65, n_alt = 0
   Insn 151: point = 67, n_alt = 3
   Insn 150: point = 68, n_alt = 1
   Insn 149: point = 69, n_alt = 0
   Insn 148: point = 71, n_alt = 3
   Insn 147: point = 73, n_alt = 0
   Insn 146: point = 75, n_alt = 3
   Insn 145: point = 76, n_alt = 1
   Insn 144: point = 77, n_alt = 0
   Insn 143: point = 79, n_alt = 3
   Insn 142: point = 81, n_alt = 0
   Insn 141: point = 83, n_alt = 3
   Insn 140: point = 84, n_alt = 1
   Insn 139: point = 85, n_alt = 0
   Insn 138: point = 87, n_alt = 3
   Insn 137: point = 89, n_alt = 0
   Insn 136: point = 91, n_alt = 3
   Insn 135: point = 92, n_alt = 1
   Insn 134: point = 93, n_alt = 0
   Insn 133: point = 95, n_alt = 3
   Insn 132: point = 97, n_alt = 0
   Insn 131: point = 99, n_alt = 3
   Insn 130: point = 100, n_alt = 1
   Insn 129: point = 101, n_alt = 0
   Insn 128: point = 103, n_alt = 3
   Insn 127: point = 105, n_alt = 0
   Insn 126: point = 107, n_alt = 3
   Insn 125: point = 108, n_alt = 1
   Insn 124: point = 109, n_alt = 0
   Insn 123: point = 111, n_alt = 3
   Insn 122: point = 113, n_alt = 0
   Insn 121: point = 115, n_alt = 3
   Insn 120: point = 116, n_alt = 1
   Insn 119: point = 117, n_alt = 0
   Insn 118: point = 119, n_alt = 3
   Insn 117: point = 121, n_alt = 0
   Insn 116: point = 123, n_alt = 3
   Insn 115: point = 124, n_alt = 1
   Insn 114: point = 125, n_alt = 0
   Insn 113: point = 127, n_alt = 3
   Insn 112: point = 129, n_alt = 0
   Insn 111: point = 131, n_alt = 3
   Insn 110: point = 132, n_alt = 1
   Insn 109: point = 133, n_alt = 0
   Insn 108: point = 135, n_alt = 3
   Insn 107: point = 137, n_alt = 0
   Insn 106: point = 139, n_alt = 3
   Insn 105: point = 140, n_alt = 1
   Insn 104: point = 141, n_alt = 0
   Insn 103: point = 143, n_alt = 3
   Insn 102: point = 145, n_alt = 0
   Insn 101: point = 147, n_alt = 3
   Insn 100: point = 148, n_alt = 1
   Insn 99: point = 149, n_alt = 0
   Insn 98: point = 151, n_alt = 3
   Insn 97: point = 153, n_alt = 0
   Insn 96: point = 155, n_alt = 3
   Insn 95: point = 156, n_alt = 1
   Insn 94: point = 157, n_alt = 0
   Insn 93: point = 159, n_alt = 3
   Insn 92: point = 161, n_alt = 0
   Insn 91: point = 163, n_alt = 3
   Insn 90: point = 164, n_alt = 1
   Insn 89: point = 165, n_alt = 0
   Insn 88: point = 167, n_alt = 3
   Insn 87: point = 169, n_alt = 0
   Insn 86: point = 171, n_alt = 3
   Insn 85: point = 172, n_alt = 1
   Insn 84: point = 173, n_alt = 0
   Insn 83: point = 175, n_alt = 3
   Insn 82: point = 177, n_alt = 0
   Insn 81: point = 179, n_alt = 3
   Insn 80: point = 180, n_alt = 1
   Insn 79: point = 181, n_alt = 0
   Insn 78: point = 183, n_alt = 3
   Insn 77: point = 185, n_alt = 0
   Insn 76: point = 187, n_alt = 3
   Insn 75: point = 188, n_alt = 1
   Insn 74: point = 189, n_alt = 0
   Insn 73: point = 191, n_alt = 3
   Insn 72: point = 193, n_alt = 0
   Insn 71: point = 195, n_alt = 3
   Insn 70: point = 196, n_alt = 1
   Insn 69: point = 197, n_alt = 0
   Insn 68: point = 199, n_alt = 3
   Insn 67: point = 201, n_alt = 0
   Insn 66: point = 203, n_alt = 3
   Insn 65: point = 204, n_alt = 1
   Insn 64: point = 205, n_alt = 0
   Insn 63: point = 207, n_alt = 3
   Insn 62: point = 209, n_alt = 0
   Insn 61: point = 211, n_alt = 3
   Insn 60: point = 212, n_alt = 1
   Insn 59: point = 213, n_alt = 0
   Insn 58: point = 215, n_alt = 3
   Insn 57: point = 217, n_alt = 0
   Insn 56: point = 219, n_alt = 3
   Insn 55: point = 220, n_alt = 1
   Insn 54: point = 221, n_alt = 0
   Insn 53: point = 223, n_alt = 3
   Insn 52: point = 225, n_alt = 0
   Insn 51: point = 227, n_alt = 3
   Insn 50: point = 228, n_alt = 1
   Insn 49: point = 229, n_alt = 0
   Insn 48: point = 231, n_alt = 3
   Insn 47: point = 233, n_alt = 0
   Insn 46: point = 235, n_alt = 3
   Insn 45: point = 236, n_alt = 1
   Insn 44: point = 237, n_alt = 0
   Insn 43: point = 239, n_alt = 3
   Insn 42: point = 241, n_alt = 0
   Insn 41: point = 243, n_alt = 3
   Insn 40: point = 244, n_alt = 1
   Insn 39: point = 245, n_alt = 0
   Insn 38: point = 247, n_alt = 3
   Insn 37: point = 249, n_alt = 0
   Insn 36: point = 251, n_alt = 3
   Insn 35: point = 252, n_alt = 1
   Insn 34: point = 253, n_alt = 0
   Insn 33: point = 255, n_alt = 3
   Insn 32: point = 257, n_alt = 0
   Insn 31: point = 259, n_alt = 3
   Insn 30: point = 260, n_alt = 1
   Insn 29: point = 261, n_alt = 0
   Insn 28: point = 263, n_alt = 3
   Insn 27: point = 265, n_alt = 0
   Insn 26: point = 267, n_alt = 3
   Insn 25: point = 268, n_alt = 1
   Insn 24: point = 269, n_alt = 0
   Insn 23: point = 271, n_alt = 3
   Insn 22: point = 273, n_alt = 0
   Insn 21: point = 275, n_alt = 3
   Insn 20: point = 276, n_alt = 1
   Insn 19: point = 277, n_alt = 0
   Insn 18: point = 279, n_alt = 3
   Insn 17: point = 281, n_alt = 0
   Insn 16: point = 283, n_alt = 3
   Insn 15: point = 284, n_alt = 1
   Insn 14: point = 285, n_alt = 0
   Insn 13: point = 287, n_alt = 3
   Insn 12: point = 289, n_alt = 0
   Insn 11: point = 291, n_alt = 3
   Insn 10: point = 292, n_alt = 1
   Insn 9: point = 293, n_alt = 0
   Insn 8: point = 295, n_alt = 3
   Insn 7: point = 297, n_alt = 0
   Insn 6: point = 299, n_alt = 3
   Insn 2: point = 300, n_alt = 5
 r82: [296..297]
 r83: [294..295]
 r84: [292..293]
 r85: [288..289]
 r86: [286..287]
 r87: [284..285]
 r88: [280..281]
 r89: [278..279]
 r90: [276..277]
 r91: [272..273]
 r92: [270..271]
 r93: [268..269]
 r94: [264..265]
 r95: [262..263]
 r96: [260..261]
 r97: [256..257]
 r98: [254..255]
 r99: [252..253]
 r100: [248..249]
 r101: [246..247]
 r102: [244..245]
 r103: [240..241]
 r104: [238..239]
 r105: [236..237]
 r106: [232..233]
 r107: [230..231]
 r108: [228..229]
 r109: [224..225]
 r110: [222..223]
 r111: [220..221]
 r112: [216..217]
 r113: [214..215]
 r114: [212..213]
 r115: [208..209]
 r116: [206..207]
 r117: [204..205]
 r118: [200..201]
 r119: [198..199]
 r120: [196..197]
 r121: [192..193]
 r122: [190..191]
 r123: [188..189]
 r124: [184..185]
 r125: [182..183]
 r126: [180..181]
 r127: [176..177]
 r128: [174..175]
 r129: [172..173]
 r130: [168..169]
 r131: [166..167]
 r132: [164..165]
 r133: [160..161]
 r134: [158..159]
 r135: [156..157]
 r136: [152..153]
 r137: [150..151]
 r138: [148..149]
 r139: [144..145]
 r140: [142..143]
 r141: [140..141]
 r142: [136..137]
 r143: [134..135]
 r144: [132..133]
 r145: [128..129]
 r146: [126..127]
 r147: [124..125]
 r148: [120..121]
 r149: [118..119]
 r150: [116..117]
 r151: [112..113]
 r152: [110..111]
 r153: [108..109]
 r154: [104..105]
 r155: [102..103]
 r156: [100..101]
 r157: [96..97]
 r158: [94..95]
 r159: [92..93]
 r160: [88..89]
 r161: [86..87]
 r162: [84..85]
 r163: [80..81]
 r164: [78..79]
 r165: [76..77]
 r166: [72..73]
 r167: [70..71]
 r168: [68..69]
 r169: [64..65]
 r170: [62..63]
 r171: [60..61]
 r172: [56..57]
 r173: [54..55]
 r174: [52..53]
 r175: [48..49]
 r176: [46..47]
 r177: [44..45]
 r178: [40..41]
 r179: [38..39]
 r180: [36..37]
 r181: [32..33]
 r182: [30..31]
 r183: [28..29]
 r184: [24..25]
 r185: [22..23]
 r186: [20..21]
 r187: [16..17]
 r188: [14..15]
 r189: [12..13]
 r190: [8..9]
 r191: [6..7]
 r192: [4..5]
 r193: [2..3]
 r194: [0..1]
 r195: [298..299]
 r196: [290..291]
 r197: [282..283]
 r198: [274..275]
 r199: [266..267]
 r200: [258..259]
 r201: [250..251]
 r202: [242..243]
 r203: [234..235]
 r204: [226..227]
 r205: [218..219]
 r206: [210..211]
 r207: [202..203]
 r208: [194..195]
 r209: [186..187]
 r210: [178..179]
 r211: [170..171]
 r212: [162..163]
 r213: [154..155]
 r214: [146..147]
 r215: [138..139]
 r216: [130..131]
 r217: [122..123]
 r218: [114..115]
 r219: [106..107]
 r220: [98..99]
 r221: [90..91]
 r222: [82..83]
 r223: [74..75]
 r224: [66..67]
 r225: [58..59]
 r226: [50..51]
 r227: [42..43]
 r228: [34..35]
 r229: [26..27]
 r230: [18..19]
 r231: [10..11]
Compressing live ranges: from 300 to 300 - 100%
Ranges after the compression:
 r82: [296..297]
 r83: [294..295]
 r84: [292..293]
 r85: [288..289]
 r86: [286..287]
 r87: [284..285]
 r88: [280..281]
 r89: [278..279]
 r90: [276..277]
 r91: [272..273]
 r92: [270..271]
 r93: [268..269]
 r94: [264..265]
 r95: [262..263]
 r96: [260..261]
 r97: [256..257]
 r98: [254..255]
 r99: [252..253]
 r100: [248..249]
 r101: [246..247]
 r102: [244..245]
 r103: [240..241]
 r104: [238..239]
 r105: [236..237]
 r106: [232..233]
 r107: [230..231]
 r108: [228..229]
 r109: [224..225]
 r110: [222..223]
 r111: [220..221]
 r112: [216..217]
 r113: [214..215]
 r114: [212..213]
 r115: [208..209]
 r116: [206..207]
 r117: [204..205]
 r118: [200..201]
 r119: [198..199]
 r120: [196..197]
 r121: [192..193]
 r122: [190..191]
 r123: [188..189]
 r124: [184..185]
 r125: [182..183]
 r126: [180..181]
 r127: [176..177]
 r128: [174..175]
 r129: [172..173]
 r130: [168..169]
 r131: [166..167]
 r132: [164..165]
 r133: [160..161]
 r134: [158..159]
 r135: [156..157]
 r136: [152..153]
 r137: [150..151]
 r138: [148..149]
 r139: [144..145]
 r140: [142..143]
 r141: [140..141]
 r142: [136..137]
 r143: [134..135]
 r144: [132..133]
 r145: [128..129]
 r146: [126..127]
 r147: [124..125]
 r148: [120..121]
 r149: [118..119]
 r150: [116..117]
 r151: [112..113]
 r152: [110..111]
 r153: [108..109]
 r154: [104..105]
 r155: [102..103]
 r156: [100..101]
 r157: [96..97]
 r158: [94..95]
 r159: [92..93]
 r160: [88..89]
 r161: [86..87]
 r162: [84..85]
 r163: [80..81]
 r164: [78..79]
 r165: [76..77]
 r166: [72..73]
 r167: [70..71]
 r168: [68..69]
 r169: [64..65]
 r170: [62..63]
 r171: [60..61]
 r172: [56..57]
 r173: [54..55]
 r174: [52..53]
 r175: [48..49]
 r176: [46..47]
 r177: [44..45]
 r178: [40..41]
 r179: [38..39]
 r180: [36..37]
 r181: [32..33]
 r182: [30..31]
 r183: [28..29]
 r184: [24..25]
 r185: [22..23]
 r186: [20..21]
 r187: [16..17]
 r188: [14..15]
 r189: [12..13]
 r190: [8..9]
 r191: [6..7]
 r192: [4..5]
 r193: [2..3]
 r194: [0..1]
 r195: [298..299]
 r196: [290..291]
 r197: [282..283]
 r198: [274..275]
 r199: [266..267]
 r200: [258..259]
 r201: [250..251]
 r202: [242..243]
 r203: [234..235]
 r204: [226..227]
 r205: [218..219]
 r206: [210..211]
 r207: [202..203]
 r208: [194..195]
 r209: [186..187]
 r210: [178..179]
 r211: [170..171]
 r212: [162..163]
 r213: [154..155]
 r214: [146..147]
 r215: [138..139]
 r216: [130..131]
 r217: [122..123]
 r218: [114..115]
 r219: [106..107]
 r220: [98..99]
 r221: [90..91]
 r222: [82..83]
 r223: [74..75]
 r224: [66..67]
 r225: [58..59]
 r226: [50..51]
 r227: [42..43]
 r228: [34..35]
 r229: [26..27]
 r230: [18..19]
 r231: [10..11]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 8
changing reg in insn 8
changing reg in insn 9
changing reg in insn 9
changing reg in insn 10
changing reg in insn 12
changing reg in insn 13
changing reg in insn 13
changing reg in insn 14
changing reg in insn 14
changing reg in insn 15
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 24
changing reg in insn 24
changing reg in insn 25
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 29
changing reg in insn 29
changing reg in insn 30
changing reg in insn 32
changing reg in insn 33
changing reg in insn 33
changing reg in insn 34
changing reg in insn 34
changing reg in insn 35
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 39
changing reg in insn 39
changing reg in insn 40
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 45
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 49
changing reg in insn 49
changing reg in insn 50
changing reg in insn 52
changing reg in insn 53
changing reg in insn 53
changing reg in insn 54
changing reg in insn 54
changing reg in insn 55
changing reg in insn 57
changing reg in insn 58
changing reg in insn 58
changing reg in insn 59
changing reg in insn 59
changing reg in insn 60
changing reg in insn 62
changing reg in insn 63
changing reg in insn 63
changing reg in insn 64
changing reg in insn 64
changing reg in insn 65
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 69
changing reg in insn 69
changing reg in insn 70
changing reg in insn 72
changing reg in insn 73
changing reg in insn 73
changing reg in insn 74
changing reg in insn 74
changing reg in insn 75
changing reg in insn 77
changing reg in insn 78
changing reg in insn 78
changing reg in insn 79
changing reg in insn 79
changing reg in insn 80
changing reg in insn 82
changing reg in insn 83
changing reg in insn 83
changing reg in insn 84
changing reg in insn 84
changing reg in insn 85
changing reg in insn 87
changing reg in insn 88
changing reg in insn 88
changing reg in insn 89
changing reg in insn 89
changing reg in insn 90
changing reg in insn 92
changing reg in insn 93
changing reg in insn 93
changing reg in insn 94
changing reg in insn 94
changing reg in insn 95
changing reg in insn 97
changing reg in insn 98
changing reg in insn 98
changing reg in insn 99
changing reg in insn 99
changing reg in insn 100
changing reg in insn 102
changing reg in insn 103
changing reg in insn 103
changing reg in insn 104
changing reg in insn 104
changing reg in insn 105
changing reg in insn 107
changing reg in insn 108
changing reg in insn 108
changing reg in insn 109
changing reg in insn 109
changing reg in insn 110
changing reg in insn 112
changing reg in insn 113
changing reg in insn 113
changing reg in insn 114
changing reg in insn 114
changing reg in insn 115
changing reg in insn 117
changing reg in insn 118
changing reg in insn 118
changing reg in insn 119
changing reg in insn 119
changing reg in insn 120
changing reg in insn 122
changing reg in insn 123
changing reg in insn 123
changing reg in insn 124
changing reg in insn 124
changing reg in insn 125
changing reg in insn 127
changing reg in insn 128
changing reg in insn 128
changing reg in insn 129
changing reg in insn 129
changing reg in insn 130
changing reg in insn 132
changing reg in insn 133
changing reg in insn 133
changing reg in insn 134
changing reg in insn 134
changing reg in insn 135
changing reg in insn 137
changing reg in insn 138
changing reg in insn 138
changing reg in insn 139
changing reg in insn 139
changing reg in insn 140
changing reg in insn 142
changing reg in insn 143
changing reg in insn 143
changing reg in insn 144
changing reg in insn 144
changing reg in insn 145
changing reg in insn 147
changing reg in insn 148
changing reg in insn 148
changing reg in insn 149
changing reg in insn 149
changing reg in insn 150
changing reg in insn 152
changing reg in insn 153
changing reg in insn 153
changing reg in insn 154
changing reg in insn 154
changing reg in insn 155
changing reg in insn 157
changing reg in insn 158
changing reg in insn 158
changing reg in insn 159
changing reg in insn 159
changing reg in insn 160
changing reg in insn 162
changing reg in insn 163
changing reg in insn 163
changing reg in insn 164
changing reg in insn 164
changing reg in insn 165
changing reg in insn 167
changing reg in insn 168
changing reg in insn 168
changing reg in insn 169
changing reg in insn 169
changing reg in insn 170
changing reg in insn 172
changing reg in insn 173
changing reg in insn 173
changing reg in insn 174
changing reg in insn 174
changing reg in insn 175
changing reg in insn 177
changing reg in insn 178
changing reg in insn 178
changing reg in insn 179
changing reg in insn 179
changing reg in insn 180
changing reg in insn 182
changing reg in insn 183
changing reg in insn 183
changing reg in insn 184
changing reg in insn 184
changing reg in insn 185
changing reg in insn 187
changing reg in insn 188
changing reg in insn 188
changing reg in insn 189
changing reg in insn 189
changing reg in insn 190
changing reg in insn 191
changing reg in insn 194
changing reg in insn 194
changing reg in insn 198
changing reg in insn 6
changing reg in insn 7
changing reg in insn 11
changing reg in insn 12
changing reg in insn 16
changing reg in insn 17
changing reg in insn 21
changing reg in insn 22
changing reg in insn 26
changing reg in insn 27
changing reg in insn 31
changing reg in insn 32
changing reg in insn 36
changing reg in insn 37
changing reg in insn 41
changing reg in insn 42
changing reg in insn 46
changing reg in insn 47
changing reg in insn 51
changing reg in insn 52
changing reg in insn 56
changing reg in insn 57
changing reg in insn 61
changing reg in insn 62
changing reg in insn 66
changing reg in insn 67
changing reg in insn 71
changing reg in insn 72
changing reg in insn 76
changing reg in insn 77
changing reg in insn 81
changing reg in insn 82
changing reg in insn 86
changing reg in insn 87
changing reg in insn 91
changing reg in insn 92
changing reg in insn 96
changing reg in insn 97
changing reg in insn 101
changing reg in insn 102
changing reg in insn 106
changing reg in insn 107
changing reg in insn 111
changing reg in insn 112
changing reg in insn 116
changing reg in insn 117
changing reg in insn 121
changing reg in insn 122
changing reg in insn 126
changing reg in insn 127
changing reg in insn 131
changing reg in insn 132
changing reg in insn 136
changing reg in insn 137
changing reg in insn 141
changing reg in insn 142
changing reg in insn 146
changing reg in insn 147
changing reg in insn 151
changing reg in insn 152
changing reg in insn 156
changing reg in insn 157
changing reg in insn 161
changing reg in insn 162
changing reg in insn 166
changing reg in insn 167
changing reg in insn 171
changing reg in insn 172
changing reg in insn 176
changing reg in insn 177
changing reg in insn 181
changing reg in insn 182
changing reg in insn 186
changing reg in insn 187
deleting insn with uid = 194.
deleting insn with uid = 198.
starting the processing of deferred insns
ending the processing of deferred insns


dynamic_array_init_life4

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={150d,150u} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,41u} r7={1d,2u} r17={74d} r19={1d,1u,37e} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r36={1d} r37={1d} 
;;    total ref usage 473{241d,195u,37e} in 188{188 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 17 [flags] 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
        (reg:DI 5 di [ A ])) "game_of_life.c":141:41 74 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [195])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":143:6 74 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (parallel [
            (set (reg/f:DI 0 ax [orig:82 _1 ] [82])
                (plus:DI (reg/f:DI 0 ax [195])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":143:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (const_int 48 [0x30]))
        (nil)))
(insn 8 7 9 2 (set (reg/f:DI 0 ax [orig:83 _2 ] [83])
        (mem/f:DI (reg/f:DI 0 ax [orig:82 _1 ] [82]) [4 *_1+0 S8 A64])) "game_of_life.c":143:6 74 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (parallel [
            (set (reg/f:DI 0 ax [orig:84 _3 ] [84])
                (plus:DI (reg/f:DI 0 ax [orig:83 _2 ] [83])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":143:9 210 {*adddi_1}
     (nil))
(insn 10 9 11 2 (set (mem:SI (reg/f:DI 0 ax [orig:84 _3 ] [84]) [2 *_3+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":143:13 75 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg/f:DI 0 ax [196])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":144:6 74 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (parallel [
            (set (reg/f:DI 0 ax [orig:85 _4 ] [85])
                (plus:DI (reg/f:DI 0 ax [196])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":144:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (const_int 48 [0x30]))
        (nil)))
(insn 13 12 14 2 (set (reg/f:DI 0 ax [orig:86 _5 ] [86])
        (mem/f:DI (reg/f:DI 0 ax [orig:85 _4 ] [85]) [4 *_4+0 S8 A64])) "game_of_life.c":144:6 74 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (parallel [
            (set (reg/f:DI 0 ax [orig:87 _6 ] [87])
                (plus:DI (reg/f:DI 0 ax [orig:86 _5 ] [86])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":144:9 210 {*adddi_1}
     (nil))
(insn 15 14 16 2 (set (mem:SI (reg/f:DI 0 ax [orig:87 _6 ] [87]) [2 *_6+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":144:13 75 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (set (reg/f:DI 0 ax [197])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":145:6 74 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (parallel [
            (set (reg/f:DI 0 ax [orig:88 _7 ] [88])
                (plus:DI (reg/f:DI 0 ax [197])
                    (const_int 56 [0x38])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":145:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (const_int 56 [0x38]))
        (nil)))
(insn 18 17 19 2 (set (reg/f:DI 0 ax [orig:89 _8 ] [89])
        (mem/f:DI (reg/f:DI 0 ax [orig:88 _7 ] [88]) [4 *_7+0 S8 A64])) "game_of_life.c":145:6 74 {*movdi_internal}
     (nil))
(insn 19 18 20 2 (parallel [
            (set (reg/f:DI 0 ax [orig:90 _9 ] [90])
                (plus:DI (reg/f:DI 0 ax [orig:89 _8 ] [89])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":145:9 210 {*adddi_1}
     (nil))
(insn 20 19 21 2 (set (mem:SI (reg/f:DI 0 ax [orig:90 _9 ] [90]) [2 *_9+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":145:13 75 {*movsi_internal}
     (nil))
(insn 21 20 22 2 (set (reg/f:DI 0 ax [198])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":146:6 74 {*movdi_internal}
     (nil))
(insn 22 21 23 2 (parallel [
            (set (reg/f:DI 0 ax [orig:91 _10 ] [91])
                (plus:DI (reg/f:DI 0 ax [198])
                    (const_int 56 [0x38])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":146:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (const_int 56 [0x38]))
        (nil)))
(insn 23 22 24 2 (set (reg/f:DI 0 ax [orig:92 _11 ] [92])
        (mem/f:DI (reg/f:DI 0 ax [orig:91 _10 ] [91]) [4 *_10+0 S8 A64])) "game_of_life.c":146:6 74 {*movdi_internal}
     (nil))
(insn 24 23 25 2 (parallel [
            (set (reg/f:DI 0 ax [orig:93 _12 ] [93])
                (plus:DI (reg/f:DI 0 ax [orig:92 _11 ] [92])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":146:9 210 {*adddi_1}
     (nil))
(insn 25 24 26 2 (set (mem:SI (reg/f:DI 0 ax [orig:93 _12 ] [93]) [2 *_12+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":146:13 75 {*movsi_internal}
     (nil))
(insn 26 25 27 2 (set (reg/f:DI 0 ax [199])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":147:6 74 {*movdi_internal}
     (nil))
(insn 27 26 28 2 (parallel [
            (set (reg/f:DI 0 ax [orig:94 _13 ] [94])
                (plus:DI (reg/f:DI 0 ax [199])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":147:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (const_int 16 [0x10]))
        (nil)))
(insn 28 27 29 2 (set (reg/f:DI 0 ax [orig:95 _14 ] [95])
        (mem/f:DI (reg/f:DI 0 ax [orig:94 _13 ] [94]) [4 *_13+0 S8 A64])) "game_of_life.c":147:6 74 {*movdi_internal}
     (nil))
(insn 29 28 30 2 (parallel [
            (set (reg/f:DI 0 ax [orig:96 _15 ] [96])
                (plus:DI (reg/f:DI 0 ax [orig:95 _14 ] [95])
                    (const_int 104 [0x68])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":147:9 210 {*adddi_1}
     (nil))
(insn 30 29 31 2 (set (mem:SI (reg/f:DI 0 ax [orig:96 _15 ] [96]) [2 *_15+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":147:14 75 {*movsi_internal}
     (nil))
(insn 31 30 32 2 (set (reg/f:DI 0 ax [200])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":148:6 74 {*movdi_internal}
     (nil))
(insn 32 31 33 2 (parallel [
            (set (reg/f:DI 0 ax [orig:97 _16 ] [97])
                (plus:DI (reg/f:DI 0 ax [200])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":148:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (const_int 24 [0x18]))
        (nil)))
(insn 33 32 34 2 (set (reg/f:DI 0 ax [orig:98 _17 ] [98])
        (mem/f:DI (reg/f:DI 0 ax [orig:97 _16 ] [97]) [4 *_16+0 S8 A64])) "game_of_life.c":148:6 74 {*movdi_internal}
     (nil))
(insn 34 33 35 2 (parallel [
            (set (reg/f:DI 0 ax [orig:99 _18 ] [99])
                (plus:DI (reg/f:DI 0 ax [orig:98 _17 ] [98])
                    (const_int 104 [0x68])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":148:9 210 {*adddi_1}
     (nil))
(insn 35 34 36 2 (set (mem:SI (reg/f:DI 0 ax [orig:99 _18 ] [99]) [2 *_18+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":148:14 75 {*movsi_internal}
     (nil))
(insn 36 35 37 2 (set (reg/f:DI 0 ax [201])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":149:6 74 {*movdi_internal}
     (nil))
(insn 37 36 38 2 (parallel [
            (set (reg/f:DI 0 ax [orig:100 _19 ] [100])
                (plus:DI (reg/f:DI 0 ax [201])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":149:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (const_int 24 [0x18]))
        (nil)))
(insn 38 37 39 2 (set (reg/f:DI 0 ax [orig:101 _20 ] [101])
        (mem/f:DI (reg/f:DI 0 ax [orig:100 _19 ] [100]) [4 *_19+0 S8 A64])) "game_of_life.c":149:6 74 {*movdi_internal}
     (nil))
(insn 39 38 40 2 (parallel [
            (set (reg/f:DI 0 ax [orig:102 _21 ] [102])
                (plus:DI (reg/f:DI 0 ax [orig:101 _20 ] [101])
                    (const_int 96 [0x60])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":149:9 210 {*adddi_1}
     (nil))
(insn 40 39 41 2 (set (mem:SI (reg/f:DI 0 ax [orig:102 _21 ] [102]) [2 *_21+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":149:14 75 {*movsi_internal}
     (nil))
(insn 41 40 42 2 (set (reg/f:DI 0 ax [202])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":150:6 74 {*movdi_internal}
     (nil))
(insn 42 41 43 2 (parallel [
            (set (reg/f:DI 0 ax [orig:103 _22 ] [103])
                (plus:DI (reg/f:DI 0 ax [202])
                    (const_int 56 [0x38])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":150:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (const_int 56 [0x38]))
        (nil)))
(insn 43 42 44 2 (set (reg/f:DI 0 ax [orig:104 _23 ] [104])
        (mem/f:DI (reg/f:DI 0 ax [orig:103 _22 ] [103]) [4 *_22+0 S8 A64])) "game_of_life.c":150:6 74 {*movdi_internal}
     (nil))
(insn 44 43 45 2 (parallel [
            (set (reg/f:DI 0 ax [orig:105 _24 ] [105])
                (plus:DI (reg/f:DI 0 ax [orig:104 _23 ] [104])
                    (const_int 96 [0x60])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":150:9 210 {*adddi_1}
     (nil))
(insn 45 44 46 2 (set (mem:SI (reg/f:DI 0 ax [orig:105 _24 ] [105]) [2 *_24+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":150:14 75 {*movsi_internal}
     (nil))
(insn 46 45 47 2 (set (reg/f:DI 0 ax [203])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":151:6 74 {*movdi_internal}
     (nil))
(insn 47 46 48 2 (parallel [
            (set (reg/f:DI 0 ax [orig:106 _25 ] [106])
                (plus:DI (reg/f:DI 0 ax [203])
                    (const_int 56 [0x38])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":151:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (const_int 56 [0x38]))
        (nil)))
(insn 48 47 49 2 (set (reg/f:DI 0 ax [orig:107 _26 ] [107])
        (mem/f:DI (reg/f:DI 0 ax [orig:106 _25 ] [106]) [4 *_25+0 S8 A64])) "game_of_life.c":151:6 74 {*movdi_internal}
     (nil))
(insn 49 48 50 2 (parallel [
            (set (reg/f:DI 0 ax [orig:108 _27 ] [108])
                (plus:DI (reg/f:DI 0 ax [orig:107 _26 ] [107])
                    (const_int 104 [0x68])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":151:9 210 {*adddi_1}
     (nil))
(insn 50 49 51 2 (set (mem:SI (reg/f:DI 0 ax [orig:108 _27 ] [108]) [2 *_27+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":151:14 75 {*movsi_internal}
     (nil))
(insn 51 50 52 2 (set (reg/f:DI 0 ax [204])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":152:6 74 {*movdi_internal}
     (nil))
(insn 52 51 53 2 (parallel [
            (set (reg/f:DI 0 ax [orig:109 _28 ] [109])
                (plus:DI (reg/f:DI 0 ax [204])
                    (const_int 64 [0x40])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":152:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (const_int 64 [0x40]))
        (nil)))
(insn 53 52 54 2 (set (reg/f:DI 0 ax [orig:110 _29 ] [110])
        (mem/f:DI (reg/f:DI 0 ax [orig:109 _28 ] [109]) [4 *_28+0 S8 A64])) "game_of_life.c":152:6 74 {*movdi_internal}
     (nil))
(insn 54 53 55 2 (parallel [
            (set (reg/f:DI 0 ax [orig:111 _30 ] [111])
                (plus:DI (reg/f:DI 0 ax [orig:110 _29 ] [110])
                    (const_int 104 [0x68])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":152:9 210 {*adddi_1}
     (nil))
(insn 55 54 56 2 (set (mem:SI (reg/f:DI 0 ax [orig:111 _30 ] [111]) [2 *_30+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":152:14 75 {*movsi_internal}
     (nil))
(insn 56 55 57 2 (set (reg/f:DI 0 ax [205])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":153:6 74 {*movdi_internal}
     (nil))
(insn 57 56 58 2 (parallel [
            (set (reg/f:DI 0 ax [orig:112 _31 ] [112])
                (plus:DI (reg/f:DI 0 ax [205])
                    (const_int 40 [0x28])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":153:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (const_int 40 [0x28]))
        (nil)))
(insn 58 57 59 2 (set (reg/f:DI 0 ax [orig:113 _32 ] [113])
        (mem/f:DI (reg/f:DI 0 ax [orig:112 _31 ] [112]) [4 *_31+0 S8 A64])) "game_of_life.c":153:6 74 {*movdi_internal}
     (nil))
(insn 59 58 60 2 (parallel [
            (set (reg/f:DI 0 ax [orig:114 _33 ] [114])
                (plus:DI (reg/f:DI 0 ax [orig:113 _32 ] [113])
                    (const_int 52 [0x34])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":153:9 210 {*adddi_1}
     (nil))
(insn 60 59 61 2 (set (mem:SI (reg/f:DI 0 ax [orig:114 _33 ] [114]) [2 *_33+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":153:14 75 {*movsi_internal}
     (nil))
(insn 61 60 62 2 (set (reg/f:DI 0 ax [206])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":154:6 74 {*movdi_internal}
     (nil))
(insn 62 61 63 2 (parallel [
            (set (reg/f:DI 0 ax [orig:115 _34 ] [115])
                (plus:DI (reg/f:DI 0 ax [206])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":154:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 63 62 64 2 (set (reg/f:DI 0 ax [orig:116 _35 ] [116])
        (mem/f:DI (reg/f:DI 0 ax [orig:115 _34 ] [115]) [4 *_34+0 S8 A64])) "game_of_life.c":154:6 74 {*movdi_internal}
     (nil))
(insn 64 63 65 2 (parallel [
            (set (reg/f:DI 0 ax [orig:117 _36 ] [117])
                (plus:DI (reg/f:DI 0 ax [orig:116 _35 ] [116])
                    (const_int 56 [0x38])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":154:9 210 {*adddi_1}
     (nil))
(insn 65 64 66 2 (set (mem:SI (reg/f:DI 0 ax [orig:117 _36 ] [117]) [2 *_36+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":154:14 75 {*movsi_internal}
     (nil))
(insn 66 65 67 2 (set (reg/f:DI 0 ax [207])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":155:6 74 {*movdi_internal}
     (nil))
(insn 67 66 68 2 (parallel [
            (set (reg/f:DI 0 ax [orig:118 _37 ] [118])
                (plus:DI (reg/f:DI 0 ax [207])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":155:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 68 67 69 2 (set (reg/f:DI 0 ax [orig:119 _38 ] [119])
        (mem/f:DI (reg/f:DI 0 ax [orig:118 _37 ] [118]) [4 *_37+0 S8 A64])) "game_of_life.c":155:6 74 {*movdi_internal}
     (nil))
(insn 69 68 70 2 (parallel [
            (set (reg/f:DI 0 ax [orig:120 _39 ] [120])
                (plus:DI (reg/f:DI 0 ax [orig:119 _38 ] [119])
                    (const_int 60 [0x3c])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":155:9 210 {*adddi_1}
     (nil))
(insn 70 69 71 2 (set (mem:SI (reg/f:DI 0 ax [orig:120 _39 ] [120]) [2 *_39+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":155:14 75 {*movsi_internal}
     (nil))
(insn 71 70 72 2 (set (reg/f:DI 0 ax [208])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":156:6 74 {*movdi_internal}
     (nil))
(insn 72 71 73 2 (parallel [
            (set (reg/f:DI 0 ax [orig:121 _40 ] [121])
                (plus:DI (reg/f:DI 0 ax [208])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":156:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 73 72 74 2 (set (reg/f:DI 0 ax [orig:122 _41 ] [122])
        (mem/f:DI (reg/f:DI 0 ax [orig:121 _40 ] [121]) [4 *_40+0 S8 A64])) "game_of_life.c":156:6 74 {*movdi_internal}
     (nil))
(insn 74 73 75 2 (parallel [
            (set (reg/f:DI 0 ax [orig:123 _42 ] [123])
                (plus:DI (reg/f:DI 0 ax [orig:122 _41 ] [122])
                    (const_int 88 [0x58])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":156:9 210 {*adddi_1}
     (nil))
(insn 75 74 76 2 (set (mem:SI (reg/f:DI 0 ax [orig:123 _42 ] [123]) [2 *_42+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":156:14 75 {*movsi_internal}
     (nil))
(insn 76 75 77 2 (set (reg/f:DI 0 ax [209])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":157:6 74 {*movdi_internal}
     (nil))
(insn 77 76 78 2 (parallel [
            (set (reg/f:DI 0 ax [orig:124 _43 ] [124])
                (plus:DI (reg/f:DI 0 ax [209])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":157:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 78 77 79 2 (set (reg/f:DI 0 ax [orig:125 _44 ] [125])
        (mem/f:DI (reg/f:DI 0 ax [orig:124 _43 ] [124]) [4 *_43+0 S8 A64])) "game_of_life.c":157:6 74 {*movdi_internal}
     (nil))
(insn 79 78 80 2 (parallel [
            (set (reg/f:DI 0 ax [orig:126 _45 ] [126])
                (plus:DI (reg/f:DI 0 ax [orig:125 _44 ] [125])
                    (const_int 92 [0x5c])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":157:9 210 {*adddi_1}
     (nil))
(insn 80 79 81 2 (set (mem:SI (reg/f:DI 0 ax [orig:126 _45 ] [126]) [2 *_45+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":157:14 75 {*movsi_internal}
     (nil))
(insn 81 80 82 2 (set (reg/f:DI 0 ax [210])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":158:6 74 {*movdi_internal}
     (nil))
(insn 82 81 83 2 (parallel [
            (set (reg/f:DI 0 ax [orig:127 _46 ] [127])
                (plus:DI (reg/f:DI 0 ax [210])
                    (const_int 40 [0x28])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":158:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (const_int 40 [0x28]))
        (nil)))
(insn 83 82 84 2 (set (reg/f:DI 0 ax [orig:128 _47 ] [128])
        (mem/f:DI (reg/f:DI 0 ax [orig:127 _46 ] [127]) [4 *_46+0 S8 A64])) "game_of_life.c":158:6 74 {*movdi_internal}
     (nil))
(insn 84 83 85 2 (parallel [
            (set (reg/f:DI 0 ax [orig:129 _48 ] [129])
                (plus:DI (reg/f:DI 0 ax [orig:128 _47 ] [128])
                    (const_int 88 [0x58])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":158:9 210 {*adddi_1}
     (nil))
(insn 85 84 86 2 (set (mem:SI (reg/f:DI 0 ax [orig:129 _48 ] [129]) [2 *_48+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":158:14 75 {*movsi_internal}
     (nil))
(insn 86 85 87 2 (set (reg/f:DI 0 ax [211])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":159:6 74 {*movdi_internal}
     (nil))
(insn 87 86 88 2 (parallel [
            (set (reg/f:DI 0 ax [orig:130 _49 ] [130])
                (plus:DI (reg/f:DI 0 ax [211])
                    (const_int 40 [0x28])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":159:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (const_int 40 [0x28]))
        (nil)))
(insn 88 87 89 2 (set (reg/f:DI 0 ax [orig:131 _50 ] [131])
        (mem/f:DI (reg/f:DI 0 ax [orig:130 _49 ] [130]) [4 *_49+0 S8 A64])) "game_of_life.c":159:6 74 {*movdi_internal}
     (nil))
(insn 89 88 90 2 (parallel [
            (set (reg/f:DI 0 ax [orig:132 _51 ] [132])
                (plus:DI (reg/f:DI 0 ax [orig:131 _50 ] [131])
                    (const_int 92 [0x5c])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":159:9 210 {*adddi_1}
     (nil))
(insn 90 89 91 2 (set (mem:SI (reg/f:DI 0 ax [orig:132 _51 ] [132]) [2 *_51+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":159:14 75 {*movsi_internal}
     (nil))
(insn 91 90 92 2 (set (reg/f:DI 0 ax [212])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":160:6 74 {*movdi_internal}
     (nil))
(insn 92 91 93 2 (parallel [
            (set (reg/f:DI 0 ax [orig:133 _52 ] [133])
                (plus:DI (reg/f:DI 0 ax [212])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":160:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (const_int 48 [0x30]))
        (nil)))
(insn 93 92 94 2 (set (reg/f:DI 0 ax [orig:134 _53 ] [134])
        (mem/f:DI (reg/f:DI 0 ax [orig:133 _52 ] [133]) [4 *_52+0 S8 A64])) "game_of_life.c":160:6 74 {*movdi_internal}
     (nil))
(insn 94 93 95 2 (parallel [
            (set (reg/f:DI 0 ax [orig:135 _54 ] [135])
                (plus:DI (reg/f:DI 0 ax [orig:134 _53 ] [134])
                    (const_int 88 [0x58])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":160:9 210 {*adddi_1}
     (nil))
(insn 95 94 96 2 (set (mem:SI (reg/f:DI 0 ax [orig:135 _54 ] [135]) [2 *_54+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":160:14 75 {*movsi_internal}
     (nil))
(insn 96 95 97 2 (set (reg/f:DI 0 ax [213])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":161:6 74 {*movdi_internal}
     (nil))
(insn 97 96 98 2 (parallel [
            (set (reg/f:DI 0 ax [orig:136 _55 ] [136])
                (plus:DI (reg/f:DI 0 ax [213])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":161:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (const_int 48 [0x30]))
        (nil)))
(insn 98 97 99 2 (set (reg/f:DI 0 ax [orig:137 _56 ] [137])
        (mem/f:DI (reg/f:DI 0 ax [orig:136 _55 ] [136]) [4 *_55+0 S8 A64])) "game_of_life.c":161:6 74 {*movdi_internal}
     (nil))
(insn 99 98 100 2 (parallel [
            (set (reg/f:DI 0 ax [orig:138 _57 ] [138])
                (plus:DI (reg/f:DI 0 ax [orig:137 _56 ] [137])
                    (const_int 92 [0x5c])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":161:9 210 {*adddi_1}
     (nil))
(insn 100 99 101 2 (set (mem:SI (reg/f:DI 0 ax [orig:138 _57 ] [138]) [2 *_57+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":161:14 75 {*movsi_internal}
     (nil))
(insn 101 100 102 2 (set (reg/f:DI 0 ax [214])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":162:6 74 {*movdi_internal}
     (nil))
(insn 102 101 103 2 (parallel [
            (set (reg/f:DI 0 ax [orig:139 _58 ] [139])
                (plus:DI (reg/f:DI 0 ax [214])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":162:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (const_int 48 [0x30]))
        (nil)))
(insn 103 102 104 2 (set (reg/f:DI 0 ax [orig:140 _59 ] [140])
        (mem/f:DI (reg/f:DI 0 ax [orig:139 _58 ] [139]) [4 *_58+0 S8 A64])) "game_of_life.c":162:6 74 {*movdi_internal}
     (nil))
(insn 104 103 105 2 (parallel [
            (set (reg/f:DI 0 ax [orig:141 _60 ] [141])
                (plus:DI (reg/f:DI 0 ax [orig:140 _59 ] [140])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":162:9 210 {*adddi_1}
     (nil))
(insn 105 104 106 2 (set (mem:SI (reg/f:DI 0 ax [orig:141 _60 ] [141]) [2 *_60+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":162:14 75 {*movsi_internal}
     (nil))
(insn 106 105 107 2 (set (reg/f:DI 0 ax [215])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":163:6 74 {*movdi_internal}
     (nil))
(insn 107 106 108 2 (parallel [
            (set (reg/f:DI 0 ax [orig:142 _61 ] [142])
                (plus:DI (reg/f:DI 0 ax [215])
                    (const_int 40 [0x28])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":163:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (const_int 40 [0x28]))
        (nil)))
(insn 108 107 109 2 (set (reg/f:DI 0 ax [orig:143 _62 ] [143])
        (mem/f:DI (reg/f:DI 0 ax [orig:142 _61 ] [142]) [4 *_61+0 S8 A64])) "game_of_life.c":163:6 74 {*movdi_internal}
     (nil))
(insn 109 108 110 2 (parallel [
            (set (reg/f:DI 0 ax [orig:144 _63 ] [144])
                (plus:DI (reg/f:DI 0 ax [orig:143 _62 ] [143])
                    (const_int 68 [0x44])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":163:9 210 {*adddi_1}
     (nil))
(insn 110 109 111 2 (set (mem:SI (reg/f:DI 0 ax [orig:144 _63 ] [144]) [2 *_63+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":163:14 75 {*movsi_internal}
     (nil))
(insn 111 110 112 2 (set (reg/f:DI 0 ax [216])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":164:6 74 {*movdi_internal}
     (nil))
(insn 112 111 113 2 (parallel [
            (set (reg/f:DI 0 ax [orig:145 _64 ] [145])
                (plus:DI (reg/f:DI 0 ax [216])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":164:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (const_int 48 [0x30]))
        (nil)))
(insn 113 112 114 2 (set (reg/f:DI 0 ax [orig:146 _65 ] [146])
        (mem/f:DI (reg/f:DI 0 ax [orig:145 _64 ] [145]) [4 *_64+0 S8 A64])) "game_of_life.c":164:6 74 {*movdi_internal}
     (nil))
(insn 114 113 115 2 (parallel [
            (set (reg/f:DI 0 ax [orig:147 _66 ] [147])
                (plus:DI (reg/f:DI 0 ax [orig:146 _65 ] [146])
                    (const_int 72 [0x48])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":164:9 210 {*adddi_1}
     (nil))
(insn 115 114 116 2 (set (mem:SI (reg/f:DI 0 ax [orig:147 _66 ] [147]) [2 *_66+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":164:14 75 {*movsi_internal}
     (nil))
(insn 116 115 117 2 (set (reg/f:DI 0 ax [217])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":165:6 74 {*movdi_internal}
     (nil))
(insn 117 116 118 2 (parallel [
            (set (reg/f:DI 0 ax [orig:148 _67 ] [148])
                (plus:DI (reg/f:DI 0 ax [217])
                    (const_int 56 [0x38])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":165:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (const_int 56 [0x38]))
        (nil)))
(insn 118 117 119 2 (set (reg/f:DI 0 ax [orig:149 _68 ] [149])
        (mem/f:DI (reg/f:DI 0 ax [orig:148 _67 ] [148]) [4 *_67+0 S8 A64])) "game_of_life.c":165:6 74 {*movdi_internal}
     (nil))
(insn 119 118 120 2 (parallel [
            (set (reg/f:DI 0 ax [orig:150 _69 ] [150])
                (plus:DI (reg/f:DI 0 ax [orig:149 _68 ] [149])
                    (const_int 72 [0x48])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":165:9 210 {*adddi_1}
     (nil))
(insn 120 119 121 2 (set (mem:SI (reg/f:DI 0 ax [orig:150 _69 ] [150]) [2 *_69+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":165:14 75 {*movsi_internal}
     (nil))
(insn 121 120 122 2 (set (reg/f:DI 0 ax [218])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":166:6 74 {*movdi_internal}
     (nil))
(insn 122 121 123 2 (parallel [
            (set (reg/f:DI 0 ax [orig:151 _70 ] [151])
                (plus:DI (reg/f:DI 0 ax [218])
                    (const_int 56 [0x38])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":166:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (const_int 56 [0x38]))
        (nil)))
(insn 123 122 124 2 (set (reg/f:DI 0 ax [orig:152 _71 ] [152])
        (mem/f:DI (reg/f:DI 0 ax [orig:151 _70 ] [151]) [4 *_70+0 S8 A64])) "game_of_life.c":166:6 74 {*movdi_internal}
     (nil))
(insn 124 123 125 2 (parallel [
            (set (reg/f:DI 0 ax [orig:153 _72 ] [153])
                (plus:DI (reg/f:DI 0 ax [orig:152 _71 ] [152])
                    (const_int 76 [0x4c])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":166:9 210 {*adddi_1}
     (nil))
(insn 125 124 126 2 (set (mem:SI (reg/f:DI 0 ax [orig:153 _72 ] [153]) [2 *_72+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":166:14 75 {*movsi_internal}
     (nil))
(insn 126 125 127 2 (set (reg/f:DI 0 ax [219])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":167:6 74 {*movdi_internal}
     (nil))
(insn 127 126 128 2 (parallel [
            (set (reg/f:DI 0 ax [orig:154 _73 ] [154])
                (plus:DI (reg/f:DI 0 ax [219])
                    (const_int 56 [0x38])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":167:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (const_int 56 [0x38]))
        (nil)))
(insn 128 127 129 2 (set (reg/f:DI 0 ax [orig:155 _74 ] [155])
        (mem/f:DI (reg/f:DI 0 ax [orig:154 _73 ] [154]) [4 *_73+0 S8 A64])) "game_of_life.c":167:6 74 {*movdi_internal}
     (nil))
(insn 129 128 130 2 (parallel [
            (set (reg/f:DI 0 ax [orig:156 _75 ] [156])
                (plus:DI (reg/f:DI 0 ax [orig:155 _74 ] [155])
                    (const_int 64 [0x40])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":167:9 210 {*adddi_1}
     (nil))
(insn 130 129 131 2 (set (mem:SI (reg/f:DI 0 ax [orig:156 _75 ] [156]) [2 *_75+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":167:14 75 {*movsi_internal}
     (nil))
(insn 131 130 132 2 (set (reg/f:DI 0 ax [220])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":168:6 74 {*movdi_internal}
     (nil))
(insn 132 131 133 2 (parallel [
            (set (reg/f:DI 0 ax [orig:157 _76 ] [157])
                (plus:DI (reg/f:DI 0 ax [220])
                    (const_int 72 [0x48])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":168:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (const_int 72 [0x48]))
        (nil)))
(insn 133 132 134 2 (set (reg/f:DI 0 ax [orig:158 _77 ] [158])
        (mem/f:DI (reg/f:DI 0 ax [orig:157 _76 ] [157]) [4 *_76+0 S8 A64])) "game_of_life.c":168:6 74 {*movdi_internal}
     (nil))
(insn 134 133 135 2 (parallel [
            (set (reg/f:DI 0 ax [orig:159 _78 ] [159])
                (plus:DI (reg/f:DI 0 ax [orig:158 _77 ] [158])
                    (const_int 68 [0x44])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":168:9 210 {*adddi_1}
     (nil))
(insn 135 134 136 2 (set (mem:SI (reg/f:DI 0 ax [orig:159 _78 ] [159]) [2 *_78+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":168:14 75 {*movsi_internal}
     (nil))
(insn 136 135 137 2 (set (reg/f:DI 0 ax [221])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":169:6 74 {*movdi_internal}
     (nil))
(insn 137 136 138 2 (parallel [
            (set (reg/f:DI 0 ax [orig:160 _79 ] [160])
                (plus:DI (reg/f:DI 0 ax [221])
                    (const_int 72 [0x48])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":169:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (const_int 72 [0x48]))
        (nil)))
(insn 138 137 139 2 (set (reg/f:DI 0 ax [orig:161 _80 ] [161])
        (mem/f:DI (reg/f:DI 0 ax [orig:160 _79 ] [160]) [4 *_79+0 S8 A64])) "game_of_life.c":169:6 74 {*movdi_internal}
     (nil))
(insn 139 138 140 2 (parallel [
            (set (reg/f:DI 0 ax [orig:162 _81 ] [162])
                (plus:DI (reg/f:DI 0 ax [orig:161 _80 ] [161])
                    (const_int 52 [0x34])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":169:9 210 {*adddi_1}
     (nil))
(insn 140 139 141 2 (set (mem:SI (reg/f:DI 0 ax [orig:162 _81 ] [162]) [2 *_81+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":169:14 75 {*movsi_internal}
     (nil))
(insn 141 140 142 2 (set (reg/f:DI 0 ax [222])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":170:6 74 {*movdi_internal}
     (nil))
(insn 142 141 143 2 (parallel [
            (set (reg/f:DI 0 ax [orig:163 _82 ] [163])
                (plus:DI (reg/f:DI 0 ax [222])
                    (const_int 80 [0x50])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":170:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (const_int 80 [0x50]))
        (nil)))
(insn 143 142 144 2 (set (reg/f:DI 0 ax [orig:164 _83 ] [164])
        (mem/f:DI (reg/f:DI 0 ax [orig:163 _82 ] [163]) [4 *_82+0 S8 A64])) "game_of_life.c":170:6 74 {*movdi_internal}
     (nil))
(insn 144 143 145 2 (parallel [
            (set (reg/f:DI 0 ax [orig:165 _84 ] [165])
                (plus:DI (reg/f:DI 0 ax [orig:164 _83 ] [164])
                    (const_int 56 [0x38])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":170:10 210 {*adddi_1}
     (nil))
(insn 145 144 146 2 (set (mem:SI (reg/f:DI 0 ax [orig:165 _84 ] [165]) [2 *_84+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":170:15 75 {*movsi_internal}
     (nil))
(insn 146 145 147 2 (set (reg/f:DI 0 ax [223])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":171:6 74 {*movdi_internal}
     (nil))
(insn 147 146 148 2 (parallel [
            (set (reg/f:DI 0 ax [orig:166 _85 ] [166])
                (plus:DI (reg/f:DI 0 ax [223])
                    (const_int 80 [0x50])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":171:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (const_int 80 [0x50]))
        (nil)))
(insn 148 147 149 2 (set (reg/f:DI 0 ax [orig:167 _86 ] [167])
        (mem/f:DI (reg/f:DI 0 ax [orig:166 _85 ] [166]) [4 *_85+0 S8 A64])) "game_of_life.c":171:6 74 {*movdi_internal}
     (nil))
(insn 149 148 150 2 (parallel [
            (set (reg/f:DI 0 ax [orig:168 _87 ] [168])
                (plus:DI (reg/f:DI 0 ax [orig:167 _86 ] [167])
                    (const_int 60 [0x3c])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":171:10 210 {*adddi_1}
     (nil))
(insn 150 149 151 2 (set (mem:SI (reg/f:DI 0 ax [orig:168 _87 ] [168]) [2 *_87+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":171:15 75 {*movsi_internal}
     (nil))
(insn 151 150 152 2 (set (reg/f:DI 0 ax [224])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":172:6 74 {*movdi_internal}
     (nil))
(insn 152 151 153 2 (parallel [
            (set (reg/f:DI 0 ax [orig:169 _88 ] [169])
                (plus:DI (reg/f:DI 0 ax [224])
                    (const_int 64 [0x40])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":172:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (const_int 64 [0x40]))
        (nil)))
(insn 153 152 154 2 (set (reg/f:DI 0 ax [orig:170 _89 ] [170])
        (mem/f:DI (reg/f:DI 0 ax [orig:169 _88 ] [169]) [4 *_88+0 S8 A64])) "game_of_life.c":172:6 74 {*movdi_internal}
     (nil))
(insn 154 153 155 2 (parallel [
            (set (reg/f:DI 0 ax [orig:171 _90 ] [171])
                (plus:DI (reg/f:DI 0 ax [orig:170 _89 ] [170])
                    (const_int 72 [0x48])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":172:9 210 {*adddi_1}
     (nil))
(insn 155 154 156 2 (set (mem:SI (reg/f:DI 0 ax [orig:171 _90 ] [171]) [2 *_90+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":172:14 75 {*movsi_internal}
     (nil))
(insn 156 155 157 2 (set (reg/f:DI 0 ax [225])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":173:6 74 {*movdi_internal}
     (nil))
(insn 157 156 158 2 (parallel [
            (set (reg/f:DI 0 ax [orig:172 _91 ] [172])
                (plus:DI (reg/f:DI 0 ax [225])
                    (const_int 56 [0x38])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":173:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (const_int 56 [0x38]))
        (nil)))
(insn 158 157 159 2 (set (reg/f:DI 0 ax [orig:173 _92 ] [173])
        (mem/f:DI (reg/f:DI 0 ax [orig:172 _91 ] [172]) [4 *_91+0 S8 A64])) "game_of_life.c":173:6 74 {*movdi_internal}
     (nil))
(insn 159 158 160 2 (parallel [
            (set (reg/f:DI 0 ax [orig:174 _93 ] [174])
                (plus:DI (reg/f:DI 0 ax [orig:173 _92 ] [173])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":173:9 210 {*adddi_1}
     (nil))
(insn 160 159 161 2 (set (mem:SI (reg/f:DI 0 ax [orig:174 _93 ] [174]) [2 *_93+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":173:14 75 {*movsi_internal}
     (nil))
(insn 161 160 162 2 (set (reg/f:DI 0 ax [226])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":174:6 74 {*movdi_internal}
     (nil))
(insn 162 161 163 2 (parallel [
            (set (reg/f:DI 0 ax [orig:175 _94 ] [175])
                (plus:DI (reg/f:DI 0 ax [226])
                    (const_int 64 [0x40])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":174:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (const_int 64 [0x40]))
        (nil)))
(insn 163 162 164 2 (set (reg/f:DI 0 ax [orig:176 _95 ] [176])
        (mem/f:DI (reg/f:DI 0 ax [orig:175 _94 ] [175]) [4 *_94+0 S8 A64])) "game_of_life.c":174:6 74 {*movdi_internal}
     (nil))
(insn 164 163 165 2 (parallel [
            (set (reg/f:DI 0 ax [orig:177 _96 ] [177])
                (plus:DI (reg/f:DI 0 ax [orig:176 _95 ] [176])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":174:9 210 {*adddi_1}
     (nil))
(insn 165 164 166 2 (set (mem:SI (reg/f:DI 0 ax [orig:177 _96 ] [177]) [2 *_96+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":174:14 75 {*movsi_internal}
     (nil))
(insn 166 165 167 2 (set (reg/f:DI 0 ax [227])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":175:6 74 {*movdi_internal}
     (nil))
(insn 167 166 168 2 (parallel [
            (set (reg/f:DI 0 ax [orig:178 _97 ] [178])
                (plus:DI (reg/f:DI 0 ax [227])
                    (const_int 72 [0x48])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":175:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (const_int 72 [0x48]))
        (nil)))
(insn 168 167 169 2 (set (reg/f:DI 0 ax [orig:179 _98 ] [179])
        (mem/f:DI (reg/f:DI 0 ax [orig:178 _97 ] [178]) [4 *_97+0 S8 A64])) "game_of_life.c":175:6 74 {*movdi_internal}
     (nil))
(insn 169 168 170 2 (parallel [
            (set (reg/f:DI 0 ax [orig:180 _99 ] [180])
                (plus:DI (reg/f:DI 0 ax [orig:179 _98 ] [179])
                    (const_int 52 [0x34])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":175:9 210 {*adddi_1}
     (nil))
(insn 170 169 171 2 (set (mem:SI (reg/f:DI 0 ax [orig:180 _99 ] [180]) [2 *_99+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":175:14 75 {*movsi_internal}
     (nil))
(insn 171 170 172 2 (set (reg/f:DI 0 ax [228])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":176:6 74 {*movdi_internal}
     (nil))
(insn 172 171 173 2 (parallel [
            (set (reg/f:DI 0 ax [orig:181 _100 ] [181])
                (plus:DI (reg/f:DI 0 ax [228])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":176:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 173 172 174 2 (set (reg/f:DI 0 ax [orig:182 _101 ] [182])
        (mem/f:DI (reg/f:DI 0 ax [orig:181 _100 ] [181]) [4 *_100+0 S8 A64])) "game_of_life.c":176:6 74 {*movdi_internal}
     (nil))
(insn 174 173 175 2 (parallel [
            (set (reg/f:DI 0 ax [orig:183 _102 ] [183])
                (plus:DI (reg/f:DI 0 ax [orig:182 _101 ] [182])
                    (const_int 144 [0x90])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":176:9 210 {*adddi_1}
     (nil))
(insn 175 174 176 2 (set (mem:SI (reg/f:DI 0 ax [orig:183 _102 ] [183]) [2 *_102+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":176:14 75 {*movsi_internal}
     (nil))
(insn 176 175 177 2 (set (reg/f:DI 0 ax [229])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":177:6 74 {*movdi_internal}
     (nil))
(insn 177 176 178 2 (parallel [
            (set (reg/f:DI 0 ax [orig:184 _103 ] [184])
                (plus:DI (reg/f:DI 0 ax [229])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":177:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 178 177 179 2 (set (reg/f:DI 0 ax [orig:185 _104 ] [185])
        (mem/f:DI (reg/f:DI 0 ax [orig:184 _103 ] [184]) [4 *_103+0 S8 A64])) "game_of_life.c":177:6 74 {*movdi_internal}
     (nil))
(insn 179 178 180 2 (parallel [
            (set (reg/f:DI 0 ax [orig:186 _105 ] [186])
                (plus:DI (reg/f:DI 0 ax [orig:185 _104 ] [185])
                    (const_int 148 [0x94])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":177:9 210 {*adddi_1}
     (nil))
(insn 180 179 181 2 (set (mem:SI (reg/f:DI 0 ax [orig:186 _105 ] [186]) [2 *_105+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":177:14 75 {*movsi_internal}
     (nil))
(insn 181 180 182 2 (set (reg/f:DI 0 ax [230])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":178:6 74 {*movdi_internal}
     (nil))
(insn 182 181 183 2 (parallel [
            (set (reg/f:DI 0 ax [orig:187 _106 ] [187])
                (plus:DI (reg/f:DI 0 ax [230])
                    (const_int 40 [0x28])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":178:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (const_int 40 [0x28]))
        (nil)))
(insn 183 182 184 2 (set (reg/f:DI 0 ax [orig:188 _107 ] [188])
        (mem/f:DI (reg/f:DI 0 ax [orig:187 _106 ] [187]) [4 *_106+0 S8 A64])) "game_of_life.c":178:6 74 {*movdi_internal}
     (nil))
(insn 184 183 185 2 (parallel [
            (set (reg/f:DI 0 ax [orig:189 _108 ] [189])
                (plus:DI (reg/f:DI 0 ax [orig:188 _107 ] [188])
                    (const_int 144 [0x90])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":178:9 210 {*adddi_1}
     (nil))
(insn 185 184 186 2 (set (mem:SI (reg/f:DI 0 ax [orig:189 _108 ] [189]) [2 *_108+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":178:14 75 {*movsi_internal}
     (nil))
(insn 186 185 187 2 (set (reg/f:DI 0 ax [231])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":179:6 74 {*movdi_internal}
     (nil))
(insn 187 186 188 2 (parallel [
            (set (reg/f:DI 0 ax [orig:190 _109 ] [190])
                (plus:DI (reg/f:DI 0 ax [231])
                    (const_int 40 [0x28])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":179:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (const_int 40 [0x28]))
        (nil)))
(insn 188 187 189 2 (set (reg/f:DI 0 ax [orig:191 _110 ] [191])
        (mem/f:DI (reg/f:DI 0 ax [orig:190 _109 ] [190]) [4 *_109+0 S8 A64])) "game_of_life.c":179:6 74 {*movdi_internal}
     (nil))
(insn 189 188 190 2 (parallel [
            (set (reg/f:DI 0 ax [orig:192 _111 ] [192])
                (plus:DI (reg/f:DI 0 ax [orig:191 _110 ] [191])
                    (const_int 148 [0x94])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":179:9 210 {*adddi_1}
     (nil))
(insn 190 189 191 2 (set (mem:SI (reg/f:DI 0 ax [orig:192 _111 ] [192]) [2 *_111+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":179:14 75 {*movsi_internal}
     (nil))
(insn 191 190 199 2 (set (reg/f:DI 0 ax [orig:193 _151 ] [193])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":181:12 74 {*movdi_internal}
     (nil))
(insn 199 191 201 2 (use (reg/i:DI 0 ax)) "game_of_life.c":182:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 201 199 0 NOTE_INSN_DELETED)

;; Function dynamic_array_init_life5 (dynamic_array_init_life5, funcdef_no=15, decl_uid=4956, cgraph_uid=16, symbol_order=15)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 11:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=283 from oldreg=192, assigning class GENERAL_REGS to r283
   11: {r283:SI=r283:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  266: r283:SI=r191:SI
    Inserting insn reload after:
  267: r192:SI=r283:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 12
	 Choosing alt 0 in insn 12:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 18
	 Choosing alt 0 in insn 18:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 23:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=284 from oldreg=197, assigning class GENERAL_REGS to r284
   23: {r284:SI=r284:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  268: r284:SI=r196:SI
    Inserting insn reload after:
  269: r197:SI=r284:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 24
	 Choosing alt 0 in insn 24:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 29
	 Choosing alt 0 in insn 29:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 34:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=285 from oldreg=201, assigning class GENERAL_REGS to r285
   34: {r285:SI=r285:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  270: r285:SI=r200:SI
    Inserting insn reload after:
  271: r201:SI=r285:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 35
	 Choosing alt 0 in insn 35:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 39:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 41:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 42
	 Choosing alt 0 in insn 42:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 47:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=286 from oldreg=206, assigning class GENERAL_REGS to r286
   47: {r286:SI=r286:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  272: r286:SI=r205:SI
    Inserting insn reload after:
  273: r206:SI=r286:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 48
	 Choosing alt 0 in insn 48:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 53:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 54
	 Choosing alt 0 in insn 54:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 59:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=287 from oldreg=210, assigning class GENERAL_REGS to r287
   59: {r287:SI=r287:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  274: r287:SI=r209:SI
    Inserting insn reload after:
  275: r210:SI=r287:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 60
	 Choosing alt 0 in insn 60:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 64:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 65:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 67
	 Choosing alt 0 in insn 67:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 68:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 72:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=288 from oldreg=215, assigning class GENERAL_REGS to r288
   72: {r288:SI=r288:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  276: r288:SI=r214:SI
    Inserting insn reload after:
  277: r215:SI=r288:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 73
	 Choosing alt 0 in insn 73:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 77:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 79
	 Choosing alt 0 in insn 79:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 80:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 84:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=289 from oldreg=219, assigning class GENERAL_REGS to r289
   84: {r289:SI=r289:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  278: r289:SI=r218:SI
    Inserting insn reload after:
  279: r219:SI=r289:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 85
	 Choosing alt 0 in insn 85:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 89:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 90:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 91:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 92
	 Choosing alt 0 in insn 92:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 93:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 97:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=290 from oldreg=224, assigning class GENERAL_REGS to r290
   97: {r290:SI=r290:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  280: r290:SI=r223:SI
    Inserting insn reload after:
  281: r224:SI=r290:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 98
	 Choosing alt 0 in insn 98:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 103
	 Choosing alt 0 in insn 103:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 104:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 108:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=291 from oldreg=228, assigning class GENERAL_REGS to r291
  108: {r291:SI=r291:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  282: r291:SI=r227:SI
    Inserting insn reload after:
  283: r228:SI=r291:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 109
	 Choosing alt 0 in insn 109:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 113:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 114:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 115:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 116
	 Choosing alt 0 in insn 116:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 117:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 121:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=292 from oldreg=233, assigning class GENERAL_REGS to r292
  121: {r292:SI=r292:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  284: r292:SI=r232:SI
    Inserting insn reload after:
  285: r233:SI=r292:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 122
	 Choosing alt 0 in insn 122:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 126:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 128
	 Choosing alt 0 in insn 128:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 129:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 133:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=293 from oldreg=237, assigning class GENERAL_REGS to r293
  133: {r293:SI=r293:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  286: r293:SI=r236:SI
    Inserting insn reload after:
  287: r237:SI=r293:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 134
	 Choosing alt 0 in insn 134:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 138:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 139:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 140:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 141
	 Choosing alt 0 in insn 141:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 142:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 146:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=294 from oldreg=242, assigning class GENERAL_REGS to r294
  146: {r294:SI=r294:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  288: r294:SI=r241:SI
    Inserting insn reload after:
  289: r242:SI=r294:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 147
	 Choosing alt 0 in insn 147:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 151:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 153
	 Choosing alt 0 in insn 153:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 154:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 158:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=295 from oldreg=246, assigning class GENERAL_REGS to r295
  158: {r295:SI=r295:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  290: r295:SI=r245:SI
    Inserting insn reload after:
  291: r246:SI=r295:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 159
	 Choosing alt 0 in insn 159:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 162:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 163:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 164:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 165:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 166
	 Choosing alt 0 in insn 166:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 167:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 171:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=296 from oldreg=251, assigning class GENERAL_REGS to r296
  171: {r296:SI=r296:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  292: r296:SI=r250:SI
    Inserting insn reload after:
  293: r251:SI=r296:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 172
	 Choosing alt 0 in insn 172:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 173:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 175:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 176:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 177:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 178
	 Choosing alt 0 in insn 178:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 179:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 183:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=297 from oldreg=255, assigning class GENERAL_REGS to r297
  183: {r297:SI=r297:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  294: r297:SI=r254:SI
    Inserting insn reload after:
  295: r255:SI=r297:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 184
	 Choosing alt 0 in insn 184:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 185:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 187:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 188:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 189:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 190:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 191
	 Choosing alt 0 in insn 191:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 192:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 193:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 196:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=298 from oldreg=260, assigning class GENERAL_REGS to r298
  196: {r298:SI=r298:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  296: r298:SI=r259:SI
    Inserting insn reload after:
  297: r260:SI=r298:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 197
	 Choosing alt 0 in insn 197:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 198:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 200:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 201:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 202:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 203
	 Choosing alt 0 in insn 203:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 204:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 205:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 208:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=299 from oldreg=264, assigning class GENERAL_REGS to r299
  208: {r299:SI=r299:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  298: r299:SI=r263:SI
    Inserting insn reload after:
  299: r264:SI=r299:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 209
	 Choosing alt 0 in insn 209:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 210:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 212:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 213:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 214:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 215:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 216
	 Choosing alt 0 in insn 216:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 217:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 218:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 221:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=300 from oldreg=269, assigning class GENERAL_REGS to r300
  221: {r300:SI=r300:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  300: r300:SI=r268:SI
    Inserting insn reload after:
  301: r269:SI=r300:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 222
	 Choosing alt 0 in insn 222:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 223:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 225:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 226:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 227:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 228
	 Choosing alt 0 in insn 228:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 229:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 230:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 233:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=301 from oldreg=273, assigning class GENERAL_REGS to r301
  233: {r301:SI=r301:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  302: r301:SI=r272:SI
    Inserting insn reload after:
  303: r273:SI=r301:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 234
	 Choosing alt 0 in insn 234:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 235:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 237:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 238:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 239:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 240:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 241
	 Choosing alt 0 in insn 241:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 242:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 243:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 246:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=302 from oldreg=278, assigning class GENERAL_REGS to r302
  246: {r302:SI=r302:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  304: r302:SI=r277:SI
    Inserting insn reload after:
  305: r278:SI=r302:SI

          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 247
	 Choosing alt 0 in insn 247:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 248:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 250:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 251:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 252:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 253
	 Choosing alt 0 in insn 253:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 254:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 255:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 263: point = 0, n_alt = -1
   Insn 262: point = 0, n_alt = -2
   Insn 258: point = 1, n_alt = -2
   Insn 255: point = 3, n_alt = 3
   Insn 254: point = 4, n_alt = 1
   Insn 253: point = 5, n_alt = 0
   Insn 252: point = 7, n_alt = 0
   Insn 251: point = 9, n_alt = 0
   Insn 250: point = 11, n_alt = 0
   Insn 249: point = 13, n_alt = -2
   Insn 248: point = 15, n_alt = 0
   Insn 247: point = 17, n_alt = 0
   Insn 305: point = 19, n_alt = -2
	Hard reg 2 is preferable by r302 with profit 1000
   Insn 246: point = 21, n_alt = 0
   Insn 304: point = 22, n_alt = -2
	Hard reg 2 is preferable by r302 with profit 1000
	Hard reg 0 is preferable by r302 with profit 1000
   Insn 243: point = 23, n_alt = 0
   Insn 242: point = 24, n_alt = 3
   Insn 241: point = 26, n_alt = 0
   Insn 240: point = 28, n_alt = 3
   Insn 239: point = 29, n_alt = 1
   Insn 238: point = 31, n_alt = 0
   Insn 237: point = 33, n_alt = 0
   Insn 236: point = 35, n_alt = -2
   Insn 235: point = 37, n_alt = 0
   Insn 234: point = 39, n_alt = 0
   Insn 303: point = 41, n_alt = -2
	Hard reg 1 is preferable by r301 with profit 1000
   Insn 233: point = 43, n_alt = 0
   Insn 302: point = 44, n_alt = -2
	Hard reg 1 is preferable by r301 with profit 1000
	Hard reg 0 is preferable by r301 with profit 1000
   Insn 230: point = 45, n_alt = 0
   Insn 229: point = 46, n_alt = 1
   Insn 228: point = 47, n_alt = 0
   Insn 227: point = 49, n_alt = 0
   Insn 226: point = 51, n_alt = 0
   Insn 225: point = 53, n_alt = 0
   Insn 224: point = 55, n_alt = -2
   Insn 223: point = 57, n_alt = 0
   Insn 222: point = 59, n_alt = 0
   Insn 301: point = 61, n_alt = -2
	Hard reg 2 is preferable by r300 with profit 1000
   Insn 221: point = 63, n_alt = 0
   Insn 300: point = 64, n_alt = -2
	Hard reg 2 is preferable by r300 with profit 1000
	Hard reg 0 is preferable by r300 with profit 1000
   Insn 218: point = 65, n_alt = 0
   Insn 217: point = 66, n_alt = 3
   Insn 216: point = 68, n_alt = 0
   Insn 215: point = 70, n_alt = 3
   Insn 214: point = 71, n_alt = 1
   Insn 213: point = 73, n_alt = 0
   Insn 212: point = 75, n_alt = 0
   Insn 211: point = 77, n_alt = -2
   Insn 210: point = 79, n_alt = 0
   Insn 209: point = 81, n_alt = 0
   Insn 299: point = 83, n_alt = -2
	Hard reg 1 is preferable by r299 with profit 1000
   Insn 208: point = 85, n_alt = 0
   Insn 298: point = 86, n_alt = -2
	Hard reg 1 is preferable by r299 with profit 1000
	Hard reg 0 is preferable by r299 with profit 1000
   Insn 205: point = 87, n_alt = 0
   Insn 204: point = 88, n_alt = 1
   Insn 203: point = 89, n_alt = 0
   Insn 202: point = 91, n_alt = 0
   Insn 201: point = 93, n_alt = 0
   Insn 200: point = 95, n_alt = 0
   Insn 199: point = 97, n_alt = -2
   Insn 198: point = 99, n_alt = 0
   Insn 197: point = 101, n_alt = 0
   Insn 297: point = 103, n_alt = -2
	Hard reg 2 is preferable by r298 with profit 1000
   Insn 196: point = 105, n_alt = 0
   Insn 296: point = 106, n_alt = -2
	Hard reg 2 is preferable by r298 with profit 1000
	Hard reg 0 is preferable by r298 with profit 1000
   Insn 193: point = 107, n_alt = 0
   Insn 192: point = 108, n_alt = 3
   Insn 191: point = 110, n_alt = 0
   Insn 190: point = 112, n_alt = 3
   Insn 189: point = 113, n_alt = 1
   Insn 188: point = 115, n_alt = 0
   Insn 187: point = 117, n_alt = 0
   Insn 186: point = 119, n_alt = -2
   Insn 185: point = 121, n_alt = 0
   Insn 184: point = 123, n_alt = 0
   Insn 295: point = 125, n_alt = -2
	Hard reg 1 is preferable by r297 with profit 1000
   Insn 183: point = 127, n_alt = 0
   Insn 294: point = 128, n_alt = -2
	Hard reg 1 is preferable by r297 with profit 1000
	Hard reg 0 is preferable by r297 with profit 1000
   Insn 180: point = 129, n_alt = 0
   Insn 179: point = 130, n_alt = 1
   Insn 178: point = 131, n_alt = 0
   Insn 177: point = 133, n_alt = 0
   Insn 176: point = 135, n_alt = 0
   Insn 175: point = 137, n_alt = 0
   Insn 174: point = 139, n_alt = -2
   Insn 173: point = 141, n_alt = 0
   Insn 172: point = 143, n_alt = 0
   Insn 293: point = 145, n_alt = -2
	Hard reg 2 is preferable by r296 with profit 1000
   Insn 171: point = 147, n_alt = 0
   Insn 292: point = 148, n_alt = -2
	Hard reg 2 is preferable by r296 with profit 1000
	Hard reg 0 is preferable by r296 with profit 1000
   Insn 168: point = 149, n_alt = 0
   Insn 167: point = 150, n_alt = 3
   Insn 166: point = 152, n_alt = 0
   Insn 165: point = 154, n_alt = 3
   Insn 164: point = 155, n_alt = 1
   Insn 163: point = 157, n_alt = 0
   Insn 162: point = 159, n_alt = 0
   Insn 161: point = 161, n_alt = -2
   Insn 160: point = 163, n_alt = 0
   Insn 159: point = 165, n_alt = 0
   Insn 291: point = 167, n_alt = -2
	Hard reg 1 is preferable by r295 with profit 1000
   Insn 158: point = 169, n_alt = 0
   Insn 290: point = 170, n_alt = -2
	Hard reg 1 is preferable by r295 with profit 1000
	Hard reg 0 is preferable by r295 with profit 1000
   Insn 155: point = 171, n_alt = 0
   Insn 154: point = 172, n_alt = 1
   Insn 153: point = 173, n_alt = 0
   Insn 152: point = 175, n_alt = 0
   Insn 151: point = 177, n_alt = 0
   Insn 150: point = 179, n_alt = 0
   Insn 149: point = 181, n_alt = -2
   Insn 148: point = 183, n_alt = 0
   Insn 147: point = 185, n_alt = 0
   Insn 289: point = 187, n_alt = -2
	Hard reg 2 is preferable by r294 with profit 1000
   Insn 146: point = 189, n_alt = 0
   Insn 288: point = 190, n_alt = -2
	Hard reg 2 is preferable by r294 with profit 1000
	Hard reg 0 is preferable by r294 with profit 1000
   Insn 143: point = 191, n_alt = 0
   Insn 142: point = 192, n_alt = 3
   Insn 141: point = 194, n_alt = 0
   Insn 140: point = 196, n_alt = 3
   Insn 139: point = 197, n_alt = 1
   Insn 138: point = 199, n_alt = 0
   Insn 137: point = 201, n_alt = 0
   Insn 136: point = 203, n_alt = -2
   Insn 135: point = 205, n_alt = 0
   Insn 134: point = 207, n_alt = 0
   Insn 287: point = 209, n_alt = -2
	Hard reg 1 is preferable by r293 with profit 1000
   Insn 133: point = 211, n_alt = 0
   Insn 286: point = 212, n_alt = -2
	Hard reg 1 is preferable by r293 with profit 1000
	Hard reg 0 is preferable by r293 with profit 1000
   Insn 130: point = 213, n_alt = 0
   Insn 129: point = 214, n_alt = 1
   Insn 128: point = 215, n_alt = 0
   Insn 127: point = 217, n_alt = 0
   Insn 126: point = 219, n_alt = 0
   Insn 125: point = 221, n_alt = 0
   Insn 124: point = 223, n_alt = -2
   Insn 123: point = 225, n_alt = 0
   Insn 122: point = 227, n_alt = 0
   Insn 285: point = 229, n_alt = -2
	Hard reg 2 is preferable by r292 with profit 1000
   Insn 121: point = 231, n_alt = 0
   Insn 284: point = 232, n_alt = -2
	Hard reg 2 is preferable by r292 with profit 1000
	Hard reg 0 is preferable by r292 with profit 1000
   Insn 118: point = 233, n_alt = 0
   Insn 117: point = 234, n_alt = 3
   Insn 116: point = 236, n_alt = 0
   Insn 115: point = 238, n_alt = 3
   Insn 114: point = 239, n_alt = 1
   Insn 113: point = 241, n_alt = 0
   Insn 112: point = 243, n_alt = 0
   Insn 111: point = 245, n_alt = -2
   Insn 110: point = 247, n_alt = 0
   Insn 109: point = 249, n_alt = 0
   Insn 283: point = 251, n_alt = -2
	Hard reg 1 is preferable by r291 with profit 1000
   Insn 108: point = 253, n_alt = 0
   Insn 282: point = 254, n_alt = -2
	Hard reg 1 is preferable by r291 with profit 1000
	Hard reg 0 is preferable by r291 with profit 1000
   Insn 105: point = 255, n_alt = 0
   Insn 104: point = 256, n_alt = 1
   Insn 103: point = 257, n_alt = 0
   Insn 102: point = 259, n_alt = 0
   Insn 101: point = 261, n_alt = 0
   Insn 100: point = 263, n_alt = -2
   Insn 99: point = 265, n_alt = 0
   Insn 98: point = 267, n_alt = 0
   Insn 281: point = 269, n_alt = -2
	Hard reg 2 is preferable by r290 with profit 1000
   Insn 97: point = 271, n_alt = 0
   Insn 280: point = 272, n_alt = -2
	Hard reg 2 is preferable by r290 with profit 1000
	Hard reg 0 is preferable by r290 with profit 1000
   Insn 94: point = 273, n_alt = 0
   Insn 93: point = 274, n_alt = 3
   Insn 92: point = 276, n_alt = 0
   Insn 91: point = 278, n_alt = 3
   Insn 90: point = 279, n_alt = 1
   Insn 89: point = 281, n_alt = 0
   Insn 88: point = 283, n_alt = 0
   Insn 87: point = 285, n_alt = -2
   Insn 86: point = 287, n_alt = 0
   Insn 85: point = 289, n_alt = 0
   Insn 279: point = 291, n_alt = -2
	Hard reg 1 is preferable by r289 with profit 1000
   Insn 84: point = 293, n_alt = 0
   Insn 278: point = 294, n_alt = -2
	Hard reg 1 is preferable by r289 with profit 1000
	Hard reg 0 is preferable by r289 with profit 1000
   Insn 81: point = 295, n_alt = 0
   Insn 80: point = 296, n_alt = 1
   Insn 79: point = 297, n_alt = 0
   Insn 78: point = 299, n_alt = 0
   Insn 77: point = 301, n_alt = 0
   Insn 76: point = 303, n_alt = 0
   Insn 75: point = 305, n_alt = -2
   Insn 74: point = 307, n_alt = 0
   Insn 73: point = 309, n_alt = 0
   Insn 277: point = 311, n_alt = -2
	Hard reg 2 is preferable by r288 with profit 1000
   Insn 72: point = 313, n_alt = 0
   Insn 276: point = 314, n_alt = -2
	Hard reg 2 is preferable by r288 with profit 1000
	Hard reg 0 is preferable by r288 with profit 1000
   Insn 69: point = 315, n_alt = 0
   Insn 68: point = 316, n_alt = 3
   Insn 67: point = 318, n_alt = 0
   Insn 66: point = 320, n_alt = 3
   Insn 65: point = 321, n_alt = 1
   Insn 64: point = 323, n_alt = 0
   Insn 63: point = 325, n_alt = 0
   Insn 62: point = 327, n_alt = -2
   Insn 61: point = 329, n_alt = 0
   Insn 60: point = 331, n_alt = 0
   Insn 275: point = 333, n_alt = -2
	Hard reg 1 is preferable by r287 with profit 1000
   Insn 59: point = 335, n_alt = 0
   Insn 274: point = 336, n_alt = -2
	Hard reg 1 is preferable by r287 with profit 1000
	Hard reg 0 is preferable by r287 with profit 1000
   Insn 56: point = 337, n_alt = 0
   Insn 55: point = 338, n_alt = 1
   Insn 54: point = 339, n_alt = 0
   Insn 53: point = 341, n_alt = 0
   Insn 52: point = 343, n_alt = 0
   Insn 51: point = 345, n_alt = 0
   Insn 50: point = 347, n_alt = -2
   Insn 49: point = 349, n_alt = 0
   Insn 48: point = 351, n_alt = 0
   Insn 273: point = 353, n_alt = -2
	Hard reg 2 is preferable by r286 with profit 1000
   Insn 47: point = 355, n_alt = 0
   Insn 272: point = 356, n_alt = -2
	Hard reg 2 is preferable by r286 with profit 1000
	Hard reg 0 is preferable by r286 with profit 1000
   Insn 44: point = 357, n_alt = 0
   Insn 43: point = 358, n_alt = 3
   Insn 42: point = 360, n_alt = 0
   Insn 41: point = 362, n_alt = 3
   Insn 40: point = 363, n_alt = 1
   Insn 39: point = 365, n_alt = 0
   Insn 38: point = 367, n_alt = 0
   Insn 37: point = 369, n_alt = -2
   Insn 36: point = 371, n_alt = 0
   Insn 35: point = 373, n_alt = 0
   Insn 271: point = 375, n_alt = -2
	Hard reg 1 is preferable by r285 with profit 1000
   Insn 34: point = 377, n_alt = 0
   Insn 270: point = 378, n_alt = -2
	Hard reg 1 is preferable by r285 with profit 1000
	Hard reg 0 is preferable by r285 with profit 1000
   Insn 31: point = 379, n_alt = 0
   Insn 30: point = 380, n_alt = 1
   Insn 29: point = 381, n_alt = 0
   Insn 28: point = 383, n_alt = 0
   Insn 27: point = 385, n_alt = 0
   Insn 26: point = 387, n_alt = -2
   Insn 25: point = 389, n_alt = 0
   Insn 24: point = 391, n_alt = 0
   Insn 269: point = 393, n_alt = -2
	Hard reg 2 is preferable by r284 with profit 1000
   Insn 23: point = 395, n_alt = 0
   Insn 268: point = 396, n_alt = -2
	Hard reg 2 is preferable by r284 with profit 1000
	Hard reg 0 is preferable by r284 with profit 1000
   Insn 20: point = 397, n_alt = 0
   Insn 19: point = 398, n_alt = 3
   Insn 18: point = 400, n_alt = 0
   Insn 17: point = 402, n_alt = 3
   Insn 16: point = 403, n_alt = 1
   Insn 15: point = 405, n_alt = 0
   Insn 14: point = 407, n_alt = -2
   Insn 13: point = 409, n_alt = 0
   Insn 12: point = 411, n_alt = 0
   Insn 267: point = 413, n_alt = -2
	Hard reg 1 is preferable by r283 with profit 1000
   Insn 11: point = 415, n_alt = 0
   Insn 266: point = 416, n_alt = -2
	Hard reg 1 is preferable by r283 with profit 1000
	Hard reg 0 is preferable by r283 with profit 1000
   Insn 8: point = 417, n_alt = 0
   Insn 4: point = 418, n_alt = 1
   Insn 3: point = 418, n_alt = 1
   Insn 2: point = 418, n_alt = 5
 r82: [406..407]
 r83: [404..405]
 r84: [401..403]
 r85: [399..400]
 r86: [382..398]
 r87: [386..387]
 r88: [384..385]
 r89: [382..383]
 r90: [380..381]
 r91: [368..369]
 r92: [366..367]
 r93: [364..365]
 r94: [361..363]
 r95: [359..360]
 r96: [340..358]
 r97: [346..347]
 r98: [344..345]
 r99: [342..343]
 r100: [340..341]
 r101: [338..339]
 r102: [326..327]
 r103: [324..325]
 r104: [322..323]
 r105: [319..321]
 r106: [317..318]
 r107: [298..316]
 r108: [304..305]
 r109: [302..303]
 r110: [300..301]
 r111: [298..299]
 r112: [296..297]
 r113: [284..285]
 r114: [282..283]
 r115: [280..281]
 r116: [277..279]
 r117: [275..276]
 r118: [258..274]
 r119: [262..263]
 r120: [260..261]
 r121: [258..259]
 r122: [256..257]
 r123: [244..245]
 r124: [242..243]
 r125: [240..241]
 r126: [237..239]
 r127: [235..236]
 r128: [216..234]
 r129: [222..223]
 r130: [220..221]
 r131: [218..219]
 r132: [216..217]
 r133: [214..215]
 r134: [202..203]
 r135: [200..201]
 r136: [198..199]
 r137: [195..197]
 r138: [193..194]
 r139: [174..192]
 r140: [180..181]
 r141: [178..179]
 r142: [176..177]
 r143: [174..175]
 r144: [172..173]
 r145: [160..161]
 r146: [158..159]
 r147: [156..157]
 r148: [153..155]
 r149: [151..152]
 r150: [132..150]
 r151: [138..139]
 r152: [136..137]
 r153: [134..135]
 r154: [132..133]
 r155: [130..131]
 r156: [118..119]
 r157: [116..117]
 r158: [114..115]
 r159: [111..113]
 r160: [109..110]
 r161: [90..108]
 r162: [96..97]
 r163: [94..95]
 r164: [92..93]
 r165: [90..91]
 r166: [88..89]
 r167: [76..77]
 r168: [74..75]
 r169: [72..73]
 r170: [69..71]
 r171: [67..68]
 r172: [48..66]
 r173: [54..55]
 r174: [52..53]
 r175: [50..51]
 r176: [48..49]
 r177: [46..47]
 r178: [34..35]
 r179: [32..33]
 r180: [30..31]
 r181: [27..29]
 r182: [25..26]
 r183: [6..24]
 r184: [12..13]
 r185: [10..11]
 r186: [8..9]
 r187: [6..7]
 r188: [4..5]
 r189: [2..3]
 r190: [0..1]
 r191: [412..417]
 r192: [412..413]
 r193: [410..411]
 r194: [408..409]
 r195: [401..402]
 r196: [392..397]
 r197: [392..393]
 r198: [390..391]
 r199: [388..389]
 r200: [374..379]
 r201: [374..375]
 r202: [372..373]
 r203: [370..371]
 r204: [361..362]
 r205: [352..357]
 r206: [352..353]
 r207: [350..351]
 r208: [348..349]
 r209: [332..337]
 r210: [332..333]
 r211: [330..331]
 r212: [328..329]
 r213: [319..320]
 r214: [310..315]
 r215: [310..311]
 r216: [308..309]
 r217: [306..307]
 r218: [290..295]
 r219: [290..291]
 r220: [288..289]
 r221: [286..287]
 r222: [277..278]
 r223: [268..273]
 r224: [268..269]
 r225: [266..267]
 r226: [264..265]
 r227: [250..255]
 r228: [250..251]
 r229: [248..249]
 r230: [246..247]
 r231: [237..238]
 r232: [228..233]
 r233: [228..229]
 r234: [226..227]
 r235: [224..225]
 r236: [208..213]
 r237: [208..209]
 r238: [206..207]
 r239: [204..205]
 r240: [195..196]
 r241: [186..191]
 r242: [186..187]
 r243: [184..185]
 r244: [182..183]
 r245: [166..171]
 r246: [166..167]
 r247: [164..165]
 r248: [162..163]
 r249: [153..154]
 r250: [144..149]
 r251: [144..145]
 r252: [142..143]
 r253: [140..141]
 r254: [124..129]
 r255: [124..125]
 r256: [122..123]
 r257: [120..121]
 r258: [111..112]
 r259: [102..107]
 r260: [102..103]
 r261: [100..101]
 r262: [98..99]
 r263: [82..87]
 r264: [82..83]
 r265: [80..81]
 r266: [78..79]
 r267: [69..70]
 r268: [60..65]
 r269: [60..61]
 r270: [58..59]
 r271: [56..57]
 r272: [40..45]
 r273: [40..41]
 r274: [38..39]
 r275: [36..37]
 r276: [27..28]
 r277: [18..23]
 r278: [18..19]
 r279: [16..17]
 r280: [14..15]
 r283: [414..416]
 r284: [394..396]
 r285: [376..378]
 r286: [354..356]
 r287: [334..336]
 r288: [312..314]
 r289: [292..294]
 r290: [270..272]
 r291: [252..254]
 r292: [230..232]
 r293: [210..212]
 r294: [188..190]
 r295: [168..170]
 r296: [146..148]
 r297: [126..128]
 r298: [104..106]
 r299: [84..86]
 r300: [62..64]
 r301: [42..44]
 r302: [20..22]
Compressing live ranges: from 418 to 358 - 85%
Ranges after the compression:
 r82: [348..349]
 r83: [346..347]
 r84: [344..345]
 r85: [342..343]
 r86: [328..341]
 r87: [332..333]
 r88: [330..331]
 r89: [328..329]
 r90: [326..327]
 r91: [316..317]
 r92: [314..315]
 r93: [312..313]
 r94: [310..311]
 r95: [308..309]
 r96: [292..307]
 r97: [298..299]
 r98: [296..297]
 r99: [294..295]
 r100: [292..293]
 r101: [290..291]
 r102: [280..281]
 r103: [278..279]
 r104: [276..277]
 r105: [274..275]
 r106: [272..273]
 r107: [256..271]
 r108: [262..263]
 r109: [260..261]
 r110: [258..259]
 r111: [256..257]
 r112: [254..255]
 r113: [244..245]
 r114: [242..243]
 r115: [240..241]
 r116: [238..239]
 r117: [236..237]
 r118: [222..235]
 r119: [226..227]
 r120: [224..225]
 r121: [222..223]
 r122: [220..221]
 r123: [210..211]
 r124: [208..209]
 r125: [206..207]
 r126: [204..205]
 r127: [202..203]
 r128: [186..201]
 r129: [192..193]
 r130: [190..191]
 r131: [188..189]
 r132: [186..187]
 r133: [184..185]
 r134: [174..175]
 r135: [172..173]
 r136: [170..171]
 r137: [168..169]
 r138: [166..167]
 r139: [150..165]
 r140: [156..157]
 r141: [154..155]
 r142: [152..153]
 r143: [150..151]
 r144: [148..149]
 r145: [138..139]
 r146: [136..137]
 r147: [134..135]
 r148: [132..133]
 r149: [130..131]
 r150: [114..129]
 r151: [120..121]
 r152: [118..119]
 r153: [116..117]
 r154: [114..115]
 r155: [112..113]
 r156: [102..103]
 r157: [100..101]
 r158: [98..99]
 r159: [96..97]
 r160: [94..95]
 r161: [78..93]
 r162: [84..85]
 r163: [82..83]
 r164: [80..81]
 r165: [78..79]
 r166: [76..77]
 r167: [66..67]
 r168: [64..65]
 r169: [62..63]
 r170: [60..61]
 r171: [58..59]
 r172: [42..57]
 r173: [48..49]
 r174: [46..47]
 r175: [44..45]
 r176: [42..43]
 r177: [40..41]
 r178: [30..31]
 r179: [28..29]
 r180: [26..27]
 r181: [24..25]
 r182: [22..23]
 r183: [6..21]
 r184: [12..13]
 r185: [10..11]
 r186: [8..9]
 r187: [6..7]
 r188: [4..5]
 r189: [2..3]
 r190: [0..1]
 r191: [354..357]
 r192: [354..355]
 r193: [352..353]
 r194: [350..351]
 r195: [344..345]
 r196: [338..341]
 r197: [338..339]
 r198: [336..337]
 r199: [334..335]
 r200: [322..325]
 r201: [322..323]
 r202: [320..321]
 r203: [318..319]
 r204: [310..311]
 r205: [304..307]
 r206: [304..305]
 r207: [302..303]
 r208: [300..301]
 r209: [286..289]
 r210: [286..287]
 r211: [284..285]
 r212: [282..283]
 r213: [274..275]
 r214: [268..271]
 r215: [268..269]
 r216: [266..267]
 r217: [264..265]
 r218: [250..253]
 r219: [250..251]
 r220: [248..249]
 r221: [246..247]
 r222: [238..239]
 r223: [232..235]
 r224: [232..233]
 r225: [230..231]
 r226: [228..229]
 r227: [216..219]
 r228: [216..217]
 r229: [214..215]
 r230: [212..213]
 r231: [204..205]
 r232: [198..201]
 r233: [198..199]
 r234: [196..197]
 r235: [194..195]
 r236: [180..183]
 r237: [180..181]
 r238: [178..179]
 r239: [176..177]
 r240: [168..169]
 r241: [162..165]
 r242: [162..163]
 r243: [160..161]
 r244: [158..159]
 r245: [144..147]
 r246: [144..145]
 r247: [142..143]
 r248: [140..141]
 r249: [132..133]
 r250: [126..129]
 r251: [126..127]
 r252: [124..125]
 r253: [122..123]
 r254: [108..111]
 r255: [108..109]
 r256: [106..107]
 r257: [104..105]
 r258: [96..97]
 r259: [90..93]
 r260: [90..91]
 r261: [88..89]
 r262: [86..87]
 r263: [72..75]
 r264: [72..73]
 r265: [70..71]
 r266: [68..69]
 r267: [60..61]
 r268: [54..57]
 r269: [54..55]
 r270: [52..53]
 r271: [50..51]
 r272: [36..39]
 r273: [36..37]
 r274: [34..35]
 r275: [32..33]
 r276: [24..25]
 r277: [18..21]
 r278: [18..19]
 r279: [16..17]
 r280: [14..15]
 r283: [356..357]
 r284: [340..341]
 r285: [324..325]
 r286: [306..307]
 r287: [288..289]
 r288: [270..271]
 r289: [252..253]
 r290: [234..235]
 r291: [218..219]
 r292: [200..201]
 r293: [182..183]
 r294: [164..165]
 r295: [146..147]
 r296: [128..129]
 r297: [110..111]
 r298: [92..93]
 r299: [74..75]
 r300: [56..57]
 r301: [38..39]
 r302: [20..21]

********** Assignment #1: **********

	 Assigning to 283 (cl=GENERAL_REGS, orig=192, freq=3000, tfirst=283, tfreq=3000)...
	   Assign 1 to reload r283 (freq=3000)
	 Assigning to 284 (cl=GENERAL_REGS, orig=197, freq=3000, tfirst=284, tfreq=3000)...
	   Assign 2 to reload r284 (freq=3000)
	 Assigning to 285 (cl=GENERAL_REGS, orig=201, freq=3000, tfirst=285, tfreq=3000)...
	   Assign 1 to reload r285 (freq=3000)
	 Assigning to 286 (cl=GENERAL_REGS, orig=206, freq=3000, tfirst=286, tfreq=3000)...
	   Assign 2 to reload r286 (freq=3000)
	 Assigning to 287 (cl=GENERAL_REGS, orig=210, freq=3000, tfirst=287, tfreq=3000)...
	   Assign 1 to reload r287 (freq=3000)
	 Assigning to 288 (cl=GENERAL_REGS, orig=215, freq=3000, tfirst=288, tfreq=3000)...
	   Assign 2 to reload r288 (freq=3000)
	 Assigning to 289 (cl=GENERAL_REGS, orig=219, freq=3000, tfirst=289, tfreq=3000)...
	   Assign 1 to reload r289 (freq=3000)
	 Assigning to 290 (cl=GENERAL_REGS, orig=224, freq=3000, tfirst=290, tfreq=3000)...
	   Assign 2 to reload r290 (freq=3000)
	 Assigning to 291 (cl=GENERAL_REGS, orig=228, freq=3000, tfirst=291, tfreq=3000)...
	   Assign 1 to reload r291 (freq=3000)
	 Assigning to 292 (cl=GENERAL_REGS, orig=233, freq=3000, tfirst=292, tfreq=3000)...
	   Assign 2 to reload r292 (freq=3000)
	 Assigning to 293 (cl=GENERAL_REGS, orig=237, freq=3000, tfirst=293, tfreq=3000)...
	   Assign 1 to reload r293 (freq=3000)
	 Assigning to 294 (cl=GENERAL_REGS, orig=242, freq=3000, tfirst=294, tfreq=3000)...
	   Assign 2 to reload r294 (freq=3000)
	 Assigning to 295 (cl=GENERAL_REGS, orig=246, freq=3000, tfirst=295, tfreq=3000)...
	   Assign 1 to reload r295 (freq=3000)
	 Assigning to 296 (cl=GENERAL_REGS, orig=251, freq=3000, tfirst=296, tfreq=3000)...
	   Assign 2 to reload r296 (freq=3000)
	 Assigning to 297 (cl=GENERAL_REGS, orig=255, freq=3000, tfirst=297, tfreq=3000)...
	   Assign 1 to reload r297 (freq=3000)
	 Assigning to 298 (cl=GENERAL_REGS, orig=260, freq=3000, tfirst=298, tfreq=3000)...
	   Assign 2 to reload r298 (freq=3000)
	 Assigning to 299 (cl=GENERAL_REGS, orig=264, freq=3000, tfirst=299, tfreq=3000)...
	   Assign 1 to reload r299 (freq=3000)
	 Assigning to 300 (cl=GENERAL_REGS, orig=269, freq=3000, tfirst=300, tfreq=3000)...
	   Assign 2 to reload r300 (freq=3000)
	 Assigning to 301 (cl=GENERAL_REGS, orig=273, freq=3000, tfirst=301, tfreq=3000)...
	   Assign 1 to reload r301 (freq=3000)
	 Assigning to 302 (cl=GENERAL_REGS, orig=278, freq=3000, tfirst=302, tfreq=3000)...
	   Assign 2 to reload r302 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 14
changing reg in insn 15
changing reg in insn 15
changing reg in insn 16
changing reg in insn 16
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 39
changing reg in insn 39
changing reg in insn 40
changing reg in insn 40
changing reg in insn 42
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 52
changing reg in insn 52
changing reg in insn 53
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 62
changing reg in insn 63
changing reg in insn 63
changing reg in insn 64
changing reg in insn 64
changing reg in insn 65
changing reg in insn 65
changing reg in insn 67
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 75
changing reg in insn 76
changing reg in insn 76
changing reg in insn 77
changing reg in insn 77
changing reg in insn 78
changing reg in insn 78
changing reg in insn 79
changing reg in insn 80
changing reg in insn 87
changing reg in insn 88
changing reg in insn 88
changing reg in insn 89
changing reg in insn 89
changing reg in insn 90
changing reg in insn 90
changing reg in insn 92
changing reg in insn 92
changing reg in insn 93
changing reg in insn 93
changing reg in insn 100
changing reg in insn 101
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 103
changing reg in insn 104
changing reg in insn 111
changing reg in insn 112
changing reg in insn 112
changing reg in insn 113
changing reg in insn 113
changing reg in insn 114
changing reg in insn 114
changing reg in insn 116
changing reg in insn 116
changing reg in insn 117
changing reg in insn 117
changing reg in insn 124
changing reg in insn 125
changing reg in insn 125
changing reg in insn 126
changing reg in insn 126
changing reg in insn 127
changing reg in insn 127
changing reg in insn 128
changing reg in insn 129
changing reg in insn 136
changing reg in insn 137
changing reg in insn 137
changing reg in insn 138
changing reg in insn 138
changing reg in insn 139
changing reg in insn 139
changing reg in insn 141
changing reg in insn 141
changing reg in insn 142
changing reg in insn 142
changing reg in insn 149
changing reg in insn 150
changing reg in insn 150
changing reg in insn 151
changing reg in insn 151
changing reg in insn 152
changing reg in insn 152
changing reg in insn 153
changing reg in insn 154
changing reg in insn 161
changing reg in insn 162
changing reg in insn 162
changing reg in insn 163
changing reg in insn 163
changing reg in insn 164
changing reg in insn 164
changing reg in insn 166
changing reg in insn 166
changing reg in insn 167
changing reg in insn 167
changing reg in insn 174
changing reg in insn 175
changing reg in insn 175
changing reg in insn 176
changing reg in insn 176
changing reg in insn 177
changing reg in insn 177
changing reg in insn 178
changing reg in insn 179
changing reg in insn 186
changing reg in insn 187
changing reg in insn 187
changing reg in insn 188
changing reg in insn 188
changing reg in insn 189
changing reg in insn 189
changing reg in insn 191
changing reg in insn 191
changing reg in insn 192
changing reg in insn 192
changing reg in insn 199
changing reg in insn 200
changing reg in insn 200
changing reg in insn 201
changing reg in insn 201
changing reg in insn 202
changing reg in insn 202
changing reg in insn 203
changing reg in insn 204
changing reg in insn 211
changing reg in insn 212
changing reg in insn 212
changing reg in insn 213
changing reg in insn 213
changing reg in insn 214
changing reg in insn 214
changing reg in insn 216
changing reg in insn 216
changing reg in insn 217
changing reg in insn 217
changing reg in insn 224
changing reg in insn 225
changing reg in insn 225
changing reg in insn 226
changing reg in insn 226
changing reg in insn 227
changing reg in insn 227
changing reg in insn 228
changing reg in insn 229
changing reg in insn 236
changing reg in insn 237
changing reg in insn 237
changing reg in insn 238
changing reg in insn 238
changing reg in insn 239
changing reg in insn 239
changing reg in insn 241
changing reg in insn 241
changing reg in insn 242
changing reg in insn 242
changing reg in insn 249
changing reg in insn 250
changing reg in insn 250
changing reg in insn 251
changing reg in insn 251
changing reg in insn 252
changing reg in insn 252
changing reg in insn 253
changing reg in insn 254
changing reg in insn 255
changing reg in insn 258
changing reg in insn 258
changing reg in insn 262
changing reg in insn 8
changing reg in insn 12
changing reg in insn 13
changing reg in insn 13
changing reg in insn 14
changing reg in insn 17
changing reg in insn 20
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 26
changing reg in insn 31
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 37
changing reg in insn 41
changing reg in insn 44
changing reg in insn 48
changing reg in insn 49
changing reg in insn 49
changing reg in insn 50
changing reg in insn 56
changing reg in insn 60
changing reg in insn 61
changing reg in insn 61
changing reg in insn 62
changing reg in insn 66
changing reg in insn 69
changing reg in insn 73
changing reg in insn 74
changing reg in insn 74
changing reg in insn 75
changing reg in insn 81
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 87
changing reg in insn 91
changing reg in insn 94
changing reg in insn 98
changing reg in insn 99
changing reg in insn 99
changing reg in insn 100
changing reg in insn 105
changing reg in insn 109
changing reg in insn 110
changing reg in insn 110
changing reg in insn 111
changing reg in insn 115
changing reg in insn 118
changing reg in insn 122
changing reg in insn 123
changing reg in insn 123
changing reg in insn 124
changing reg in insn 130
changing reg in insn 134
changing reg in insn 135
changing reg in insn 135
changing reg in insn 136
changing reg in insn 140
changing reg in insn 143
changing reg in insn 147
changing reg in insn 148
changing reg in insn 148
changing reg in insn 149
changing reg in insn 155
changing reg in insn 159
changing reg in insn 160
changing reg in insn 160
changing reg in insn 161
changing reg in insn 165
changing reg in insn 168
changing reg in insn 172
changing reg in insn 173
changing reg in insn 173
changing reg in insn 174
changing reg in insn 180
changing reg in insn 184
changing reg in insn 185
changing reg in insn 185
changing reg in insn 186
changing reg in insn 190
changing reg in insn 193
changing reg in insn 197
changing reg in insn 198
changing reg in insn 198
changing reg in insn 199
changing reg in insn 205
changing reg in insn 209
changing reg in insn 210
changing reg in insn 210
changing reg in insn 211
changing reg in insn 215
changing reg in insn 218
changing reg in insn 222
changing reg in insn 223
changing reg in insn 223
changing reg in insn 224
changing reg in insn 230
changing reg in insn 234
changing reg in insn 235
changing reg in insn 235
changing reg in insn 236
changing reg in insn 240
changing reg in insn 243
changing reg in insn 247
changing reg in insn 248
changing reg in insn 248
changing reg in insn 249
deleting insn with uid = 267.
deleting insn with uid = 14.
deleting insn with uid = 269.
deleting insn with uid = 26.
deleting insn with uid = 271.
deleting insn with uid = 37.
deleting insn with uid = 273.
deleting insn with uid = 50.
deleting insn with uid = 275.
deleting insn with uid = 62.
deleting insn with uid = 277.
deleting insn with uid = 75.
deleting insn with uid = 279.
deleting insn with uid = 87.
deleting insn with uid = 281.
deleting insn with uid = 100.
deleting insn with uid = 283.
deleting insn with uid = 111.
deleting insn with uid = 285.
deleting insn with uid = 124.
deleting insn with uid = 287.
deleting insn with uid = 136.
deleting insn with uid = 289.
deleting insn with uid = 149.
deleting insn with uid = 291.
deleting insn with uid = 161.
deleting insn with uid = 293.
deleting insn with uid = 174.
deleting insn with uid = 295.
deleting insn with uid = 186.
deleting insn with uid = 297.
deleting insn with uid = 199.
deleting insn with uid = 299.
deleting insn with uid = 211.
deleting insn with uid = 301.
deleting insn with uid = 224.
deleting insn with uid = 303.
deleting insn with uid = 236.
deleting insn with uid = 305.
deleting insn with uid = 249.
deleting insn with uid = 258.
deleting insn with uid = 262.
starting the processing of deferred insns
ending the processing of deferred insns


dynamic_array_init_life5

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={139d,159u} r1={41d,41u,10e} r2={21d,20u} r4={1d,1u} r5={1d,1u} r6={1d,36u} r7={1d,2u} r17={117d} r19={1d,1u,10e} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r36={1d} r37={1d} 
;;    total ref usage 614{333d,261u,20e} in 212{212 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 17 [flags
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
        (reg:DI 5 di [ A ])) "game_of_life.c":184:55 74 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 N+0 S4 A32])
        (reg:SI 4 si [ N ])) "game_of_life.c":184:55 75 {*movsi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 M+0 S4 A32])
        (reg:SI 1 dx [ M ])) "game_of_life.c":184:55 75 {*movsi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 266 2 (set (reg:SI 0 ax [191])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 N+0 S4 A32])) "game_of_life.c":186:9 75 {*movsi_internal}
     (nil))
(insn 266 8 11 2 (set (reg:SI 1 dx [192])
        (reg:SI 0 ax [191])) "game_of_life.c":186:9 75 {*movsi_internal}
     (nil))
(insn 11 266 12 2 (parallel [
            (set (reg:SI 1 dx [192])
                (lshiftrt:SI (reg:SI 1 dx [192])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":186:9 701 {*lshrsi3_1}
     (nil))
(insn 12 11 13 2 (parallel [
            (set (reg:SI 0 ax [193])
                (plus:SI (reg:SI 0 ax [191])
                    (reg:SI 1 dx [192])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":186:9 209 {*addsi_1}
     (nil))
(insn 13 12 15 2 (parallel [
            (set (reg:SI 0 ax [194])
                (ashiftrt:SI (reg:SI 0 ax [193])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":186:9 702 {*ashrsi3_1}
     (nil))
(insn 15 13 16 2 (set (reg:DI 0 ax [orig:83 _2 ] [83])
        (sign_extend:DI (reg:SI 0 ax [orig:82 _1 ] [82]))) "game_of_life.c":186:9 147 {*extendsidi2_rex64}
     (nil))
(insn 16 15 17 2 (parallel [
            (set (reg:DI 1 dx [orig:84 _3 ] [84])
                (ashift:DI (reg:DI 0 ax [orig:83 _2 ] [83])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":186:6 656 {*ashldi3_1}
     (nil))
(insn 17 16 18 2 (set (reg/f:DI 0 ax [195])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":186:6 74 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (parallel [
            (set (reg/f:DI 0 ax [orig:85 _4 ] [85])
                (plus:DI (reg/f:DI 0 ax [195])
                    (reg:DI 1 dx [orig:84 _3 ] [84])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":186:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (reg:DI 1 dx [orig:84 _3 ] [84]))
        (nil)))
(insn 19 18 20 2 (set (reg/f:DI 1 dx [orig:86 _5 ] [86])
        (mem/f:DI (reg/f:DI 0 ax [orig:85 _4 ] [85]) [4 *_4+0 S8 A64])) "game_of_life.c":186:6 74 {*movdi_internal}
     (nil))
(insn 20 19 268 2 (set (reg:SI 0 ax [196])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 M+0 S4 A32])) "game_of_life.c":186:16 75 {*movsi_internal}
     (nil))
(insn 268 20 23 2 (set (reg:SI 2 cx [197])
        (reg:SI 0 ax [196])) "game_of_life.c":186:16 75 {*movsi_internal}
     (nil))
(insn 23 268 24 2 (parallel [
            (set (reg:SI 2 cx [197])
                (lshiftrt:SI (reg:SI 2 cx [197])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":186:16 701 {*lshrsi3_1}
     (nil))
(insn 24 23 25 2 (parallel [
            (set (reg:SI 0 ax [198])
                (plus:SI (reg:SI 0 ax [196])
                    (reg:SI 2 cx [197])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":186:16 209 {*addsi_1}
     (nil))
(insn 25 24 27 2 (parallel [
            (set (reg:SI 0 ax [199])
                (ashiftrt:SI (reg:SI 0 ax [198])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":186:16 702 {*ashrsi3_1}
     (nil))
(insn 27 25 28 2 (set (reg:DI 0 ax [orig:88 _7 ] [88])
        (sign_extend:DI (reg:SI 0 ax [orig:87 _6 ] [87]))) "game_of_life.c":186:16 147 {*extendsidi2_rex64}
     (nil))
(insn 28 27 29 2 (parallel [
            (set (reg:DI 0 ax [orig:89 _8 ] [89])
                (ashift:DI (reg:DI 0 ax [orig:88 _7 ] [88])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":186:13 656 {*ashldi3_1}
     (nil))
(insn 29 28 30 2 (parallel [
            (set (reg/f:DI 0 ax [orig:90 _9 ] [90])
                (plus:DI (reg:DI 0 ax [orig:89 _8 ] [89])
                    (reg/f:DI 1 dx [orig:86 _5 ] [86])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":186:13 210 {*adddi_1}
     (nil))
(insn 30 29 31 2 (set (mem:SI (reg/f:DI 0 ax [orig:90 _9 ] [90]) [2 *_9+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":186:21 75 {*movsi_internal}
     (nil))
(insn 31 30 270 2 (set (reg:SI 0 ax [200])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 N+0 S4 A32])) "game_of_life.c":187:10 75 {*movsi_internal}
     (nil))
(insn 270 31 34 2 (set (reg:SI 1 dx [201])
        (reg:SI 0 ax [200])) "game_of_life.c":187:10 75 {*movsi_internal}
     (nil))
(insn 34 270 35 2 (parallel [
            (set (reg:SI 1 dx [201])
                (lshiftrt:SI (reg:SI 1 dx [201])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":187:10 701 {*lshrsi3_1}
     (nil))
(insn 35 34 36 2 (parallel [
            (set (reg:SI 0 ax [202])
                (plus:SI (reg:SI 0 ax [200])
                    (reg:SI 1 dx [201])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":187:10 209 {*addsi_1}
     (nil))
(insn 36 35 38 2 (parallel [
            (set (reg:SI 0 ax [203])
                (ashiftrt:SI (reg:SI 0 ax [202])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":187:10 702 {*ashrsi3_1}
     (nil))
(insn 38 36 39 2 (set (reg:DI 0 ax [orig:92 _11 ] [92])
        (sign_extend:DI (reg:SI 0 ax [orig:91 _10 ] [91]))) "game_of_life.c":187:6 147 {*extendsidi2_rex64}
     (nil))
(insn 39 38 40 2 (parallel [
            (set (reg:DI 0 ax [orig:93 _12 ] [93])
                (plus:DI (reg:DI 0 ax [orig:92 _11 ] [92])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":187:6 210 {*adddi_1}
     (nil))
(insn 40 39 41 2 (parallel [
            (set (reg:DI 1 dx [orig:94 _13 ] [94])
                (ashift:DI (reg:DI 0 ax [orig:93 _12 ] [93])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":187:6 656 {*ashldi3_1}
     (nil))
(insn 41 40 42 2 (set (reg/f:DI 0 ax [204])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":187:6 74 {*movdi_internal}
     (nil))
(insn 42 41 43 2 (parallel [
            (set (reg/f:DI 0 ax [orig:95 _14 ] [95])
                (plus:DI (reg/f:DI 0 ax [204])
                    (reg:DI 1 dx [orig:94 _13 ] [94])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":187:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (reg:DI 1 dx [orig:94 _13 ] [94]))
        (nil)))
(insn 43 42 44 2 (set (reg/f:DI 1 dx [orig:96 _15 ] [96])
        (mem/f:DI (reg/f:DI 0 ax [orig:95 _14 ] [95]) [4 *_14+0 S8 A64])) "game_of_life.c":187:6 74 {*movdi_internal}
     (nil))
(insn 44 43 272 2 (set (reg:SI 0 ax [205])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 M+0 S4 A32])) "game_of_life.c":187:23 75 {*movsi_internal}
     (nil))
(insn 272 44 47 2 (set (reg:SI 2 cx [206])
        (reg:SI 0 ax [205])) "game_of_life.c":187:23 75 {*movsi_internal}
     (nil))
(insn 47 272 48 2 (parallel [
            (set (reg:SI 2 cx [206])
                (lshiftrt:SI (reg:SI 2 cx [206])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":187:23 701 {*lshrsi3_1}
     (nil))
(insn 48 47 49 2 (parallel [
            (set (reg:SI 0 ax [207])
                (plus:SI (reg:SI 0 ax [205])
                    (reg:SI 2 cx [206])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":187:23 209 {*addsi_1}
     (nil))
(insn 49 48 51 2 (parallel [
            (set (reg:SI 0 ax [208])
                (ashiftrt:SI (reg:SI 0 ax [207])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":187:23 702 {*ashrsi3_1}
     (nil))
(insn 51 49 52 2 (set (reg:DI 0 ax [orig:98 _17 ] [98])
        (sign_extend:DI (reg:SI 0 ax [orig:97 _16 ] [97]))) "game_of_life.c":187:23 147 {*extendsidi2_rex64}
     (nil))
(insn 52 51 53 2 (parallel [
            (set (reg:DI 0 ax [orig:99 _18 ] [99])
                (ashift:DI (reg:DI 0 ax [orig:98 _17 ] [98])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":187:19 656 {*ashldi3_1}
     (nil))
(insn 53 52 54 2 (parallel [
            (set (reg:DI 0 ax [orig:100 _19 ] [100])
                (plus:DI (reg:DI 0 ax [orig:99 _18 ] [99])
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":187:19 210 {*adddi_1}
     (nil))
(insn 54 53 55 2 (parallel [
            (set (reg/f:DI 0 ax [orig:101 _20 ] [101])
                (plus:DI (reg:DI 0 ax [orig:100 _19 ] [100])
                    (reg/f:DI 1 dx [orig:96 _15 ] [96])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":187:19 210 {*adddi_1}
     (nil))
(insn 55 54 56 2 (set (mem:SI (reg/f:DI 0 ax [orig:101 _20 ] [101]) [2 *_20+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":187:33 75 {*movsi_internal}
     (nil))
(insn 56 55 274 2 (set (reg:SI 0 ax [209])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 N+0 S4 A32])) "game_of_life.c":188:10 75 {*movsi_internal}
     (nil))
(insn 274 56 59 2 (set (reg:SI 1 dx [210])
        (reg:SI 0 ax [209])) "game_of_life.c":188:10 75 {*movsi_internal}
     (nil))
(insn 59 274 60 2 (parallel [
            (set (reg:SI 1 dx [210])
                (lshiftrt:SI (reg:SI 1 dx [210])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":188:10 701 {*lshrsi3_1}
     (nil))
(insn 60 59 61 2 (parallel [
            (set (reg:SI 0 ax [211])
                (plus:SI (reg:SI 0 ax [209])
                    (reg:SI 1 dx [210])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":188:10 209 {*addsi_1}
     (nil))
(insn 61 60 63 2 (parallel [
            (set (reg:SI 0 ax [212])
                (ashiftrt:SI (reg:SI 0 ax [211])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":188:10 702 {*ashrsi3_1}
     (nil))
(insn 63 61 64 2 (set (reg:DI 0 ax [orig:103 _22 ] [103])
        (sign_extend:DI (reg:SI 0 ax [orig:102 _21 ] [102]))) "game_of_life.c":188:6 147 {*extendsidi2_rex64}
     (nil))
(insn 64 63 65 2 (parallel [
            (set (reg:DI 0 ax [orig:104 _23 ] [104])
                (plus:DI (reg:DI 0 ax [orig:103 _22 ] [103])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":188:6 210 {*adddi_1}
     (nil))
(insn 65 64 66 2 (parallel [
            (set (reg:DI 1 dx [orig:105 _24 ] [105])
                (ashift:DI (reg:DI 0 ax [orig:104 _23 ] [104])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":188:6 656 {*ashldi3_1}
     (nil))
(insn 66 65 67 2 (set (reg/f:DI 0 ax [213])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":188:6 74 {*movdi_internal}
     (nil))
(insn 67 66 68 2 (parallel [
            (set (reg/f:DI 0 ax [orig:106 _25 ] [106])
                (plus:DI (reg/f:DI 0 ax [213])
                    (reg:DI 1 dx [orig:105 _24 ] [105])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":188:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (reg:DI 1 dx [orig:105 _24 ] [105]))
        (nil)))
(insn 68 67 69 2 (set (reg/f:DI 1 dx [orig:107 _26 ] [107])
        (mem/f:DI (reg/f:DI 0 ax [orig:106 _25 ] [106]) [4 *_25+0 S8 A64])) "game_of_life.c":188:6 74 {*movdi_internal}
     (nil))
(insn 69 68 276 2 (set (reg:SI 0 ax [214])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 M+0 S4 A32])) "game_of_life.c":188:23 75 {*movsi_internal}
     (nil))
(insn 276 69 72 2 (set (reg:SI 2 cx [215])
        (reg:SI 0 ax [214])) "game_of_life.c":188:23 75 {*movsi_internal}
     (nil))
(insn 72 276 73 2 (parallel [
            (set (reg:SI 2 cx [215])
                (lshiftrt:SI (reg:SI 2 cx [215])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":188:23 701 {*lshrsi3_1}
     (nil))
(insn 73 72 74 2 (parallel [
            (set (reg:SI 0 ax [216])
                (plus:SI (reg:SI 0 ax [214])
                    (reg:SI 2 cx [215])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":188:23 209 {*addsi_1}
     (nil))
(insn 74 73 76 2 (parallel [
            (set (reg:SI 0 ax [217])
                (ashiftrt:SI (reg:SI 0 ax [216])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":188:23 702 {*ashrsi3_1}
     (nil))
(insn 76 74 77 2 (set (reg:DI 0 ax [orig:109 _28 ] [109])
        (sign_extend:DI (reg:SI 0 ax [orig:108 _27 ] [108]))) "game_of_life.c":188:19 147 {*extendsidi2_rex64}
     (nil))
(insn 77 76 78 2 (parallel [
            (set (reg:DI 0 ax [orig:110 _29 ] [110])
                (plus:DI (reg:DI 0 ax [orig:109 _28 ] [109])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":188:19 210 {*adddi_1}
     (nil))
(insn 78 77 79 2 (parallel [
            (set (reg:DI 0 ax [orig:111 _30 ] [111])
                (ashift:DI (reg:DI 0 ax [orig:110 _29 ] [110])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":188:19 656 {*ashldi3_1}
     (nil))
(insn 79 78 80 2 (parallel [
            (set (reg/f:DI 0 ax [orig:112 _31 ] [112])
                (plus:DI (reg:DI 0 ax [orig:111 _30 ] [111])
                    (reg/f:DI 1 dx [orig:107 _26 ] [107])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":188:19 210 {*adddi_1}
     (nil))
(insn 80 79 81 2 (set (mem:SI (reg/f:DI 0 ax [orig:112 _31 ] [112]) [2 *_31+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":188:33 75 {*movsi_internal}
     (nil))
(insn 81 80 278 2 (set (reg:SI 0 ax [218])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 N+0 S4 A32])) "game_of_life.c":189:10 75 {*movsi_internal}
     (nil))
(insn 278 81 84 2 (set (reg:SI 1 dx [219])
        (reg:SI 0 ax [218])) "game_of_life.c":189:10 75 {*movsi_internal}
     (nil))
(insn 84 278 85 2 (parallel [
            (set (reg:SI 1 dx [219])
                (lshiftrt:SI (reg:SI 1 dx [219])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":189:10 701 {*lshrsi3_1}
     (nil))
(insn 85 84 86 2 (parallel [
            (set (reg:SI 0 ax [220])
                (plus:SI (reg:SI 0 ax [218])
                    (reg:SI 1 dx [219])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":189:10 209 {*addsi_1}
     (nil))
(insn 86 85 88 2 (parallel [
            (set (reg:SI 0 ax [221])
                (ashiftrt:SI (reg:SI 0 ax [220])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":189:10 702 {*ashrsi3_1}
     (nil))
(insn 88 86 89 2 (set (reg:DI 0 ax [orig:114 _33 ] [114])
        (sign_extend:DI (reg:SI 0 ax [orig:113 _32 ] [113]))) "game_of_life.c":189:6 147 {*extendsidi2_rex64}
     (nil))
(insn 89 88 90 2 (parallel [
            (set (reg:DI 0 ax [orig:115 _34 ] [115])
                (plus:DI (reg:DI 0 ax [orig:114 _33 ] [114])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":189:6 210 {*adddi_1}
     (nil))
(insn 90 89 91 2 (parallel [
            (set (reg:DI 1 dx [orig:116 _35 ] [116])
                (ashift:DI (reg:DI 0 ax [orig:115 _34 ] [115])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":189:6 656 {*ashldi3_1}
     (nil))
(insn 91 90 92 2 (set (reg/f:DI 0 ax [222])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":189:6 74 {*movdi_internal}
     (nil))
(insn 92 91 93 2 (parallel [
            (set (reg/f:DI 0 ax [orig:117 _36 ] [117])
                (plus:DI (reg/f:DI 0 ax [222])
                    (reg:DI 1 dx [orig:116 _35 ] [116])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":189:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (reg:DI 1 dx [orig:116 _35 ] [116]))
        (nil)))
(insn 93 92 94 2 (set (reg/f:DI 1 dx [orig:118 _37 ] [118])
        (mem/f:DI (reg/f:DI 0 ax [orig:117 _36 ] [117]) [4 *_36+0 S8 A64])) "game_of_life.c":189:6 74 {*movdi_internal}
     (nil))
(insn 94 93 280 2 (set (reg:SI 0 ax [223])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 M+0 S4 A32])) "game_of_life.c":189:23 75 {*movsi_internal}
     (nil))
(insn 280 94 97 2 (set (reg:SI 2 cx [224])
        (reg:SI 0 ax [223])) "game_of_life.c":189:23 75 {*movsi_internal}
     (nil))
(insn 97 280 98 2 (parallel [
            (set (reg:SI 2 cx [224])
                (lshiftrt:SI (reg:SI 2 cx [224])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":189:23 701 {*lshrsi3_1}
     (nil))
(insn 98 97 99 2 (parallel [
            (set (reg:SI 0 ax [225])
                (plus:SI (reg:SI 0 ax [223])
                    (reg:SI 2 cx [224])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":189:23 209 {*addsi_1}
     (nil))
(insn 99 98 101 2 (parallel [
            (set (reg:SI 0 ax [226])
                (ashiftrt:SI (reg:SI 0 ax [225])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":189:23 702 {*ashrsi3_1}
     (nil))
(insn 101 99 102 2 (set (reg:DI 0 ax [orig:120 _39 ] [120])
        (sign_extend:DI (reg:SI 0 ax [orig:119 _38 ] [119]))) "game_of_life.c":189:23 147 {*extendsidi2_rex64}
     (nil))
(insn 102 101 103 2 (parallel [
            (set (reg:DI 0 ax [orig:121 _40 ] [121])
                (ashift:DI (reg:DI 0 ax [orig:120 _39 ] [120])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":189:19 656 {*ashldi3_1}
     (nil))
(insn 103 102 104 2 (parallel [
            (set (reg/f:DI 0 ax [orig:122 _41 ] [122])
                (plus:DI (reg:DI 0 ax [orig:121 _40 ] [121])
                    (reg/f:DI 1 dx [orig:118 _37 ] [118])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":189:19 210 {*adddi_1}
     (nil))
(insn 104 103 105 2 (set (mem:SI (reg/f:DI 0 ax [orig:122 _41 ] [122]) [2 *_41+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":189:29 75 {*movsi_internal}
     (nil))
(insn 105 104 282 2 (set (reg:SI 0 ax [227])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 N+0 S4 A32])) "game_of_life.c":190:10 75 {*movsi_internal}
     (nil))
(insn 282 105 108 2 (set (reg:SI 1 dx [228])
        (reg:SI 0 ax [227])) "game_of_life.c":190:10 75 {*movsi_internal}
     (nil))
(insn 108 282 109 2 (parallel [
            (set (reg:SI 1 dx [228])
                (lshiftrt:SI (reg:SI 1 dx [228])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":190:10 701 {*lshrsi3_1}
     (nil))
(insn 109 108 110 2 (parallel [
            (set (reg:SI 0 ax [229])
                (plus:SI (reg:SI 0 ax [227])
                    (reg:SI 1 dx [228])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":190:10 209 {*addsi_1}
     (nil))
(insn 110 109 112 2 (parallel [
            (set (reg:SI 0 ax [230])
                (ashiftrt:SI (reg:SI 0 ax [229])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":190:10 702 {*ashrsi3_1}
     (nil))
(insn 112 110 113 2 (set (reg:DI 0 ax [orig:124 _43 ] [124])
        (sign_extend:DI (reg:SI 0 ax [orig:123 _42 ] [123]))) "game_of_life.c":190:6 147 {*extendsidi2_rex64}
     (nil))
(insn 113 112 114 2 (parallel [
            (set (reg:DI 0 ax [orig:125 _44 ] [125])
                (plus:DI (reg:DI 0 ax [orig:124 _43 ] [124])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":190:6 210 {*adddi_1}
     (nil))
(insn 114 113 115 2 (parallel [
            (set (reg:DI 1 dx [orig:126 _45 ] [126])
                (ashift:DI (reg:DI 0 ax [orig:125 _44 ] [125])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":190:6 656 {*ashldi3_1}
     (nil))
(insn 115 114 116 2 (set (reg/f:DI 0 ax [231])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":190:6 74 {*movdi_internal}
     (nil))
(insn 116 115 117 2 (parallel [
            (set (reg/f:DI 0 ax [orig:127 _46 ] [127])
                (plus:DI (reg/f:DI 0 ax [231])
                    (reg:DI 1 dx [orig:126 _45 ] [126])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":190:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (reg:DI 1 dx [orig:126 _45 ] [126]))
        (nil)))
(insn 117 116 118 2 (set (reg/f:DI 1 dx [orig:128 _47 ] [128])
        (mem/f:DI (reg/f:DI 0 ax [orig:127 _46 ] [127]) [4 *_46+0 S8 A64])) "game_of_life.c":190:6 74 {*movdi_internal}
     (nil))
(insn 118 117 284 2 (set (reg:SI 0 ax [232])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 M+0 S4 A32])) "game_of_life.c":190:23 75 {*movsi_internal}
     (nil))
(insn 284 118 121 2 (set (reg:SI 2 cx [233])
        (reg:SI 0 ax [232])) "game_of_life.c":190:23 75 {*movsi_internal}
     (nil))
(insn 121 284 122 2 (parallel [
            (set (reg:SI 2 cx [233])
                (lshiftrt:SI (reg:SI 2 cx [233])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":190:23 701 {*lshrsi3_1}
     (nil))
(insn 122 121 123 2 (parallel [
            (set (reg:SI 0 ax [234])
                (plus:SI (reg:SI 0 ax [232])
                    (reg:SI 2 cx [233])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":190:23 209 {*addsi_1}
     (nil))
(insn 123 122 125 2 (parallel [
            (set (reg:SI 0 ax [235])
                (ashiftrt:SI (reg:SI 0 ax [234])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":190:23 702 {*ashrsi3_1}
     (nil))
(insn 125 123 126 2 (set (reg:DI 0 ax [orig:130 _49 ] [130])
        (sign_extend:DI (reg:SI 0 ax [orig:129 _48 ] [129]))) "game_of_life.c":190:19 147 {*extendsidi2_rex64}
     (nil))
(insn 126 125 127 2 (parallel [
            (set (reg:DI 0 ax [orig:131 _50 ] [131])
                (plus:DI (reg:DI 0 ax [orig:130 _49 ] [130])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":190:19 210 {*adddi_1}
     (nil))
(insn 127 126 128 2 (parallel [
            (set (reg:DI 0 ax [orig:132 _51 ] [132])
                (ashift:DI (reg:DI 0 ax [orig:131 _50 ] [131])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":190:19 656 {*ashldi3_1}
     (nil))
(insn 128 127 129 2 (parallel [
            (set (reg/f:DI 0 ax [orig:133 _52 ] [133])
                (plus:DI (reg:DI 0 ax [orig:132 _51 ] [132])
                    (reg/f:DI 1 dx [orig:128 _47 ] [128])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":190:19 210 {*adddi_1}
     (nil))
(insn 129 128 130 2 (set (mem:SI (reg/f:DI 0 ax [orig:133 _52 ] [133]) [2 *_52+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":190:33 75 {*movsi_internal}
     (nil))
(insn 130 129 286 2 (set (reg:SI 0 ax [236])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 N+0 S4 A32])) "game_of_life.c":191:10 75 {*movsi_internal}
     (nil))
(insn 286 130 133 2 (set (reg:SI 1 dx [237])
        (reg:SI 0 ax [236])) "game_of_life.c":191:10 75 {*movsi_internal}
     (nil))
(insn 133 286 134 2 (parallel [
            (set (reg:SI 1 dx [237])
                (lshiftrt:SI (reg:SI 1 dx [237])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":191:10 701 {*lshrsi3_1}
     (nil))
(insn 134 133 135 2 (parallel [
            (set (reg:SI 0 ax [238])
                (plus:SI (reg:SI 0 ax [236])
                    (reg:SI 1 dx [237])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":191:10 209 {*addsi_1}
     (nil))
(insn 135 134 137 2 (parallel [
            (set (reg:SI 0 ax [239])
                (ashiftrt:SI (reg:SI 0 ax [238])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":191:10 702 {*ashrsi3_1}
     (nil))
(insn 137 135 138 2 (set (reg:DI 0 ax [orig:135 _54 ] [135])
        (sign_extend:DI (reg:SI 0 ax [orig:134 _53 ] [134]))) "game_of_life.c":191:6 147 {*extendsidi2_rex64}
     (nil))
(insn 138 137 139 2 (parallel [
            (set (reg:DI 0 ax [orig:136 _55 ] [136])
                (plus:DI (reg:DI 0 ax [orig:135 _54 ] [135])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":191:6 210 {*adddi_1}
     (nil))
(insn 139 138 140 2 (parallel [
            (set (reg:DI 1 dx [orig:137 _56 ] [137])
                (ashift:DI (reg:DI 0 ax [orig:136 _55 ] [136])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":191:6 656 {*ashldi3_1}
     (nil))
(insn 140 139 141 2 (set (reg/f:DI 0 ax [240])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":191:6 74 {*movdi_internal}
     (nil))
(insn 141 140 142 2 (parallel [
            (set (reg/f:DI 0 ax [orig:138 _57 ] [138])
                (plus:DI (reg/f:DI 0 ax [240])
                    (reg:DI 1 dx [orig:137 _56 ] [137])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":191:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (reg:DI 1 dx [orig:137 _56 ] [137]))
        (nil)))
(insn 142 141 143 2 (set (reg/f:DI 1 dx [orig:139 _58 ] [139])
        (mem/f:DI (reg/f:DI 0 ax [orig:138 _57 ] [138]) [4 *_57+0 S8 A64])) "game_of_life.c":191:6 74 {*movdi_internal}
     (nil))
(insn 143 142 288 2 (set (reg:SI 0 ax [241])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 M+0 S4 A32])) "game_of_life.c":191:23 75 {*movsi_internal}
     (nil))
(insn 288 143 146 2 (set (reg:SI 2 cx [242])
        (reg:SI 0 ax [241])) "game_of_life.c":191:23 75 {*movsi_internal}
     (nil))
(insn 146 288 147 2 (parallel [
            (set (reg:SI 2 cx [242])
                (lshiftrt:SI (reg:SI 2 cx [242])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":191:23 701 {*lshrsi3_1}
     (nil))
(insn 147 146 148 2 (parallel [
            (set (reg:SI 0 ax [243])
                (plus:SI (reg:SI 0 ax [241])
                    (reg:SI 2 cx [242])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":191:23 209 {*addsi_1}
     (nil))
(insn 148 147 150 2 (parallel [
            (set (reg:SI 0 ax [244])
                (ashiftrt:SI (reg:SI 0 ax [243])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":191:23 702 {*ashrsi3_1}
     (nil))
(insn 150 148 151 2 (set (reg:DI 0 ax [orig:141 _60 ] [141])
        (sign_extend:DI (reg:SI 0 ax [orig:140 _59 ] [140]))) "game_of_life.c":191:19 147 {*extendsidi2_rex64}
     (nil))
(insn 151 150 152 2 (parallel [
            (set (reg:DI 0 ax [orig:142 _61 ] [142])
                (plus:DI (reg:DI 0 ax [orig:141 _60 ] [141])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":191:19 210 {*adddi_1}
     (nil))
(insn 152 151 153 2 (parallel [
            (set (reg:DI 0 ax [orig:143 _62 ] [143])
                (ashift:DI (reg:DI 0 ax [orig:142 _61 ] [142])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":191:19 656 {*ashldi3_1}
     (nil))
(insn 153 152 154 2 (parallel [
            (set (reg/f:DI 0 ax [orig:144 _63 ] [144])
                (plus:DI (reg:DI 0 ax [orig:143 _62 ] [143])
                    (reg/f:DI 1 dx [orig:139 _58 ] [139])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":191:19 210 {*adddi_1}
     (nil))
(insn 154 153 155 2 (set (mem:SI (reg/f:DI 0 ax [orig:144 _63 ] [144]) [2 *_63+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":191:33 75 {*movsi_internal}
     (nil))
(insn 155 154 290 2 (set (reg:SI 0 ax [245])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 N+0 S4 A32])) "game_of_life.c":192:10 75 {*movsi_internal}
     (nil))
(insn 290 155 158 2 (set (reg:SI 1 dx [246])
        (reg:SI 0 ax [245])) "game_of_life.c":192:10 75 {*movsi_internal}
     (nil))
(insn 158 290 159 2 (parallel [
            (set (reg:SI 1 dx [246])
                (lshiftrt:SI (reg:SI 1 dx [246])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":192:10 701 {*lshrsi3_1}
     (nil))
(insn 159 158 160 2 (parallel [
            (set (reg:SI 0 ax [247])
                (plus:SI (reg:SI 0 ax [245])
                    (reg:SI 1 dx [246])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":192:10 209 {*addsi_1}
     (nil))
(insn 160 159 162 2 (parallel [
            (set (reg:SI 0 ax [248])
                (ashiftrt:SI (reg:SI 0 ax [247])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":192:10 702 {*ashrsi3_1}
     (nil))
(insn 162 160 163 2 (set (reg:DI 0 ax [orig:146 _65 ] [146])
        (sign_extend:DI (reg:SI 0 ax [orig:145 _64 ] [145]))) "game_of_life.c":192:6 147 {*extendsidi2_rex64}
     (nil))
(insn 163 162 164 2 (parallel [
            (set (reg:DI 0 ax [orig:147 _66 ] [147])
                (plus:DI (reg:DI 0 ax [orig:146 _65 ] [146])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":192:6 210 {*adddi_1}
     (nil))
(insn 164 163 165 2 (parallel [
            (set (reg:DI 1 dx [orig:148 _67 ] [148])
                (ashift:DI (reg:DI 0 ax [orig:147 _66 ] [147])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":192:6 656 {*ashldi3_1}
     (nil))
(insn 165 164 166 2 (set (reg/f:DI 0 ax [249])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":192:6 74 {*movdi_internal}
     (nil))
(insn 166 165 167 2 (parallel [
            (set (reg/f:DI 0 ax [orig:149 _68 ] [149])
                (plus:DI (reg/f:DI 0 ax [249])
                    (reg:DI 1 dx [orig:148 _67 ] [148])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":192:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (reg:DI 1 dx [orig:148 _67 ] [148]))
        (nil)))
(insn 167 166 168 2 (set (reg/f:DI 1 dx [orig:150 _69 ] [150])
        (mem/f:DI (reg/f:DI 0 ax [orig:149 _68 ] [149]) [4 *_68+0 S8 A64])) "game_of_life.c":192:6 74 {*movdi_internal}
     (nil))
(insn 168 167 292 2 (set (reg:SI 0 ax [250])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 M+0 S4 A32])) "game_of_life.c":192:23 75 {*movsi_internal}
     (nil))
(insn 292 168 171 2 (set (reg:SI 2 cx [251])
        (reg:SI 0 ax [250])) "game_of_life.c":192:23 75 {*movsi_internal}
     (nil))
(insn 171 292 172 2 (parallel [
            (set (reg:SI 2 cx [251])
                (lshiftrt:SI (reg:SI 2 cx [251])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":192:23 701 {*lshrsi3_1}
     (nil))
(insn 172 171 173 2 (parallel [
            (set (reg:SI 0 ax [252])
                (plus:SI (reg:SI 0 ax [250])
                    (reg:SI 2 cx [251])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":192:23 209 {*addsi_1}
     (nil))
(insn 173 172 175 2 (parallel [
            (set (reg:SI 0 ax [253])
                (ashiftrt:SI (reg:SI 0 ax [252])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":192:23 702 {*ashrsi3_1}
     (nil))
(insn 175 173 176 2 (set (reg:DI 0 ax [orig:152 _71 ] [152])
        (sign_extend:DI (reg:SI 0 ax [orig:151 _70 ] [151]))) "game_of_life.c":192:19 147 {*extendsidi2_rex64}
     (nil))
(insn 176 175 177 2 (parallel [
            (set (reg:DI 0 ax [orig:153 _72 ] [153])
                (plus:DI (reg:DI 0 ax [orig:152 _71 ] [152])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":192:19 210 {*adddi_1}
     (nil))
(insn 177 176 178 2 (parallel [
            (set (reg:DI 0 ax [orig:154 _73 ] [154])
                (ashift:DI (reg:DI 0 ax [orig:153 _72 ] [153])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":192:19 656 {*ashldi3_1}
     (nil))
(insn 178 177 179 2 (parallel [
            (set (reg/f:DI 0 ax [orig:155 _74 ] [155])
                (plus:DI (reg:DI 0 ax [orig:154 _73 ] [154])
                    (reg/f:DI 1 dx [orig:150 _69 ] [150])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":192:19 210 {*adddi_1}
     (nil))
(insn 179 178 180 2 (set (mem:SI (reg/f:DI 0 ax [orig:155 _74 ] [155]) [2 *_74+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":192:33 75 {*movsi_internal}
     (nil))
(insn 180 179 294 2 (set (reg:SI 0 ax [254])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 N+0 S4 A32])) "game_of_life.c":193:10 75 {*movsi_internal}
     (nil))
(insn 294 180 183 2 (set (reg:SI 1 dx [255])
        (reg:SI 0 ax [254])) "game_of_life.c":193:10 75 {*movsi_internal}
     (nil))
(insn 183 294 184 2 (parallel [
            (set (reg:SI 1 dx [255])
                (lshiftrt:SI (reg:SI 1 dx [255])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":193:10 701 {*lshrsi3_1}
     (nil))
(insn 184 183 185 2 (parallel [
            (set (reg:SI 0 ax [256])
                (plus:SI (reg:SI 0 ax [254])
                    (reg:SI 1 dx [255])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":193:10 209 {*addsi_1}
     (nil))
(insn 185 184 187 2 (parallel [
            (set (reg:SI 0 ax [257])
                (ashiftrt:SI (reg:SI 0 ax [256])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":193:10 702 {*ashrsi3_1}
     (nil))
(insn 187 185 188 2 (set (reg:DI 0 ax [orig:157 _76 ] [157])
        (sign_extend:DI (reg:SI 0 ax [orig:156 _75 ] [156]))) "game_of_life.c":193:6 147 {*extendsidi2_rex64}
     (nil))
(insn 188 187 189 2 (parallel [
            (set (reg:DI 0 ax [orig:158 _77 ] [158])
                (plus:DI (reg:DI 0 ax [orig:157 _76 ] [157])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":193:6 210 {*adddi_1}
     (nil))
(insn 189 188 190 2 (parallel [
            (set (reg:DI 1 dx [orig:159 _78 ] [159])
                (ashift:DI (reg:DI 0 ax [orig:158 _77 ] [158])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":193:6 656 {*ashldi3_1}
     (nil))
(insn 190 189 191 2 (set (reg/f:DI 0 ax [258])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":193:6 74 {*movdi_internal}
     (nil))
(insn 191 190 192 2 (parallel [
            (set (reg/f:DI 0 ax [orig:160 _79 ] [160])
                (plus:DI (reg/f:DI 0 ax [258])
                    (reg:DI 1 dx [orig:159 _78 ] [159])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":193:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (reg:DI 1 dx [orig:159 _78 ] [159]))
        (nil)))
(insn 192 191 193 2 (set (reg/f:DI 1 dx [orig:161 _80 ] [161])
        (mem/f:DI (reg/f:DI 0 ax [orig:160 _79 ] [160]) [4 *_79+0 S8 A64])) "game_of_life.c":193:6 74 {*movdi_internal}
     (nil))
(insn 193 192 296 2 (set (reg:SI 0 ax [259])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 M+0 S4 A32])) "game_of_life.c":193:23 75 {*movsi_internal}
     (nil))
(insn 296 193 196 2 (set (reg:SI 2 cx [260])
        (reg:SI 0 ax [259])) "game_of_life.c":193:23 75 {*movsi_internal}
     (nil))
(insn 196 296 197 2 (parallel [
            (set (reg:SI 2 cx [260])
                (lshiftrt:SI (reg:SI 2 cx [260])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":193:23 701 {*lshrsi3_1}
     (nil))
(insn 197 196 198 2 (parallel [
            (set (reg:SI 0 ax [261])
                (plus:SI (reg:SI 0 ax [259])
                    (reg:SI 2 cx [260])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":193:23 209 {*addsi_1}
     (nil))
(insn 198 197 200 2 (parallel [
            (set (reg:SI 0 ax [262])
                (ashiftrt:SI (reg:SI 0 ax [261])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":193:23 702 {*ashrsi3_1}
     (nil))
(insn 200 198 201 2 (set (reg:DI 0 ax [orig:163 _82 ] [163])
        (sign_extend:DI (reg:SI 0 ax [orig:162 _81 ] [162]))) "game_of_life.c":193:19 147 {*extendsidi2_rex64}
     (nil))
(insn 201 200 202 2 (parallel [
            (set (reg:DI 0 ax [orig:164 _83 ] [164])
                (plus:DI (reg:DI 0 ax [orig:163 _82 ] [163])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":193:19 210 {*adddi_1}
     (nil))
(insn 202 201 203 2 (parallel [
            (set (reg:DI 0 ax [orig:165 _84 ] [165])
                (ashift:DI (reg:DI 0 ax [orig:164 _83 ] [164])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":193:19 656 {*ashldi3_1}
     (nil))
(insn 203 202 204 2 (parallel [
            (set (reg/f:DI 0 ax [orig:166 _85 ] [166])
                (plus:DI (reg:DI 0 ax [orig:165 _84 ] [165])
                    (reg/f:DI 1 dx [orig:161 _80 ] [161])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":193:19 210 {*adddi_1}
     (nil))
(insn 204 203 205 2 (set (mem:SI (reg/f:DI 0 ax [orig:166 _85 ] [166]) [2 *_85+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":193:33 75 {*movsi_internal}
     (nil))
(insn 205 204 298 2 (set (reg:SI 0 ax [263])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 N+0 S4 A32])) "game_of_life.c":194:10 75 {*movsi_internal}
     (nil))
(insn 298 205 208 2 (set (reg:SI 1 dx [264])
        (reg:SI 0 ax [263])) "game_of_life.c":194:10 75 {*movsi_internal}
     (nil))
(insn 208 298 209 2 (parallel [
            (set (reg:SI 1 dx [264])
                (lshiftrt:SI (reg:SI 1 dx [264])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":194:10 701 {*lshrsi3_1}
     (nil))
(insn 209 208 210 2 (parallel [
            (set (reg:SI 0 ax [265])
                (plus:SI (reg:SI 0 ax [263])
                    (reg:SI 1 dx [264])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":194:10 209 {*addsi_1}
     (nil))
(insn 210 209 212 2 (parallel [
            (set (reg:SI 0 ax [266])
                (ashiftrt:SI (reg:SI 0 ax [265])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":194:10 702 {*ashrsi3_1}
     (nil))
(insn 212 210 213 2 (set (reg:DI 0 ax [orig:168 _87 ] [168])
        (sign_extend:DI (reg:SI 0 ax [orig:167 _86 ] [167]))) "game_of_life.c":194:6 147 {*extendsidi2_rex64}
     (nil))
(insn 213 212 214 2 (parallel [
            (set (reg:DI 0 ax [orig:169 _88 ] [169])
                (plus:DI (reg:DI 0 ax [orig:168 _87 ] [168])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":194:6 210 {*adddi_1}
     (nil))
(insn 214 213 215 2 (parallel [
            (set (reg:DI 1 dx [orig:170 _89 ] [170])
                (ashift:DI (reg:DI 0 ax [orig:169 _88 ] [169])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":194:6 656 {*ashldi3_1}
     (nil))
(insn 215 214 216 2 (set (reg/f:DI 0 ax [267])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":194:6 74 {*movdi_internal}
     (nil))
(insn 216 215 217 2 (parallel [
            (set (reg/f:DI 0 ax [orig:171 _90 ] [171])
                (plus:DI (reg/f:DI 0 ax [267])
                    (reg:DI 1 dx [orig:170 _89 ] [170])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":194:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (reg:DI 1 dx [orig:170 _89 ] [170]))
        (nil)))
(insn 217 216 218 2 (set (reg/f:DI 1 dx [orig:172 _91 ] [172])
        (mem/f:DI (reg/f:DI 0 ax [orig:171 _90 ] [171]) [4 *_90+0 S8 A64])) "game_of_life.c":194:6 74 {*movdi_internal}
     (nil))
(insn 218 217 300 2 (set (reg:SI 0 ax [268])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 M+0 S4 A32])) "game_of_life.c":194:23 75 {*movsi_internal}
     (nil))
(insn 300 218 221 2 (set (reg:SI 2 cx [269])
        (reg:SI 0 ax [268])) "game_of_life.c":194:23 75 {*movsi_internal}
     (nil))
(insn 221 300 222 2 (parallel [
            (set (reg:SI 2 cx [269])
                (lshiftrt:SI (reg:SI 2 cx [269])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":194:23 701 {*lshrsi3_1}
     (nil))
(insn 222 221 223 2 (parallel [
            (set (reg:SI 0 ax [270])
                (plus:SI (reg:SI 0 ax [268])
                    (reg:SI 2 cx [269])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":194:23 209 {*addsi_1}
     (nil))
(insn 223 222 225 2 (parallel [
            (set (reg:SI 0 ax [271])
                (ashiftrt:SI (reg:SI 0 ax [270])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":194:23 702 {*ashrsi3_1}
     (nil))
(insn 225 223 226 2 (set (reg:DI 0 ax [orig:174 _93 ] [174])
        (sign_extend:DI (reg:SI 0 ax [orig:173 _92 ] [173]))) "game_of_life.c":194:19 147 {*extendsidi2_rex64}
     (nil))
(insn 226 225 227 2 (parallel [
            (set (reg:DI 0 ax [orig:175 _94 ] [175])
                (plus:DI (reg:DI 0 ax [orig:174 _93 ] [174])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":194:19 210 {*adddi_1}
     (nil))
(insn 227 226 228 2 (parallel [
            (set (reg:DI 0 ax [orig:176 _95 ] [176])
                (ashift:DI (reg:DI 0 ax [orig:175 _94 ] [175])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":194:19 656 {*ashldi3_1}
     (nil))
(insn 228 227 229 2 (parallel [
            (set (reg/f:DI 0 ax [orig:177 _96 ] [177])
                (plus:DI (reg:DI 0 ax [orig:176 _95 ] [176])
                    (reg/f:DI 1 dx [orig:172 _91 ] [172])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":194:19 210 {*adddi_1}
     (nil))
(insn 229 228 230 2 (set (mem:SI (reg/f:DI 0 ax [orig:177 _96 ] [177]) [2 *_96+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":194:33 75 {*movsi_internal}
     (nil))
(insn 230 229 302 2 (set (reg:SI 0 ax [272])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 N+0 S4 A32])) "game_of_life.c":195:10 75 {*movsi_internal}
     (nil))
(insn 302 230 233 2 (set (reg:SI 1 dx [273])
        (reg:SI 0 ax [272])) "game_of_life.c":195:10 75 {*movsi_internal}
     (nil))
(insn 233 302 234 2 (parallel [
            (set (reg:SI 1 dx [273])
                (lshiftrt:SI (reg:SI 1 dx [273])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":195:10 701 {*lshrsi3_1}
     (nil))
(insn 234 233 235 2 (parallel [
            (set (reg:SI 0 ax [274])
                (plus:SI (reg:SI 0 ax [272])
                    (reg:SI 1 dx [273])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":195:10 209 {*addsi_1}
     (nil))
(insn 235 234 237 2 (parallel [
            (set (reg:SI 0 ax [275])
                (ashiftrt:SI (reg:SI 0 ax [274])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":195:10 702 {*ashrsi3_1}
     (nil))
(insn 237 235 238 2 (set (reg:DI 0 ax [orig:179 _98 ] [179])
        (sign_extend:DI (reg:SI 0 ax [orig:178 _97 ] [178]))) "game_of_life.c":195:6 147 {*extendsidi2_rex64}
     (nil))
(insn 238 237 239 2 (parallel [
            (set (reg:DI 0 ax [orig:180 _99 ] [180])
                (plus:DI (reg:DI 0 ax [orig:179 _98 ] [179])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":195:6 210 {*adddi_1}
     (nil))
(insn 239 238 240 2 (parallel [
            (set (reg:DI 1 dx [orig:181 _100 ] [181])
                (ashift:DI (reg:DI 0 ax [orig:180 _99 ] [180])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":195:6 656 {*ashldi3_1}
     (nil))
(insn 240 239 241 2 (set (reg/f:DI 0 ax [276])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":195:6 74 {*movdi_internal}
     (nil))
(insn 241 240 242 2 (parallel [
            (set (reg/f:DI 0 ax [orig:182 _101 ] [182])
                (plus:DI (reg/f:DI 0 ax [276])
                    (reg:DI 1 dx [orig:181 _100 ] [181])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":195:6 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (reg:DI 1 dx [orig:181 _100 ] [181]))
        (nil)))
(insn 242 241 243 2 (set (reg/f:DI 1 dx [orig:183 _102 ] [183])
        (mem/f:DI (reg/f:DI 0 ax [orig:182 _101 ] [182]) [4 *_101+0 S8 A64])) "game_of_life.c":195:6 74 {*movdi_internal}
     (nil))
(insn 243 242 304 2 (set (reg:SI 0 ax [277])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 M+0 S4 A32])) "game_of_life.c":195:23 75 {*movsi_internal}
     (nil))
(insn 304 243 246 2 (set (reg:SI 2 cx [278])
        (reg:SI 0 ax [277])) "game_of_life.c":195:23 75 {*movsi_internal}
     (nil))
(insn 246 304 247 2 (parallel [
            (set (reg:SI 2 cx [278])
                (lshiftrt:SI (reg:SI 2 cx [278])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":195:23 701 {*lshrsi3_1}
     (nil))
(insn 247 246 248 2 (parallel [
            (set (reg:SI 0 ax [279])
                (plus:SI (reg:SI 0 ax [277])
                    (reg:SI 2 cx [278])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":195:23 209 {*addsi_1}
     (nil))
(insn 248 247 250 2 (parallel [
            (set (reg:SI 0 ax [280])
                (ashiftrt:SI (reg:SI 0 ax [279])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":195:23 702 {*ashrsi3_1}
     (nil))
(insn 250 248 251 2 (set (reg:DI 0 ax [orig:185 _104 ] [185])
        (sign_extend:DI (reg:SI 0 ax [orig:184 _103 ] [184]))) "game_of_life.c":195:19 147 {*extendsidi2_rex64}
     (nil))
(insn 251 250 252 2 (parallel [
            (set (reg:DI 0 ax [orig:186 _105 ] [186])
                (plus:DI (reg:DI 0 ax [orig:185 _104 ] [185])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":195:19 210 {*adddi_1}
     (nil))
(insn 252 251 253 2 (parallel [
            (set (reg:DI 0 ax [orig:187 _106 ] [187])
                (ashift:DI (reg:DI 0 ax [orig:186 _105 ] [186])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":195:19 656 {*ashldi3_1}
     (nil))
(insn 253 252 254 2 (parallel [
            (set (reg/f:DI 0 ax [orig:188 _107 ] [188])
                (plus:DI (reg:DI 0 ax [orig:187 _106 ] [187])
                    (reg/f:DI 1 dx [orig:183 _102 ] [183])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":195:19 210 {*adddi_1}
     (nil))
(insn 254 253 255 2 (set (mem:SI (reg/f:DI 0 ax [orig:188 _107 ] [188]) [2 *_107+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":195:33 75 {*movsi_internal}
     (nil))
(insn 255 254 263 2 (set (reg/f:DI 0 ax [orig:189 _122 ] [189])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])) "game_of_life.c":197:12 74 {*movdi_internal}
     (nil))
(insn 263 255 265 2 (use (reg/i:DI 0 ax)) "game_of_life.c":198:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 265 263 0 NOTE_INSN_DELETED)

;; Function dynamic_array_move_life (dynamic_array_move_life, funcdef_no=16, decl_uid=4960, cgraph_uid=17, symbol_order=16)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=48, prev_offset=0)
Can eliminate 19 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 14:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 27
	 Choosing alt 0 in insn 27:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 32
	 Choosing alt 0 in insn 32:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 37
	 Choosing alt 0 in insn 37:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 42
	 Choosing alt 0 in insn 42:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 45:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 50:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 53:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 58:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 65:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 69:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 71:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (1) rBwBz {*call_value}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 78:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 79:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 80
	 Choosing alt 0 in insn 80:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 81:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (1) rBwBz {*call_value}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 90
	 Choosing alt 0 in insn 90:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 95:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 99:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (1) rBwBz {*call_value}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 106:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 107:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 108
	 Choosing alt 0 in insn 108:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 109:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 111:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (1) rBwBz {*call_value}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 119
	 Choosing alt 0 in insn 119:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 124:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (1) rBwBz {*call_value}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 134:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 135:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 136
	 Choosing alt 0 in insn 136:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 137:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 139:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (1) rBwBz {*call_value}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 147
	 Choosing alt 0 in insn 147:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 149:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 152:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 156:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 157:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (1) rBwBz {*call_value}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 162:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 163:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 164:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 165
	 Choosing alt 0 in insn 165:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 166:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 168:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 172:  (1) rBwBz {*call_value}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 174:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 175:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 176
	 Choosing alt 0 in insn 176:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 177:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 178:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 181:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 184:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 185:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 186:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 189:  (1) rBwBz {*call_value}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 191:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 192:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 193:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 194
	 Choosing alt 0 in insn 194:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 195:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 196:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 197:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 200:  (1) rBwBz {*call_value}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 202:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 203:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 204
	 Choosing alt 0 in insn 204:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 205:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 206:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 209:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 212:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 213:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 214:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 217:  (1) rBwBz {*call_value}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 219:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 220:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 221:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 222
	 Choosing alt 0 in insn 222:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 223:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 224:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 225:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 226:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 229:  (1) rBwBz {*call_value}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 231:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 232:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 233
	 Choosing alt 0 in insn 233:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 234:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 235:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 238:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 241:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 242:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 245:  (1) rBwBz {*call_value}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 247:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 248:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 249:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 250
	 Choosing alt 0 in insn 250:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 251:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 252:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 253:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 254:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 257:  (1) rBwBz {*call_value}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 259:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 260:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 261
	 Choosing alt 0 in insn 261:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 262:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 263:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 266:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 269:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 270:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 271:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 274:  (1) rBwBz {*call_value}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 276:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 277:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 278:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 279
	 Choosing alt 0 in insn 279:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 280:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 281:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 282:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 283:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 286:  (1) rBwBz {*call_value}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 288:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 289:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 290
	 Choosing alt 0 in insn 290:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 291:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 292:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 295:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 298:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 299:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 300:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 301:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 302
	 Choosing alt 0 in insn 302:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 303:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 304:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 305:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 306:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 307
	 Choosing alt 0 in insn 307:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 308:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 309:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 312:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 315:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 319:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 320:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 321:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 322:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 323
	 Choosing alt 0 in insn 323:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 324:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 325:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 326:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 327:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 328
	 Choosing alt 0 in insn 328:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 329:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 334:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 335:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 336:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 337:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 338
	 Choosing alt 0 in insn 338:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 339:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 340:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 341:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 342:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 343
	 Choosing alt 0 in insn 343:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 344:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 347:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 348:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 349:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 350:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 351
	 Choosing alt 0 in insn 351:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 352:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 353:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 354:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 355:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 356
	 Choosing alt 0 in insn 356:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 357:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 358:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 361:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 364:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 365:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 366:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 367:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 368
	 Choosing alt 0 in insn 368:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 369:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 370:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 371:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 372:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 373
	 Choosing alt 0 in insn 373:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 374:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 377:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 381:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 382:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 385:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 389:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 390:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 393:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 394:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 397:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 398:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5 6
EBB 7 8
EBB 9
EBB 10 11
EBB 12 13
EBB 14 15
EBB 16 17
EBB 18 19
EBB 20 21
EBB 22 23
EBB 24 25
EBB 26 27 28
EBB 29
EBB 30
EBB 31 32 33
EBB 34
EBB 35 36
EBB 37 38

********** Pseudo live ranges #1: **********

  BB 38
   Insn 406: point = 0, n_alt = -1
   Insn 405: point = 0, n_alt = -2
   Insn 401: point = 1, n_alt = -2
   Insn 398: point = 3, n_alt = 3
   Insn 397: point = 4, n_alt = 0
   Insn 396: point = 4, n_alt = -2
   Insn 395: point = 5, n_alt = -2
   Insn 394: point = 6, n_alt = 3
   Insn 393: point = 7, n_alt = 0
  BB 37
   Insn 391: point = 8, n_alt = -1
   Insn 390: point = 8, n_alt = 1
   Insn 389: point = 9, n_alt = 0
  BB 8
   Insn 412: point = 10, n_alt = -1
   Insn 61: point = 10, n_alt = 1
  BB 7
   Insn 59: point = 10, n_alt = -1
   Insn 58: point = 10, n_alt = 1
   Insn 57: point = 11, n_alt = 0
  BB 2
   Insn 408: point = 12, n_alt = -1
   Insn 15: point = 12, n_alt = 1
   Insn 14: point = 12, n_alt = 5
   Insn 13: point = 13, n_alt = -2
   Insn 12: point = 14, n_alt = 0
   Insn 11: point = 14, n_alt = -2
   Insn 10: point = 15, n_alt = -2
   Insn 9: point = 16, n_alt = 0
   Insn 8: point = 17, n_alt = 0
   Insn 4: point = 18, n_alt = 1
   Insn 3: point = 18, n_alt = 1
   Insn 2: point = 18, n_alt = 5
  BB 6
   Insn 53: point = 18, n_alt = 0
  BB 5
   Insn 51: point = 18, n_alt = -1
   Insn 50: point = 18, n_alt = 1
   Insn 49: point = 19, n_alt = 0
  BB 3
   Insn 410: point = 20, n_alt = -1
   Insn 19: point = 20, n_alt = 1
  BB 4
   Insn 45: point = 20, n_alt = 0
   Insn 44: point = 20, n_alt = 1
   Insn 43: point = 21, n_alt = 0
   Insn 42: point = 23, n_alt = 0
   Insn 41: point = 25, n_alt = 0
   Insn 40: point = 27, n_alt = 1
   Insn 39: point = 29, n_alt = 0
   Insn 38: point = 30, n_alt = 3
   Insn 37: point = 32, n_alt = 0
   Insn 36: point = 34, n_alt = 3
   Insn 35: point = 35, n_alt = 1
   Insn 34: point = 37, n_alt = 1
   Insn 33: point = 39, n_alt = 0
   Insn 32: point = 40, n_alt = 0
   Insn 31: point = 42, n_alt = 0
   Insn 30: point = 44, n_alt = 0
   Insn 29: point = 46, n_alt = 0
   Insn 28: point = 47, n_alt = 3
   Insn 27: point = 49, n_alt = 0
   Insn 26: point = 51, n_alt = 3
   Insn 25: point = 52, n_alt = 1
   Insn 24: point = 54, n_alt = 0
   Insn 23: point = 56, n_alt = 0
  BB 36
   Insn 385: point = 57, n_alt = 0
  BB 35
   Insn 383: point = 57, n_alt = -1
   Insn 382: point = 57, n_alt = 1
   Insn 381: point = 58, n_alt = 0
  BB 9
   Insn 414: point = 59, n_alt = -1
   Insn 65: point = 59, n_alt = 1
  BB 34
   Insn 377: point = 59, n_alt = 0
  BB 33
   Insn 374: point = 59, n_alt = 1
   Insn 373: point = 60, n_alt = 0
   Insn 372: point = 62, n_alt = 0
   Insn 371: point = 64, n_alt = 0
   Insn 370: point = 66, n_alt = 0
   Insn 369: point = 67, n_alt = 3
   Insn 368: point = 69, n_alt = 0
   Insn 367: point = 71, n_alt = 3
   Insn 366: point = 72, n_alt = 1
   Insn 365: point = 74, n_alt = 0
   Insn 364: point = 76, n_alt = 0
  BB 32
   Insn 362: point = 77, n_alt = -1
   Insn 361: point = 77, n_alt = 0
  BB 31
   Insn 359: point = 77, n_alt = -1
   Insn 358: point = 77, n_alt = 0
   Insn 357: point = 78, n_alt = 0
   Insn 356: point = 80, n_alt = 0
   Insn 355: point = 82, n_alt = 0
   Insn 354: point = 84, n_alt = 0
   Insn 353: point = 86, n_alt = 0
   Insn 352: point = 87, n_alt = 3
   Insn 351: point = 89, n_alt = 0
   Insn 350: point = 91, n_alt = 3
   Insn 349: point = 92, n_alt = 1
   Insn 348: point = 94, n_alt = 0
   Insn 347: point = 96, n_alt = 0
  BB 29
   Insn 416: point = 97, n_alt = -1
   Insn 329: point = 97, n_alt = 1
   Insn 328: point = 98, n_alt = 0
   Insn 327: point = 100, n_alt = 0
   Insn 326: point = 102, n_alt = 0
   Insn 325: point = 104, n_alt = 0
   Insn 324: point = 105, n_alt = 3
   Insn 323: point = 107, n_alt = 0
   Insn 322: point = 109, n_alt = 3
   Insn 321: point = 110, n_alt = 1
   Insn 320: point = 112, n_alt = 0
   Insn 319: point = 114, n_alt = 0
  BB 30
   Insn 344: point = 115, n_alt = 1
   Insn 343: point = 116, n_alt = 0
   Insn 342: point = 118, n_alt = 0
   Insn 341: point = 120, n_alt = 0
   Insn 340: point = 122, n_alt = 0
   Insn 339: point = 123, n_alt = 3
   Insn 338: point = 125, n_alt = 0
   Insn 337: point = 127, n_alt = 3
   Insn 336: point = 128, n_alt = 1
   Insn 335: point = 130, n_alt = 0
   Insn 334: point = 132, n_alt = 0
  BB 28
   Insn 316: point = 133, n_alt = -1
   Insn 315: point = 133, n_alt = 0
  BB 27
   Insn 313: point = 133, n_alt = -1
   Insn 312: point = 133, n_alt = 0
  BB 26
   Insn 310: point = 133, n_alt = -1
   Insn 309: point = 133, n_alt = 0
   Insn 308: point = 134, n_alt = 0
   Insn 307: point = 136, n_alt = 0
   Insn 306: point = 138, n_alt = 0
   Insn 305: point = 140, n_alt = 0
   Insn 304: point = 142, n_alt = 0
   Insn 303: point = 143, n_alt = 3
   Insn 302: point = 145, n_alt = 0
   Insn 301: point = 147, n_alt = 3
   Insn 300: point = 148, n_alt = 1
   Insn 299: point = 150, n_alt = 0
   Insn 298: point = 152, n_alt = 0
  BB 25
   Insn 295: point = 153, n_alt = 0
  BB 24
   Insn 293: point = 153, n_alt = -1
   Insn 292: point = 153, n_alt = 0
   Insn 291: point = 154, n_alt = 0
   Insn 290: point = 156, n_alt = 0
   Insn 289: point = 158, n_alt = 0
   Insn 288: point = 160, n_alt = 0
   Insn 287: point = 162, n_alt = -2
   Insn 286: point = 163, n_alt = 0
   Insn 285: point = 163, n_alt = -2
   Insn 284: point = 164, n_alt = -2
   Insn 283: point = 165, n_alt = 0
   Insn 282: point = 166, n_alt = 3
   Insn 281: point = 168, n_alt = 0
   Insn 280: point = 169, n_alt = 3
   Insn 279: point = 171, n_alt = 0
   Insn 278: point = 173, n_alt = 3
   Insn 277: point = 174, n_alt = 1
   Insn 276: point = 176, n_alt = 0
   Insn 275: point = 178, n_alt = -2
   Insn 274: point = 179, n_alt = 0
   Insn 273: point = 179, n_alt = -2
   Insn 272: point = 180, n_alt = -2
   Insn 271: point = 181, n_alt = 0
   Insn 270: point = 182, n_alt = 3
   Insn 269: point = 184, n_alt = 0
  BB 23
   Insn 266: point = 185, n_alt = 0
  BB 22
   Insn 264: point = 185, n_alt = -1
   Insn 263: point = 185, n_alt = 0
   Insn 262: point = 186, n_alt = 0
   Insn 261: point = 188, n_alt = 0
   Insn 260: point = 190, n_alt = 0
   Insn 259: point = 192, n_alt = 0
   Insn 258: point = 194, n_alt = -2
   Insn 257: point = 195, n_alt = 0
   Insn 256: point = 195, n_alt = -2
   Insn 255: point = 196, n_alt = -2
   Insn 254: point = 197, n_alt = 0
   Insn 253: point = 198, n_alt = 3
   Insn 252: point = 200, n_alt = 0
   Insn 251: point = 201, n_alt = 3
   Insn 250: point = 203, n_alt = 0
   Insn 249: point = 205, n_alt = 3
   Insn 248: point = 206, n_alt = 1
   Insn 247: point = 208, n_alt = 0
   Insn 246: point = 210, n_alt = -2
   Insn 245: point = 211, n_alt = 0
   Insn 244: point = 211, n_alt = -2
   Insn 243: point = 212, n_alt = -2
   Insn 242: point = 213, n_alt = 0
   Insn 241: point = 214, n_alt = 0
  BB 21
   Insn 238: point = 215, n_alt = 0
  BB 20
   Insn 236: point = 215, n_alt = -1
   Insn 235: point = 215, n_alt = 0
   Insn 234: point = 216, n_alt = 0
   Insn 233: point = 218, n_alt = 0
   Insn 232: point = 220, n_alt = 0
   Insn 231: point = 222, n_alt = 0
   Insn 230: point = 224, n_alt = -2
   Insn 229: point = 225, n_alt = 0
   Insn 228: point = 225, n_alt = -2
   Insn 227: point = 226, n_alt = -2
   Insn 226: point = 227, n_alt = 0
   Insn 225: point = 228, n_alt = 3
   Insn 224: point = 230, n_alt = 0
   Insn 223: point = 231, n_alt = 3
   Insn 222: point = 233, n_alt = 0
   Insn 221: point = 235, n_alt = 3
   Insn 220: point = 236, n_alt = 1
   Insn 219: point = 238, n_alt = 0
   Insn 218: point = 240, n_alt = -2
   Insn 217: point = 241, n_alt = 0
   Insn 216: point = 241, n_alt = -2
   Insn 215: point = 242, n_alt = -2
   Insn 214: point = 243, n_alt = 0
   Insn 213: point = 244, n_alt = 3
   Insn 212: point = 246, n_alt = 0
  BB 19
   Insn 209: point = 247, n_alt = 0
  BB 18
   Insn 207: point = 247, n_alt = -1
   Insn 206: point = 247, n_alt = 0
   Insn 205: point = 248, n_alt = 0
   Insn 204: point = 250, n_alt = 0
   Insn 203: point = 252, n_alt = 0
   Insn 202: point = 254, n_alt = 0
   Insn 201: point = 256, n_alt = -2
   Insn 200: point = 257, n_alt = 0
   Insn 199: point = 257, n_alt = -2
   Insn 198: point = 258, n_alt = -2
   Insn 197: point = 259, n_alt = 0
   Insn 196: point = 260, n_alt = 0
   Insn 195: point = 261, n_alt = 3
   Insn 194: point = 263, n_alt = 0
   Insn 193: point = 265, n_alt = 3
   Insn 192: point = 266, n_alt = 1
   Insn 191: point = 268, n_alt = 0
   Insn 190: point = 270, n_alt = -2
   Insn 189: point = 271, n_alt = 0
   Insn 188: point = 271, n_alt = -2
   Insn 187: point = 272, n_alt = -2
   Insn 186: point = 273, n_alt = 0
   Insn 185: point = 274, n_alt = 3
   Insn 184: point = 276, n_alt = 0
  BB 17
   Insn 181: point = 277, n_alt = 0
  BB 16
   Insn 179: point = 277, n_alt = -1
   Insn 178: point = 277, n_alt = 0
   Insn 177: point = 278, n_alt = 0
   Insn 176: point = 280, n_alt = 0
   Insn 175: point = 282, n_alt = 0
   Insn 174: point = 284, n_alt = 0
   Insn 173: point = 286, n_alt = -2
   Insn 172: point = 287, n_alt = 0
   Insn 171: point = 287, n_alt = -2
   Insn 170: point = 288, n_alt = -2
   Insn 169: point = 289, n_alt = 0
   Insn 168: point = 290, n_alt = 3
   Insn 167: point = 292, n_alt = 0
   Insn 166: point = 293, n_alt = 3
   Insn 165: point = 295, n_alt = 0
   Insn 164: point = 297, n_alt = 3
   Insn 163: point = 298, n_alt = 1
   Insn 162: point = 300, n_alt = 0
   Insn 161: point = 302, n_alt = -2
   Insn 160: point = 303, n_alt = 0
   Insn 159: point = 303, n_alt = -2
   Insn 158: point = 304, n_alt = -2
   Insn 157: point = 305, n_alt = 0
   Insn 156: point = 306, n_alt = 3
   Insn 155: point = 308, n_alt = 0
  BB 15
   Insn 152: point = 309, n_alt = 0
  BB 14
   Insn 150: point = 309, n_alt = -1
   Insn 149: point = 309, n_alt = 0
   Insn 148: point = 310, n_alt = 0
   Insn 147: point = 312, n_alt = 0
   Insn 146: point = 314, n_alt = 0
   Insn 145: point = 316, n_alt = 0
   Insn 144: point = 318, n_alt = -2
   Insn 143: point = 319, n_alt = 0
   Insn 142: point = 319, n_alt = -2
   Insn 141: point = 320, n_alt = -2
   Insn 140: point = 321, n_alt = 0
   Insn 139: point = 322, n_alt = 3
   Insn 138: point = 324, n_alt = 0
   Insn 137: point = 325, n_alt = 3
   Insn 136: point = 327, n_alt = 0
   Insn 135: point = 329, n_alt = 3
   Insn 134: point = 330, n_alt = 1
   Insn 133: point = 332, n_alt = 0
   Insn 132: point = 334, n_alt = -2
   Insn 131: point = 335, n_alt = 0
   Insn 130: point = 335, n_alt = -2
   Insn 129: point = 336, n_alt = -2
   Insn 128: point = 337, n_alt = 0
   Insn 127: point = 338, n_alt = 0
  BB 13
   Insn 124: point = 339, n_alt = 0
  BB 12
   Insn 122: point = 339, n_alt = -1
   Insn 121: point = 339, n_alt = 0
   Insn 120: point = 340, n_alt = 0
   Insn 119: point = 342, n_alt = 0
   Insn 118: point = 344, n_alt = 0
   Insn 117: point = 346, n_alt = 0
   Insn 116: point = 348, n_alt = -2
   Insn 115: point = 349, n_alt = 0
   Insn 114: point = 349, n_alt = -2
   Insn 113: point = 350, n_alt = -2
   Insn 112: point = 351, n_alt = 0
   Insn 111: point = 352, n_alt = 3
   Insn 110: point = 354, n_alt = 0
   Insn 109: point = 355, n_alt = 3
   Insn 108: point = 357, n_alt = 0
   Insn 107: point = 359, n_alt = 3
   Insn 106: point = 360, n_alt = 1
   Insn 105: point = 362, n_alt = 0
   Insn 104: point = 364, n_alt = -2
   Insn 103: point = 365, n_alt = 0
   Insn 102: point = 365, n_alt = -2
   Insn 101: point = 366, n_alt = -2
   Insn 100: point = 367, n_alt = 0
   Insn 99: point = 368, n_alt = 3
   Insn 98: point = 370, n_alt = 0
  BB 11
   Insn 95: point = 371, n_alt = 0
  BB 10
   Insn 93: point = 371, n_alt = -1
   Insn 92: point = 371, n_alt = 0
   Insn 91: point = 372, n_alt = 0
   Insn 90: point = 374, n_alt = 0
   Insn 89: point = 376, n_alt = 0
   Insn 88: point = 378, n_alt = 0
   Insn 87: point = 380, n_alt = -2
   Insn 86: point = 381, n_alt = 0
   Insn 85: point = 381, n_alt = -2
   Insn 84: point = 382, n_alt = -2
   Insn 83: point = 383, n_alt = 0
   Insn 82: point = 384, n_alt = 0
   Insn 81: point = 385, n_alt = 3
   Insn 80: point = 387, n_alt = 0
   Insn 79: point = 389, n_alt = 3
   Insn 78: point = 390, n_alt = 1
   Insn 77: point = 392, n_alt = 0
   Insn 76: point = 394, n_alt = -2
   Insn 75: point = 395, n_alt = 0
   Insn 74: point = 395, n_alt = -2
   Insn 73: point = 396, n_alt = -2
   Insn 72: point = 397, n_alt = 0
   Insn 71: point = 398, n_alt = 3
   Insn 70: point = 400, n_alt = 0
   Insn 69: point = 401, n_alt = 1
 r82: [53..54]
 r83: [50..52]
 r84: [48..49]
 r85: [41..47]
 r86: [43..44]
 r87: [41..42]
 r88: [22..40]
 r89: [36..37]
 r90: [33..35]
 r91: [31..32]
 r92: [24..30]
 r93: [26..27]
 r94: [24..25]
 r95: [20..23]
 r96: [20..21]
 r97: [395..398]
 r98: [393..394]
 r99: [391..392]
 r100: [388..390]
 r101: [386..387]
 r102: [375..385]
 r103: [379..380]
 r104: [377..378]
 r105: [375..376]
 r106: [373..374]
 r107: [371..372]
 r108: [365..368]
 r109: [363..364]
 r110: [361..362]
 r111: [358..360]
 r112: [356..357]
 r113: [343..355]
 r114: [349..352]
 r115: [347..348]
 r116: [345..346]
 r117: [343..344]
 r118: [341..342]
 r119: [339..340]
 r120: [333..334]
 r121: [331..332]
 r122: [328..330]
 r123: [326..327]
 r124: [313..325]
 r125: [319..322]
 r126: [317..318]
 r127: [315..316]
 r128: [313..314]
 r129: [311..312]
 r130: [309..310]
 r131: [303..306]
 r132: [301..302]
 r133: [299..300]
 r134: [296..298]
 r135: [294..295]
 r136: [281..293]
 r137: [287..290]
 r138: [285..286]
 r139: [283..284]
 r140: [281..282]
 r141: [279..280]
 r142: [277..278]
 r143: [271..274]
 r144: [269..270]
 r145: [267..268]
 r146: [264..266]
 r147: [262..263]
 r148: [251..261]
 r149: [255..256]
 r150: [253..254]
 r151: [251..252]
 r152: [249..250]
 r153: [247..248]
 r154: [241..244]
 r155: [239..240]
 r156: [237..238]
 r157: [234..236]
 r158: [232..233]
 r159: [219..231]
 r160: [225..228]
 r161: [223..224]
 r162: [221..222]
 r163: [219..220]
 r164: [217..218]
 r165: [215..216]
 r166: [209..210]
 r167: [207..208]
 r168: [204..206]
 r169: [202..203]
 r170: [189..201]
 r171: [195..198]
 r172: [193..194]
 r173: [191..192]
 r174: [189..190]
 r175: [187..188]
 r176: [185..186]
 r177: [179..182]
 r178: [177..178]
 r179: [175..176]
 r180: [172..174]
 r181: [170..171]
 r182: [157..169]
 r183: [163..166]
 r184: [161..162]
 r185: [159..160]
 r186: [157..158]
 r187: [155..156]
 r188: [153..154]
 r189: [149..150]
 r190: [146..148]
 r191: [144..145]
 r192: [137..143]
 r193: [139..140]
 r194: [137..138]
 r195: [135..136]
 r196: [133..134]
 r197: [111..112]
 r198: [108..110]
 r199: [106..107]
 r200: [99..105]
 r201: [101..102]
 r202: [99..100]
 r203: [97..98]
 r204: [129..130]
 r205: [126..128]
 r206: [124..125]
 r207: [117..123]
 r208: [119..120]
 r209: [117..118]
 r210: [115..116]
 r211: [93..94]
 r212: [90..92]
 r213: [88..89]
 r214: [81..87]
 r215: [83..84]
 r216: [81..82]
 r217: [79..80]
 r218: [77..78]
 r219: [73..74]
 r220: [70..72]
 r221: [68..69]
 r222: [61..67]
 r223: [63..64]
 r224: [61..62]
 r225: [59..60]
 r226: [2..3]
 r227: [0..1]
 r228: [15..17]
 r229: [14..16]
 r230: [12..13]
 r231: [55..56]
 r232: [50..51]
 r233: [45..46]
 r234: [38..39]
 r235: [33..34]
 r236: [28..29]
 r237: [18..19]
 r238: [10..11]
 r239: [399..400]
 r240: [396..397]
 r241: [388..389]
 r242: [382..384]
 r243: [381..383]
 r244: [369..370]
 r245: [366..367]
 r246: [358..359]
 r247: [353..354]
 r248: [350..351]
 r249: [336..338]
 r250: [335..337]
 r251: [328..329]
 r252: [323..324]
 r253: [320..321]
 r254: [307..308]
 r255: [304..305]
 r256: [296..297]
 r257: [291..292]
 r258: [288..289]
 r259: [275..276]
 r260: [272..273]
 r261: [264..265]
 r262: [258..260]
 r263: [257..259]
 r264: [245..246]
 r265: [242..243]
 r266: [234..235]
 r267: [229..230]
 r268: [226..227]
 r269: [212..214]
 r270: [211..213]
 r271: [204..205]
 r272: [199..200]
 r273: [196..197]
 r274: [183..184]
 r275: [180..181]
 r276: [172..173]
 r277: [167..168]
 r278: [164..165]
 r279: [151..152]
 r280: [146..147]
 r281: [141..142]
 r282: [113..114]
 r283: [108..109]
 r284: [103..104]
 r285: [131..132]
 r286: [126..127]
 r287: [121..122]
 r288: [95..96]
 r289: [90..91]
 r290: [85..86]
 r291: [75..76]
 r292: [70..71]
 r293: [65..66]
 r294: [57..58]
 r295: [8..9]
 r296: [5..7]
 r297: [4..6]
Compressing live ranges: from 401 to 334 - 83%
Ranges after the compression:
 r82: [44..45]
 r83: [42..43]
 r84: [40..41]
 r85: [34..39]
 r86: [36..37]
 r87: [34..35]
 r88: [18..33]
 r89: [30..31]
 r90: [28..29]
 r91: [26..27]
 r92: [20..25]
 r93: [22..23]
 r94: [20..21]
 r95: [16..19]
 r96: [16..17]
 r97: [330..331]
 r98: [328..329]
 r99: [326..327]
 r100: [324..325]
 r101: [322..323]
 r102: [314..321]
 r103: [318..319]
 r104: [316..317]
 r105: [314..315]
 r106: [312..313]
 r107: [310..311]
 r108: [306..307]
 r109: [304..305]
 r110: [302..303]
 r111: [300..301]
 r112: [298..299]
 r113: [288..297]
 r114: [294..295]
 r115: [292..293]
 r116: [290..291]
 r117: [288..289]
 r118: [286..287]
 r119: [284..285]
 r120: [280..281]
 r121: [278..279]
 r122: [276..277]
 r123: [274..275]
 r124: [264..273]
 r125: [270..271]
 r126: [268..269]
 r127: [266..267]
 r128: [264..265]
 r129: [262..263]
 r130: [260..261]
 r131: [256..257]
 r132: [254..255]
 r133: [252..253]
 r134: [250..251]
 r135: [248..249]
 r136: [238..247]
 r137: [244..245]
 r138: [242..243]
 r139: [240..241]
 r140: [238..239]
 r141: [236..237]
 r142: [234..235]
 r143: [230..231]
 r144: [228..229]
 r145: [226..227]
 r146: [224..225]
 r147: [222..223]
 r148: [214..221]
 r149: [218..219]
 r150: [216..217]
 r151: [214..215]
 r152: [212..213]
 r153: [210..211]
 r154: [206..207]
 r155: [204..205]
 r156: [202..203]
 r157: [200..201]
 r158: [198..199]
 r159: [188..197]
 r160: [194..195]
 r161: [192..193]
 r162: [190..191]
 r163: [188..189]
 r164: [186..187]
 r165: [184..185]
 r166: [180..181]
 r167: [178..179]
 r168: [176..177]
 r169: [174..175]
 r170: [164..173]
 r171: [170..171]
 r172: [168..169]
 r173: [166..167]
 r174: [164..165]
 r175: [162..163]
 r176: [160..161]
 r177: [156..157]
 r178: [154..155]
 r179: [152..153]
 r180: [150..151]
 r181: [148..149]
 r182: [138..147]
 r183: [144..145]
 r184: [142..143]
 r185: [140..141]
 r186: [138..139]
 r187: [136..137]
 r188: [134..135]
 r189: [130..131]
 r190: [128..129]
 r191: [126..127]
 r192: [120..125]
 r193: [122..123]
 r194: [120..121]
 r195: [118..119]
 r196: [116..117]
 r197: [96..97]
 r198: [94..95]
 r199: [92..93]
 r200: [86..91]
 r201: [88..89]
 r202: [86..87]
 r203: [84..85]
 r204: [112..113]
 r205: [110..111]
 r206: [108..109]
 r207: [102..107]
 r208: [104..105]
 r209: [102..103]
 r210: [100..101]
 r211: [80..81]
 r212: [78..79]
 r213: [76..77]
 r214: [70..75]
 r215: [72..73]
 r216: [70..71]
 r217: [68..69]
 r218: [66..67]
 r219: [62..63]
 r220: [60..61]
 r221: [58..59]
 r222: [52..57]
 r223: [54..55]
 r224: [52..53]
 r225: [50..51]
 r226: [2..3]
 r227: [0..1]
 r228: [12..13]
 r229: [12..13]
 r230: [10..11]
 r231: [46..47]
 r232: [42..43]
 r233: [38..39]
 r234: [32..33]
 r235: [28..29]
 r236: [24..25]
 r237: [14..15]
 r238: [8..9]
 r239: [332..333]
 r240: [330..331]
 r241: [324..325]
 r242: [320..321]
 r243: [320..321]
 r244: [308..309]
 r245: [306..307]
 r246: [300..301]
 r247: [296..297]
 r248: [294..295]
 r249: [282..283]
 r250: [282..283]
 r251: [276..277]
 r252: [272..273]
 r253: [270..271]
 r254: [258..259]
 r255: [256..257]
 r256: [250..251]
 r257: [246..247]
 r258: [244..245]
 r259: [232..233]
 r260: [230..231]
 r261: [224..225]
 r262: [220..221]
 r263: [220..221]
 r264: [208..209]
 r265: [206..207]
 r266: [200..201]
 r267: [196..197]
 r268: [194..195]
 r269: [182..183]
 r270: [182..183]
 r271: [176..177]
 r272: [172..173]
 r273: [170..171]
 r274: [158..159]
 r275: [156..157]
 r276: [150..151]
 r277: [146..147]
 r278: [144..145]
 r279: [132..133]
 r280: [128..129]
 r281: [124..125]
 r282: [98..99]
 r283: [94..95]
 r284: [90..91]
 r285: [114..115]
 r286: [110..111]
 r287: [106..107]
 r288: [82..83]
 r289: [78..79]
 r290: [74..75]
 r291: [64..65]
 r292: [60..61]
 r293: [56..57]
 r294: [48..49]
 r295: [6..7]
 r296: [4..5]
 r297: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=48, prev_offset=0)
Can eliminate 19 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 27
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 32
changing reg in insn 43
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 37
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 42
changing reg in insn 44
changing reg in insn 43
changing reg in insn 44
changing reg in insn 71
changing reg in insn 74
changing reg in insn 76
changing reg in insn 77
changing reg in insn 77
changing reg in insn 78
changing reg in insn 78
changing reg in insn 80
changing reg in insn 80
changing reg in insn 81
changing reg in insn 81
changing reg in insn 87
changing reg in insn 88
changing reg in insn 88
changing reg in insn 89
changing reg in insn 89
changing reg in insn 90
changing reg in insn 91
changing reg in insn 91
changing reg in insn 92
changing reg in insn 99
changing reg in insn 102
changing reg in insn 104
changing reg in insn 105
changing reg in insn 105
changing reg in insn 106
changing reg in insn 106
changing reg in insn 108
changing reg in insn 108
changing reg in insn 109
changing reg in insn 109
changing reg in insn 111
changing reg in insn 114
changing reg in insn 116
changing reg in insn 117
changing reg in insn 117
changing reg in insn 118
changing reg in insn 118
changing reg in insn 119
changing reg in insn 120
changing reg in insn 120
changing reg in insn 121
changing reg in insn 132
changing reg in insn 133
changing reg in insn 133
changing reg in insn 134
changing reg in insn 134
changing reg in insn 136
changing reg in insn 136
changing reg in insn 137
changing reg in insn 137
changing reg in insn 139
changing reg in insn 142
changing reg in insn 144
changing reg in insn 145
changing reg in insn 145
changing reg in insn 146
changing reg in insn 146
changing reg in insn 147
changing reg in insn 148
changing reg in insn 148
changing reg in insn 149
changing reg in insn 156
changing reg in insn 159
changing reg in insn 161
changing reg in insn 162
changing reg in insn 162
changing reg in insn 163
changing reg in insn 163
changing reg in insn 165
changing reg in insn 165
changing reg in insn 166
changing reg in insn 166
changing reg in insn 168
changing reg in insn 171
changing reg in insn 173
changing reg in insn 174
changing reg in insn 174
changing reg in insn 175
changing reg in insn 175
changing reg in insn 176
changing reg in insn 177
changing reg in insn 177
changing reg in insn 178
changing reg in insn 185
changing reg in insn 188
changing reg in insn 190
changing reg in insn 191
changing reg in insn 191
changing reg in insn 192
changing reg in insn 192
changing reg in insn 194
changing reg in insn 194
changing reg in insn 195
changing reg in insn 195
changing reg in insn 201
changing reg in insn 202
changing reg in insn 202
changing reg in insn 203
changing reg in insn 203
changing reg in insn 204
changing reg in insn 205
changing reg in insn 205
changing reg in insn 206
changing reg in insn 213
changing reg in insn 216
changing reg in insn 218
changing reg in insn 219
changing reg in insn 219
changing reg in insn 220
changing reg in insn 220
changing reg in insn 222
changing reg in insn 222
changing reg in insn 223
changing reg in insn 223
changing reg in insn 225
changing reg in insn 228
changing reg in insn 230
changing reg in insn 231
changing reg in insn 231
changing reg in insn 232
changing reg in insn 232
changing reg in insn 233
changing reg in insn 234
changing reg in insn 234
changing reg in insn 235
changing reg in insn 246
changing reg in insn 247
changing reg in insn 247
changing reg in insn 248
changing reg in insn 248
changing reg in insn 250
changing reg in insn 250
changing reg in insn 251
changing reg in insn 251
changing reg in insn 253
changing reg in insn 256
changing reg in insn 258
changing reg in insn 259
changing reg in insn 259
changing reg in insn 260
changing reg in insn 260
changing reg in insn 261
changing reg in insn 262
changing reg in insn 262
changing reg in insn 263
changing reg in insn 270
changing reg in insn 273
changing reg in insn 275
changing reg in insn 276
changing reg in insn 276
changing reg in insn 277
changing reg in insn 277
changing reg in insn 279
changing reg in insn 279
changing reg in insn 280
changing reg in insn 280
changing reg in insn 282
changing reg in insn 285
changing reg in insn 287
changing reg in insn 288
changing reg in insn 288
changing reg in insn 289
changing reg in insn 289
changing reg in insn 290
changing reg in insn 291
changing reg in insn 291
changing reg in insn 292
changing reg in insn 299
changing reg in insn 300
changing reg in insn 300
changing reg in insn 302
changing reg in insn 302
changing reg in insn 303
changing reg in insn 303
changing reg in insn 305
changing reg in insn 306
changing reg in insn 306
changing reg in insn 307
changing reg in insn 308
changing reg in insn 308
changing reg in insn 309
changing reg in insn 320
changing reg in insn 321
changing reg in insn 321
changing reg in insn 323
changing reg in insn 323
changing reg in insn 324
changing reg in insn 324
changing reg in insn 326
changing reg in insn 327
changing reg in insn 327
changing reg in insn 328
changing reg in insn 329
changing reg in insn 335
changing reg in insn 336
changing reg in insn 336
changing reg in insn 338
changing reg in insn 338
changing reg in insn 339
changing reg in insn 339
changing reg in insn 341
changing reg in insn 342
changing reg in insn 342
changing reg in insn 343
changing reg in insn 344
changing reg in insn 348
changing reg in insn 349
changing reg in insn 349
changing reg in insn 351
changing reg in insn 351
changing reg in insn 352
changing reg in insn 352
changing reg in insn 354
changing reg in insn 355
changing reg in insn 355
changing reg in insn 356
changing reg in insn 357
changing reg in insn 357
changing reg in insn 358
changing reg in insn 365
changing reg in insn 366
changing reg in insn 366
changing reg in insn 368
changing reg in insn 368
changing reg in insn 369
changing reg in insn 369
changing reg in insn 371
changing reg in insn 372
changing reg in insn 372
changing reg in insn 373
changing reg in insn 374
changing reg in insn 398
changing reg in insn 401
changing reg in insn 401
changing reg in insn 405
changing reg in insn 8
changing reg in insn 10
changing reg in insn 9
changing reg in insn 11
changing reg in insn 13
changing reg in insn 14
changing reg in insn 23
changing reg in insn 24
changing reg in insn 26
changing reg in insn 29
changing reg in insn 30
changing reg in insn 33
changing reg in insn 34
changing reg in insn 36
changing reg in insn 39
changing reg in insn 40
changing reg in insn 49
changing reg in insn 50
changing reg in insn 57
changing reg in insn 58
changing reg in insn 70
changing reg in insn 71
changing reg in insn 72
changing reg in insn 73
changing reg in insn 79
changing reg in insn 82
changing reg in insn 84
changing reg in insn 83
changing reg in insn 85
changing reg in insn 98
changing reg in insn 99
changing reg in insn 100
changing reg in insn 101
changing reg in insn 107
changing reg in insn 110
changing reg in insn 111
changing reg in insn 112
changing reg in insn 113
changing reg in insn 127
changing reg in insn 129
changing reg in insn 128
changing reg in insn 130
changing reg in insn 135
changing reg in insn 138
changing reg in insn 139
changing reg in insn 140
changing reg in insn 141
changing reg in insn 155
changing reg in insn 156
changing reg in insn 157
changing reg in insn 158
changing reg in insn 164
changing reg in insn 167
changing reg in insn 168
changing reg in insn 169
changing reg in insn 170
changing reg in insn 184
changing reg in insn 185
changing reg in insn 186
changing reg in insn 187
changing reg in insn 193
changing reg in insn 196
changing reg in insn 198
changing reg in insn 197
changing reg in insn 199
changing reg in insn 212
changing reg in insn 213
changing reg in insn 214
changing reg in insn 215
changing reg in insn 221
changing reg in insn 224
changing reg in insn 225
changing reg in insn 226
changing reg in insn 227
changing reg in insn 241
changing reg in insn 243
changing reg in insn 242
changing reg in insn 244
changing reg in insn 249
changing reg in insn 252
changing reg in insn 253
changing reg in insn 254
changing reg in insn 255
changing reg in insn 269
changing reg in insn 270
changing reg in insn 271
changing reg in insn 272
changing reg in insn 278
changing reg in insn 281
changing reg in insn 282
changing reg in insn 283
changing reg in insn 284
changing reg in insn 298
changing reg in insn 299
changing reg in insn 301
changing reg in insn 304
changing reg in insn 305
changing reg in insn 319
changing reg in insn 320
changing reg in insn 322
changing reg in insn 325
changing reg in insn 326
changing reg in insn 334
changing reg in insn 335
changing reg in insn 337
changing reg in insn 340
changing reg in insn 341
changing reg in insn 347
changing reg in insn 348
changing reg in insn 350
changing reg in insn 353
changing reg in insn 354
changing reg in insn 364
changing reg in insn 365
changing reg in insn 367
changing reg in insn 370
changing reg in insn 371
changing reg in insn 381
changing reg in insn 382
changing reg in insn 389
changing reg in insn 390
changing reg in insn 393
changing reg in insn 395
changing reg in insn 394
changing reg in insn 396
deleting insn with uid = 13.
deleting insn with uid = 76.
deleting insn with uid = 87.
deleting insn with uid = 104.
deleting insn with uid = 116.
deleting insn with uid = 132.
deleting insn with uid = 144.
deleting insn with uid = 161.
deleting insn with uid = 173.
deleting insn with uid = 190.
deleting insn with uid = 201.
deleting insn with uid = 218.
deleting insn with uid = 230.
deleting insn with uid = 246.
deleting insn with uid = 258.
deleting insn with uid = 275.
deleting insn with uid = 287.
deleting insn with uid = 401.
deleting insn with uid = 405.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 12.
verify found no changes in insn with uid = 75.
verify found no changes in insn with uid = 86.
verify found no changes in insn with uid = 103.
verify found no changes in insn with uid = 115.
verify found no changes in insn with uid = 131.
verify found no changes in insn with uid = 143.
verify found no changes in insn with uid = 160.
verify found no changes in insn with uid = 172.
verify found no changes in insn with uid = 189.
verify found no changes in insn with uid = 200.
verify found no changes in insn with uid = 217.
verify found no changes in insn with uid = 229.
verify found no changes in insn with uid = 245.
verify found no changes in insn with uid = 257.
verify found no changes in insn with uid = 274.
verify found no changes in insn with uid = 286.
verify found no changes in insn with uid = 397.


dynamic_array_move_life

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={161d,160u} r1={65d,47u,14e} r2={21d,2u,1e} r3={8d,8u} r4={37d,19u} r5={37d,19u} r6={1d,148u} r7={1d,56u} r8={18d} r9={18d} r10={18d} r11={18d} r12={18d} r13={18d} r14={18d} r15={18d} r17={119d,17u} r18={18d} r19={1d,1u,27e} r20={19d} r21={19d} r22={19d} r23={19d} r24={19d} r25={19d} r26={19d} r27={19d} r28={18d} r29={18d} r30={18d} r31={18d} r32={18d} r33={18d} r34={18d} r35={18d} r36={19d} r37={19d} r38={18d} r39={18d} r44={18d} r45={18d} r46={18d} r47={18d} r48={18d} r49={18d} r50={18d} r51={18d} r52={18d} r53={18d} r54={18d} r55={18d} r56={18d} r57={18d} r58={18d} r59={18d} r60={18d} r61={18d} r62={18d} r63={18d} r64={18d} r65={18d} r66={18d} r67={18d} r68={18d} r69={18d} r70={18d} r71={18d} r72={18d} r73={18d} r74={18d} r75={18d} 
;;    total ref usage 2078{1559d,477u,42e} in 317{299 regular + 18 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 228 229 230
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [1 B+0 S8 A64])
        (reg:DI 5 di [ B ])) "game_of_life.c":200:54 74 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [2 N+0 S4 A32])
        (reg:SI 4 si [ N ])) "game_of_life.c":200:54 75 {*movsi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 M+0 S4 A32])
        (reg:SI 1 dx [ M ])) "game_of_life.c":200:54 75 {*movsi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:SI 1 dx [228])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 M+0 S4 A32])) "game_of_life.c":202:15 75 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SI 0 ax [229])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [2 N+0 S4 A32])) "game_of_life.c":202:15 75 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:SI 4 si)
        (reg:SI 1 dx [228])) "game_of_life.c":202:15 75 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:SI 5 di)
        (reg:SI 0 ax [229])) "game_of_life.c":202:15 75 {*movsi_internal}
     (nil))
(call_insn 12 11 14 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dynamic_array_alloc") [flags 0x3]  <function_decl 0x7fd3e8e07d00 dynamic_array_alloc>) [0 dynamic_array_alloc S1 A8])
            (const_int 0 [0]))) "game_of_life.c":202:15 824 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 14 12 15 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 A+0 S8 A64])
        (reg:DI 0 ax [230])) "game_of_life.c":202:15 74 {*movdi_internal}
     (nil))
(insn 15 14 408 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [2 i+0 S4 A64])
        (const_int 0 [0])) "game_of_life.c":204:14 75 {*movsi_internal}
     (nil))
(jump_insn 408 15 409 2 (set (pc)
        (label_ref 54)) "game_of_life.c":204:5 807 {jump}
     (nil)
 -> 54)
;;  succ:       7 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 409 408 56)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       7
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 56 409 18 3 49 (nil) [1 uses])
(note 18 56 19 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 410 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [2 j+0 S4 A32])
        (const_int 0 [0])) "game_of_life.c":205:18 75 {*movsi_internal}
     (nil))
(jump_insn 410 19 411 3 (set (pc)
        (label_ref 46)) "game_of_life.c":205:9 807 {jump}
     (nil)
 -> 46)
;;  succ:       5 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 411 410 48)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 231 232 233 234 235 236
(code_label 48 411 22 4 48 (nil) [1 uses])
(note 22 48 23 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 4 (set (reg:SI 0 ax [231])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [2 i+0 S4 A64])) "game_of_life.c":205:48 75 {*movsi_internal}
     (nil))
(insn 24 23 25 4 (set (reg:DI 0 ax [orig:82 _1 ] [82])
        (sign_extend:DI (reg:SI 0 ax [231]))) "game_of_life.c":205:48 147 {*extendsidi2_rex64}
     (nil))
(insn 25 24 26 4 (parallel [
            (set (reg:DI 1 dx [orig:83 _2 ] [83])
                (ashift:DI (reg:DI 0 ax [orig:82 _1 ] [82])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":205:48 656 {*ashldi3_1}
     (nil))
(insn 26 25 27 4 (set (reg/f:DI 0 ax [232])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [1 B+0 S8 A64])) "game_of_life.c":205:48 74 {*movdi_internal}
     (nil))
(insn 27 26 28 4 (parallel [
            (set (reg/f:DI 0 ax [orig:84 _3 ] [84])
                (plus:DI (reg/f:DI 0 ax [232])
                    (reg:DI 1 dx [orig:83 _2 ] [83])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":205:48 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -40 [0xffffffffffffffd8])) [1 B+0 S8 A64])
            (reg:DI 1 dx [orig:83 _2 ] [83]))
        (nil)))
(insn 28 27 29 4 (set (reg/f:DI 1 dx [orig:85 _4 ] [85])
        (mem/f:DI (reg/f:DI 0 ax [orig:84 _3 ] [84]) [4 *_3+0 S8 A64])) "game_of_life.c":205:48 74 {*movdi_internal}
     (nil))
(insn 29 28 30 4 (set (reg:SI 0 ax [233])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [2 j+0 S4 A32])) "game_of_life.c":205:51 75 {*movsi_internal}
     (nil))
(insn 30 29 31 4 (set (reg:DI 0 ax [orig:86 _5 ] [86])
        (sign_extend:DI (reg:SI 0 ax [233]))) "game_of_life.c":205:51 147 {*extendsidi2_rex64}
     (nil))
(insn 31 30 32 4 (parallel [
            (set (reg:DI 0 ax [orig:87 _6 ] [87])
                (ashift:DI (reg:DI 0 ax [orig:86 _5 ] [86])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":205:51 656 {*ashldi3_1}
     (nil))
(insn 32 31 33 4 (parallel [
            (set (reg/f:DI 0 ax [orig:88 _7 ] [88])
                (plus:DI (reg:DI 0 ax [orig:87 _6 ] [87])
                    (reg/f:DI 1 dx [orig:85 _4 ] [85])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":205:51 210 {*adddi_1}
     (nil))
(insn 33 32 34 4 (set (reg:SI 1 dx [234])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [2 i+0 S4 A64])) "game_of_life.c":205:38 75 {*movsi_internal}
     (nil))
(insn 34 33 35 4 (set (reg:DI 1 dx [orig:89 _8 ] [89])
        (sign_extend:DI (reg:SI 1 dx [234]))) "game_of_life.c":205:38 147 {*extendsidi2_rex64}
     (nil))
(insn 35 34 36 4 (parallel [
            (set (reg:DI 2 cx [orig:90 _9 ] [90])
                (ashift:DI (reg:DI 1 dx [orig:89 _8 ] [89])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":205:38 656 {*ashldi3_1}
     (nil))
(insn 36 35 37 4 (set (reg/f:DI 1 dx [235])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 A+0 S8 A64])) "game_of_life.c":205:38 74 {*movdi_internal}
     (nil))
(insn 37 36 38 4 (parallel [
            (set (reg/f:DI 1 dx [orig:91 _10 ] [91])
                (plus:DI (reg/f:DI 1 dx [235])
                    (reg:DI 2 cx [orig:90 _9 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":205:38 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (reg:DI 2 cx [orig:90 _9 ] [90]))
        (nil)))
(insn 38 37 39 4 (set (reg/f:DI 2 cx [orig:92 _11 ] [92])
        (mem/f:DI (reg/f:DI 1 dx [orig:91 _10 ] [91]) [4 *_10+0 S8 A64])) "game_of_life.c":205:38 74 {*movdi_internal}
     (nil))
(insn 39 38 40 4 (set (reg:SI 1 dx [236])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [2 j+0 S4 A32])) "game_of_life.c":205:41 75 {*movsi_internal}
     (nil))
(insn 40 39 41 4 (set (reg:DI 1 dx [orig:93 _12 ] [93])
        (sign_extend:DI (reg:SI 1 dx [236]))) "game_of_life.c":205:41 147 {*extendsidi2_rex64}
     (nil))
(insn 41 40 42 4 (parallel [
            (set (reg:DI 1 dx [orig:94 _13 ] [94])
                (ashift:DI (reg:DI 1 dx [orig:93 _12 ] [93])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":205:41 656 {*ashldi3_1}
     (nil))
(insn 42 41 43 4 (parallel [
            (set (reg/f:DI 1 dx [orig:95 _14 ] [95])
                (plus:DI (reg:DI 1 dx [orig:94 _13 ] [94])
                    (reg/f:DI 2 cx [orig:92 _11 ] [92])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":205:41 210 {*adddi_1}
     (nil))
(insn 43 42 44 4 (set (reg:SI 0 ax [orig:96 _15 ] [96])
        (mem:SI (reg/f:DI 0 ax [orig:88 _7 ] [88]) [2 *_7+0 S4 A32])) "game_of_life.c":205:51 75 {*movsi_internal}
     (nil))
(insn 44 43 45 4 (set (mem:SI (reg/f:DI 1 dx [orig:95 _14 ] [95]) [2 *_14+0 S4 A32])
        (reg:SI 0 ax [orig:96 _15 ] [96])) "game_of_life.c":205:45 75 {*movsi_internal}
     (nil))
(insn 45 44 46 4 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -36 [0xffffffffffffffdc])) [2 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -36 [0xffffffffffffffdc])) [2 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":205:33 209 {*addsi_1}
     (nil))
;;  succ:       5 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU,DFS_BACK)
;;              3 [always] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 237
(code_label 46 45 47 5 47 (nil) [1 uses])
(note 47 46 49 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 49 47 50 5 (set (reg:SI 0 ax [237])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [2 j+0 S4 A32])) "game_of_life.c":205:27 75 {*movsi_internal}
     (nil))
(insn 50 49 51 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [237])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])) [2 M+0 S4 A32]))) "game_of_life.c":205:27 11 {*cmpsi_1}
     (nil))
(jump_insn 51 50 52 5 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 48)
            (pc))) "game_of_life.c":205:27 806 {*jcc}
     (nil)
 -> 48)
;;  succ:       4
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(note 52 51 53 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 54 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -40 [0xffffffffffffffd8])) [2 i+0 S4 A64])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -40 [0xffffffffffffffd8])) [2 i+0 S4 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":204:29 209 {*addsi_1}
     (nil))
;;  succ:       7 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 238
(code_label 54 53 55 7 46 (nil) [1 uses])
(note 55 54 57 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 57 55 58 7 (set (reg:SI 0 ax [238])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [2 i+0 S4 A64])) "game_of_life.c":204:23 75 {*movsi_internal}
     (nil))
(insn 58 57 59 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [238])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -60 [0xffffffffffffffc4])) [2 N+0 S4 A32]))) "game_of_life.c":204:23 11 {*cmpsi_1}
     (nil))
(jump_insn 59 58 60 7 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 56)
            (pc))) "game_of_life.c":204:23 806 {*jcc}
     (nil)
 -> 56)
;;  succ:       3
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 60 59 61 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 61 60 412 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 i+0 S4 A64])
        (const_int 0 [0])) "game_of_life.c":207:14 75 {*movsi_internal}
     (nil))
(jump_insn 412 61 413 8 (set (pc)
        (label_ref 386)) "game_of_life.c":207:5 807 {jump}
     (nil)
 -> 386)
;;  succ:       37 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 413 412 388)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       37
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 388 413 64 9 65 (nil) [1 uses])
(note 64 388 65 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 65 64 414 9 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 j+0 S4 A32])
        (const_int 0 [0])) "game_of_life.c":208:18 75 {*movsi_internal}
     (nil))
(jump_insn 414 65 415 9 (set (pc)
        (label_ref 378)) "game_of_life.c":208:9 807 {jump}
     (nil)
 -> 378)
;;  succ:       35 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 415 414 380)
;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       35
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 97 98 99 100 101 102 103 104 105 106 107 239 240 241 242 243
(code_label 380 415 68 10 64 (nil) [1 uses])
(note 68 380 69 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 70 10 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [2 counter+0 S4 A32])
        (const_int 0 [0])) "game_of_life.c":209:21 75 {*movsi_internal}
     (nil))
(insn 70 69 71 10 (set (reg:SI 0 ax [239])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 i+0 S4 A64])) "game_of_life.c":211:19 75 {*movsi_internal}
     (nil))
(insn 71 70 72 10 (parallel [
            (set (reg:SI 1 dx [orig:97 _16 ] [97])
                (plus:SI (reg:SI 0 ax [239])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":211:19 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -16 [0xfffffffffffffff0])) [2 i+0 S4 A64])
            (const_int 1 [0x1]))
        (nil)))
(insn 72 71 73 10 (set (reg:SI 0 ax [240])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [2 N+0 S4 A32])) "game_of_life.c":211:19 75 {*movsi_internal}
     (nil))
(insn 73 72 74 10 (set (reg:SI 4 si)
        (reg:SI 0 ax [240])) "game_of_life.c":211:19 75 {*movsi_internal}
     (nil))
(insn 74 73 75 10 (set (reg:SI 5 di)
        (reg:SI 1 dx [orig:97 _16 ] [97])) "game_of_life.c":211:19 75 {*movsi_internal}
     (nil))
(call_insn 75 74 77 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("check_y") [flags 0x3]  <function_decl 0x7fd3e8e0d700 check_y>) [0 check_y S1 A8])
            (const_int 0 [0]))) "game_of_life.c":211:19 824 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 77 75 78 10 (set (reg:DI 0 ax [orig:99 _18 ] [99])
        (sign_extend:DI (reg:SI 0 ax [orig:98 _17 ] [98]))) "game_of_life.c":211:19 147 {*extendsidi2_rex64}
     (nil))
(insn 78 77 79 10 (parallel [
            (set (reg:DI 1 dx [orig:100 _19 ] [100])
                (ashift:DI (reg:DI 0 ax [orig:99 _18 ] [99])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":211:18 656 {*ashldi3_1}
     (nil))
(insn 79 78 80 10 (set (reg/f:DI 0 ax [241])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 A+0 S8 A64])) "game_of_life.c":211:18 74 {*movdi_internal}
     (nil))
(insn 80 79 81 10 (parallel [
            (set (reg/f:DI 0 ax [orig:101 _20 ] [101])
                (plus:DI (reg/f:DI 0 ax [241])
                    (reg:DI 1 dx [orig:100 _19 ] [100])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":211:18 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (reg:DI 1 dx [orig:100 _19 ] [100]))
        (nil)))
(insn 81 80 82 10 (set (reg/f:DI 3 bx [orig:102 _21 ] [102])
        (mem/f:DI (reg/f:DI 0 ax [orig:101 _20 ] [101]) [4 *_20+0 S8 A64])) "game_of_life.c":211:18 74 {*movdi_internal}
     (nil))
(insn 82 81 83 10 (set (reg:SI 1 dx [242])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 M+0 S4 A32])) "game_of_life.c":211:38 75 {*movsi_internal}
     (nil))
(insn 83 82 84 10 (set (reg:SI 0 ax [243])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 j+0 S4 A32])) "game_of_life.c":211:38 75 {*movsi_internal}
     (nil))
(insn 84 83 85 10 (set (reg:SI 4 si)
        (reg:SI 1 dx [242])) "game_of_life.c":211:38 75 {*movsi_internal}
     (nil))
(insn 85 84 86 10 (set (reg:SI 5 di)
        (reg:SI 0 ax [243])) "game_of_life.c":211:38 75 {*movsi_internal}
     (nil))
(call_insn 86 85 88 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("check_x") [flags 0x3]  <function_decl 0x7fd3e8e0d600 check_x>) [0 check_x S1 A8])
            (const_int 0 [0]))) "game_of_life.c":211:38 824 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 88 86 89 10 (set (reg:DI 0 ax [orig:104 _23 ] [104])
        (sign_extend:DI (reg:SI 0 ax [orig:103 _22 ] [103]))) "game_of_life.c":211:38 147 {*extendsidi2_rex64}
     (nil))
(insn 89 88 90 10 (parallel [
            (set (reg:DI 0 ax [orig:105 _24 ] [105])
                (ashift:DI (reg:DI 0 ax [orig:104 _23 ] [104])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":211:37 656 {*ashldi3_1}
     (nil))
(insn 90 89 91 10 (parallel [
            (set (reg/f:DI 0 ax [orig:106 _25 ] [106])
                (plus:DI (reg:DI 0 ax [orig:105 _24 ] [105])
                    (reg/f:DI 3 bx [orig:102 _21 ] [102])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":211:37 210 {*adddi_1}
     (nil))
(insn 91 90 92 10 (set (reg:SI 0 ax [orig:107 _26 ] [107])
        (mem:SI (reg/f:DI 0 ax [orig:106 _25 ] [106]) [2 *_25+0 S4 A32])) "game_of_life.c":211:37 75 {*movsi_internal}
     (nil))
(insn 92 91 93 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:107 _26 ] [107])
            (const_int 1 [0x1]))) "game_of_life.c":211:16 11 {*cmpsi_1}
     (nil))
(jump_insn 93 92 94 10 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 96)
            (pc))) "game_of_life.c":211:16 806 {*jcc}
     (nil)
 -> 96)
;;  succ:       11 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(note 94 93 95 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 95 94 96 11 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -44 [0xffffffffffffffd4])) [2 counter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -44 [0xffffffffffffffd4])) [2 counter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":211:66 209 {*addsi_1}
     (nil))
;;  succ:       12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       10
;;              11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 108 109 110 111 112 113 114 115 116 117 118 119 244 245 246 247 248
(code_label 96 95 97 12 52 (nil) [1 uses])
(note 97 96 98 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 98 97 99 12 (set (reg:SI 0 ax [244])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 i+0 S4 A64])) "game_of_life.c":212:19 75 {*movsi_internal}
     (nil))
(insn 99 98 100 12 (parallel [
            (set (reg:SI 1 dx [orig:108 _27 ] [108])
                (plus:SI (reg:SI 0 ax [244])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":212:19 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -16 [0xfffffffffffffff0])) [2 i+0 S4 A64])
            (const_int 1 [0x1]))
        (nil)))
(insn 100 99 101 12 (set (reg:SI 0 ax [245])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [2 N+0 S4 A32])) "game_of_life.c":212:19 75 {*movsi_internal}
     (nil))
(insn 101 100 102 12 (set (reg:SI 4 si)
        (reg:SI 0 ax [245])) "game_of_life.c":212:19 75 {*movsi_internal}
     (nil))
(insn 102 101 103 12 (set (reg:SI 5 di)
        (reg:SI 1 dx [orig:108 _27 ] [108])) "game_of_life.c":212:19 75 {*movsi_internal}
     (nil))
(call_insn 103 102 105 12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("check_y") [flags 0x3]  <function_decl 0x7fd3e8e0d700 check_y>) [0 check_y S1 A8])
            (const_int 0 [0]))) "game_of_life.c":212:19 824 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 105 103 106 12 (set (reg:DI 0 ax [orig:110 _29 ] [110])
        (sign_extend:DI (reg:SI 0 ax [orig:109 _28 ] [109]))) "game_of_life.c":212:19 147 {*extendsidi2_rex64}
     (nil))
(insn 106 105 107 12 (parallel [
            (set (reg:DI 1 dx [orig:111 _30 ] [111])
                (ashift:DI (reg:DI 0 ax [orig:110 _29 ] [110])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":212:18 656 {*ashldi3_1}
     (nil))
(insn 107 106 108 12 (set (reg/f:DI 0 ax [246])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 A+0 S8 A64])) "game_of_life.c":212:18 74 {*movdi_internal}
     (nil))
(insn 108 107 109 12 (parallel [
            (set (reg/f:DI 0 ax [orig:112 _31 ] [112])
                (plus:DI (reg/f:DI 0 ax [246])
                    (reg:DI 1 dx [orig:111 _30 ] [111])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":212:18 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (reg:DI 1 dx [orig:111 _30 ] [111]))
        (nil)))
(insn 109 108 110 12 (set (reg/f:DI 3 bx [orig:113 _32 ] [113])
        (mem/f:DI (reg/f:DI 0 ax [orig:112 _31 ] [112]) [4 *_31+0 S8 A64])) "game_of_life.c":212:18 74 {*movdi_internal}
     (nil))
(insn 110 109 111 12 (set (reg:SI 0 ax [247])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 j+0 S4 A32])) "game_of_life.c":212:38 75 {*movsi_internal}
     (nil))
(insn 111 110 112 12 (parallel [
            (set (reg:SI 1 dx [orig:114 _33 ] [114])
                (plus:SI (reg:SI 0 ax [247])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":212:38 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 112 111 113 12 (set (reg:SI 0 ax [248])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 M+0 S4 A32])) "game_of_life.c":212:38 75 {*movsi_internal}
     (nil))
(insn 113 112 114 12 (set (reg:SI 4 si)
        (reg:SI 0 ax [248])) "game_of_life.c":212:38 75 {*movsi_internal}
     (nil))
(insn 114 113 115 12 (set (reg:SI 5 di)
        (reg:SI 1 dx [orig:114 _33 ] [114])) "game_of_life.c":212:38 75 {*movsi_internal}
     (nil))
(call_insn 115 114 117 12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("check_x") [flags 0x3]  <function_decl 0x7fd3e8e0d600 check_x>) [0 check_x S1 A8])
            (const_int 0 [0]))) "game_of_life.c":212:38 824 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 117 115 118 12 (set (reg:DI 0 ax [orig:116 _35 ] [116])
        (sign_extend:DI (reg:SI 0 ax [orig:115 _34 ] [115]))) "game_of_life.c":212:38 147 {*extendsidi2_rex64}
     (nil))
(insn 118 117 119 12 (parallel [
            (set (reg:DI 0 ax [orig:117 _36 ] [117])
                (ashift:DI (reg:DI 0 ax [orig:116 _35 ] [116])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":212:37 656 {*ashldi3_1}
     (nil))
(insn 119 118 120 12 (parallel [
            (set (reg/f:DI 0 ax [orig:118 _37 ] [118])
                (plus:DI (reg:DI 0 ax [orig:117 _36 ] [117])
                    (reg/f:DI 3 bx [orig:113 _32 ] [113])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":212:37 210 {*adddi_1}
     (nil))
(insn 120 119 121 12 (set (reg:SI 0 ax [orig:119 _38 ] [119])
        (mem:SI (reg/f:DI 0 ax [orig:118 _37 ] [118]) [2 *_37+0 S4 A32])) "game_of_life.c":212:37 75 {*movsi_internal}
     (nil))
(insn 121 120 122 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:119 _38 ] [119])
            (const_int 1 [0x1]))) "game_of_life.c":212:16 11 {*cmpsi_1}
     (nil))
(jump_insn 122 121 123 12 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 125)
            (pc))) "game_of_life.c":212:16 806 {*jcc}
     (nil)
 -> 125)
;;  succ:       13 (FALLTHRU)
;;              14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(note 123 122 124 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 124 123 125 13 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -44 [0xffffffffffffffd4])) [2 counter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -44 [0xffffffffffffffd4])) [2 counter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":212:70 209 {*addsi_1}
     (nil))
;;  succ:       14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       12
;;              13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 120 121 122 123 124 125 126 127 128 129 130 249 250 251 252 253
(code_label 125 124 126 14 53 (nil) [1 uses])
(note 126 125 127 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 127 126 128 14 (set (reg:SI 1 dx [249])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [2 N+0 S4 A32])) "game_of_life.c":213:19 75 {*movsi_internal}
     (nil))
(insn 128 127 129 14 (set (reg:SI 0 ax [250])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 i+0 S4 A64])) "game_of_life.c":213:19 75 {*movsi_internal}
     (nil))
(insn 129 128 130 14 (set (reg:SI 4 si)
        (reg:SI 1 dx [249])) "game_of_life.c":213:19 75 {*movsi_internal}
     (nil))
(insn 130 129 131 14 (set (reg:SI 5 di)
        (reg:SI 0 ax [250])) "game_of_life.c":213:19 75 {*movsi_internal}
     (nil))
(call_insn 131 130 133 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("check_y") [flags 0x3]  <function_decl 0x7fd3e8e0d700 check_y>) [0 check_y S1 A8])
            (const_int 0 [0]))) "game_of_life.c":213:19 824 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 133 131 134 14 (set (reg:DI 0 ax [orig:121 _40 ] [121])
        (sign_extend:DI (reg:SI 0 ax [orig:120 _39 ] [120]))) "game_of_life.c":213:19 147 {*extendsidi2_rex64}
     (nil))
(insn 134 133 135 14 (parallel [
            (set (reg:DI 1 dx [orig:122 _41 ] [122])
                (ashift:DI (reg:DI 0 ax [orig:121 _40 ] [121])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":213:18 656 {*ashldi3_1}
     (nil))
(insn 135 134 136 14 (set (reg/f:DI 0 ax [251])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 A+0 S8 A64])) "game_of_life.c":213:18 74 {*movdi_internal}
     (nil))
(insn 136 135 137 14 (parallel [
            (set (reg/f:DI 0 ax [orig:123 _42 ] [123])
                (plus:DI (reg/f:DI 0 ax [251])
                    (reg:DI 1 dx [orig:122 _41 ] [122])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":213:18 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (reg:DI 1 dx [orig:122 _41 ] [122]))
        (nil)))
(insn 137 136 138 14 (set (reg/f:DI 3 bx [orig:124 _43 ] [124])
        (mem/f:DI (reg/f:DI 0 ax [orig:123 _42 ] [123]) [4 *_42+0 S8 A64])) "game_of_life.c":213:18 74 {*movdi_internal}
     (nil))
(insn 138 137 139 14 (set (reg:SI 0 ax [252])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 j+0 S4 A32])) "game_of_life.c":213:34 75 {*movsi_internal}
     (nil))
(insn 139 138 140 14 (parallel [
            (set (reg:SI 1 dx [orig:125 _44 ] [125])
                (plus:SI (reg:SI 0 ax [252])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":213:34 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 140 139 141 14 (set (reg:SI 0 ax [253])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 M+0 S4 A32])) "game_of_life.c":213:34 75 {*movsi_internal}
     (nil))
(insn 141 140 142 14 (set (reg:SI 4 si)
        (reg:SI 0 ax [253])) "game_of_life.c":213:34 75 {*movsi_internal}
     (nil))
(insn 142 141 143 14 (set (reg:SI 5 di)
        (reg:SI 1 dx [orig:125 _44 ] [125])) "game_of_life.c":213:34 75 {*movsi_internal}
     (nil))
(call_insn 143 142 145 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("check_x") [flags 0x3]  <function_decl 0x7fd3e8e0d600 check_x>) [0 check_x S1 A8])
            (const_int 0 [0]))) "game_of_life.c":213:34 824 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 145 143 146 14 (set (reg:DI 0 ax [orig:127 _46 ] [127])
        (sign_extend:DI (reg:SI 0 ax [orig:126 _45 ] [126]))) "game_of_life.c":213:34 147 {*extendsidi2_rex64}
     (nil))
(insn 146 145 147 14 (parallel [
            (set (reg:DI 0 ax [orig:128 _47 ] [128])
                (ashift:DI (reg:DI 0 ax [orig:127 _46 ] [127])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":213:33 656 {*ashldi3_1}
     (nil))
(insn 147 146 148 14 (parallel [
            (set (reg/f:DI 0 ax [orig:129 _48 ] [129])
                (plus:DI (reg:DI 0 ax [orig:128 _47 ] [128])
                    (reg/f:DI 3 bx [orig:124 _43 ] [124])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":213:33 210 {*adddi_1}
     (nil))
(insn 148 147 149 14 (set (reg:SI 0 ax [orig:130 _49 ] [130])
        (mem:SI (reg/f:DI 0 ax [orig:129 _48 ] [129]) [2 *_48+0 S4 A32])) "game_of_life.c":213:33 75 {*movsi_internal}
     (nil))
(insn 149 148 150 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:130 _49 ] [130])
            (const_int 1 [0x1]))) "game_of_life.c":213:16 11 {*cmpsi_1}
     (nil))
(jump_insn 150 149 151 14 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 153)
            (pc))) "game_of_life.c":213:16 806 {*jcc}
     (nil)
 -> 153)
;;  succ:       15 (FALLTHRU)
;;              16
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(note 151 150 152 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 152 151 153 15 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -44 [0xffffffffffffffd4])) [2 counter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -44 [0xffffffffffffffd4])) [2 counter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":213:66 209 {*addsi_1}
     (nil))
;;  succ:       16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       14
;;              15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 131 132 133 134 135 136 137 138 139 140 141 142 254 255 256 257 258
(code_label 153 152 154 16 54 (nil) [1 uses])
(note 154 153 155 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 155 154 156 16 (set (reg:SI 0 ax [254])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 i+0 S4 A64])) "game_of_life.c":214:19 75 {*movsi_internal}
     (nil))
(insn 156 155 157 16 (parallel [
            (set (reg:SI 1 dx [orig:131 _50 ] [131])
                (plus:SI (reg:SI 0 ax [254])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":214:19 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -16 [0xfffffffffffffff0])) [2 i+0 S4 A64])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 157 156 158 16 (set (reg:SI 0 ax [255])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [2 N+0 S4 A32])) "game_of_life.c":214:19 75 {*movsi_internal}
     (nil))
(insn 158 157 159 16 (set (reg:SI 4 si)
        (reg:SI 0 ax [255])) "game_of_life.c":214:19 75 {*movsi_internal}
     (nil))
(insn 159 158 160 16 (set (reg:SI 5 di)
        (reg:SI 1 dx [orig:131 _50 ] [131])) "game_of_life.c":214:19 75 {*movsi_internal}
     (nil))
(call_insn 160 159 162 16 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("check_y") [flags 0x3]  <function_decl 0x7fd3e8e0d700 check_y>) [0 check_y S1 A8])
            (const_int 0 [0]))) "game_of_life.c":214:19 824 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 162 160 163 16 (set (reg:DI 0 ax [orig:133 _52 ] [133])
        (sign_extend:DI (reg:SI 0 ax [orig:132 _51 ] [132]))) "game_of_life.c":214:19 147 {*extendsidi2_rex64}
     (nil))
(insn 163 162 164 16 (parallel [
            (set (reg:DI 1 dx [orig:134 _53 ] [134])
                (ashift:DI (reg:DI 0 ax [orig:133 _52 ] [133])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":214:18 656 {*ashldi3_1}
     (nil))
(insn 164 163 165 16 (set (reg/f:DI 0 ax [256])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 A+0 S8 A64])) "game_of_life.c":214:18 74 {*movdi_internal}
     (nil))
(insn 165 164 166 16 (parallel [
            (set (reg/f:DI 0 ax [orig:135 _54 ] [135])
                (plus:DI (reg/f:DI 0 ax [256])
                    (reg:DI 1 dx [orig:134 _53 ] [134])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":214:18 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (reg:DI 1 dx [orig:134 _53 ] [134]))
        (nil)))
(insn 166 165 167 16 (set (reg/f:DI 3 bx [orig:136 _55 ] [136])
        (mem/f:DI (reg/f:DI 0 ax [orig:135 _54 ] [135]) [4 *_54+0 S8 A64])) "game_of_life.c":214:18 74 {*movdi_internal}
     (nil))
(insn 167 166 168 16 (set (reg:SI 0 ax [257])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 j+0 S4 A32])) "game_of_life.c":214:38 75 {*movsi_internal}
     (nil))
(insn 168 167 169 16 (parallel [
            (set (reg:SI 1 dx [orig:137 _56 ] [137])
                (plus:SI (reg:SI 0 ax [257])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":214:38 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 169 168 170 16 (set (reg:SI 0 ax [258])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 M+0 S4 A32])) "game_of_life.c":214:38 75 {*movsi_internal}
     (nil))
(insn 170 169 171 16 (set (reg:SI 4 si)
        (reg:SI 0 ax [258])) "game_of_life.c":214:38 75 {*movsi_internal}
     (nil))
(insn 171 170 172 16 (set (reg:SI 5 di)
        (reg:SI 1 dx [orig:137 _56 ] [137])) "game_of_life.c":214:38 75 {*movsi_internal}
     (nil))
(call_insn 172 171 174 16 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("check_x") [flags 0x3]  <function_decl 0x7fd3e8e0d600 check_x>) [0 check_x S1 A8])
            (const_int 0 [0]))) "game_of_life.c":214:38 824 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 174 172 175 16 (set (reg:DI 0 ax [orig:139 _58 ] [139])
        (sign_extend:DI (reg:SI 0 ax [orig:138 _57 ] [138]))) "game_of_life.c":214:38 147 {*extendsidi2_rex64}
     (nil))
(insn 175 174 176 16 (parallel [
            (set (reg:DI 0 ax [orig:140 _59 ] [140])
                (ashift:DI (reg:DI 0 ax [orig:139 _58 ] [139])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":214:37 656 {*ashldi3_1}
     (nil))
(insn 176 175 177 16 (parallel [
            (set (reg/f:DI 0 ax [orig:141 _60 ] [141])
                (plus:DI (reg:DI 0 ax [orig:140 _59 ] [140])
                    (reg/f:DI 3 bx [orig:136 _55 ] [136])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":214:37 210 {*adddi_1}
     (nil))
(insn 177 176 178 16 (set (reg:SI 0 ax [orig:142 _61 ] [142])
        (mem:SI (reg/f:DI 0 ax [orig:141 _60 ] [141]) [2 *_60+0 S4 A32])) "game_of_life.c":214:37 75 {*movsi_internal}
     (nil))
(insn 178 177 179 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:142 _61 ] [142])
            (const_int 1 [0x1]))) "game_of_life.c":214:16 11 {*cmpsi_1}
     (nil))
(jump_insn 179 178 180 16 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 182)
            (pc))) "game_of_life.c":214:16 806 {*jcc}
     (nil)
 -> 182)
;;  succ:       17 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(note 180 179 181 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 181 180 182 17 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -44 [0xffffffffffffffd4])) [2 counter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -44 [0xffffffffffffffd4])) [2 counter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":214:70 209 {*addsi_1}
     (nil))
;;  succ:       18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       16
;;              17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 143 144 145 146 147 148 149 150 151 152 153 259 260 261 262 263
(code_label 182 181 183 18 55 (nil) [1 uses])
(note 183 182 184 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 184 183 185 18 (set (reg:SI 0 ax [259])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 i+0 S4 A64])) "game_of_life.c":215:19 75 {*movsi_internal}
     (nil))
(insn 185 184 186 18 (parallel [
            (set (reg:SI 1 dx [orig:143 _62 ] [143])
                (plus:SI (reg:SI 0 ax [259])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":215:19 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -16 [0xfffffffffffffff0])) [2 i+0 S4 A64])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 186 185 187 18 (set (reg:SI 0 ax [260])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [2 N+0 S4 A32])) "game_of_life.c":215:19 75 {*movsi_internal}
     (nil))
(insn 187 186 188 18 (set (reg:SI 4 si)
        (reg:SI 0 ax [260])) "game_of_life.c":215:19 75 {*movsi_internal}
     (nil))
(insn 188 187 189 18 (set (reg:SI 5 di)
        (reg:SI 1 dx [orig:143 _62 ] [143])) "game_of_life.c":215:19 75 {*movsi_internal}
     (nil))
(call_insn 189 188 191 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("check_y") [flags 0x3]  <function_decl 0x7fd3e8e0d700 check_y>) [0 check_y S1 A8])
            (const_int 0 [0]))) "game_of_life.c":215:19 824 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 191 189 192 18 (set (reg:DI 0 ax [orig:145 _64 ] [145])
        (sign_extend:DI (reg:SI 0 ax [orig:144 _63 ] [144]))) "game_of_life.c":215:19 147 {*extendsidi2_rex64}
     (nil))
(insn 192 191 193 18 (parallel [
            (set (reg:DI 1 dx [orig:146 _65 ] [146])
                (ashift:DI (reg:DI 0 ax [orig:145 _64 ] [145])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":215:18 656 {*ashldi3_1}
     (nil))
(insn 193 192 194 18 (set (reg/f:DI 0 ax [261])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 A+0 S8 A64])) "game_of_life.c":215:18 74 {*movdi_internal}
     (nil))
(insn 194 193 195 18 (parallel [
            (set (reg/f:DI 0 ax [orig:147 _66 ] [147])
                (plus:DI (reg/f:DI 0 ax [261])
                    (reg:DI 1 dx [orig:146 _65 ] [146])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":215:18 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (reg:DI 1 dx [orig:146 _65 ] [146]))
        (nil)))
(insn 195 194 196 18 (set (reg/f:DI 3 bx [orig:148 _67 ] [148])
        (mem/f:DI (reg/f:DI 0 ax [orig:147 _66 ] [147]) [4 *_66+0 S8 A64])) "game_of_life.c":215:18 74 {*movdi_internal}
     (nil))
(insn 196 195 197 18 (set (reg:SI 1 dx [262])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 M+0 S4 A32])) "game_of_life.c":215:38 75 {*movsi_internal}
     (nil))
(insn 197 196 198 18 (set (reg:SI 0 ax [263])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 j+0 S4 A32])) "game_of_life.c":215:38 75 {*movsi_internal}
     (nil))
(insn 198 197 199 18 (set (reg:SI 4 si)
        (reg:SI 1 dx [262])) "game_of_life.c":215:38 75 {*movsi_internal}
     (nil))
(insn 199 198 200 18 (set (reg:SI 5 di)
        (reg:SI 0 ax [263])) "game_of_life.c":215:38 75 {*movsi_internal}
     (nil))
(call_insn 200 199 202 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("check_x") [flags 0x3]  <function_decl 0x7fd3e8e0d600 check_x>) [0 check_x S1 A8])
            (const_int 0 [0]))) "game_of_life.c":215:38 824 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 202 200 203 18 (set (reg:DI 0 ax [orig:150 _69 ] [150])
        (sign_extend:DI (reg:SI 0 ax [orig:149 _68 ] [149]))) "game_of_life.c":215:38 147 {*extendsidi2_rex64}
     (nil))
(insn 203 202 204 18 (parallel [
            (set (reg:DI 0 ax [orig:151 _70 ] [151])
                (ashift:DI (reg:DI 0 ax [orig:150 _69 ] [150])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":215:37 656 {*ashldi3_1}
     (nil))
(insn 204 203 205 18 (parallel [
            (set (reg/f:DI 0 ax [orig:152 _71 ] [152])
                (plus:DI (reg:DI 0 ax [orig:151 _70 ] [151])
                    (reg/f:DI 3 bx [orig:148 _67 ] [148])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":215:37 210 {*adddi_1}
     (nil))
(insn 205 204 206 18 (set (reg:SI 0 ax [orig:153 _72 ] [153])
        (mem:SI (reg/f:DI 0 ax [orig:152 _71 ] [152]) [2 *_71+0 S4 A32])) "game_of_life.c":215:37 75 {*movsi_internal}
     (nil))
(insn 206 205 207 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:153 _72 ] [153])
            (const_int 1 [0x1]))) "game_of_life.c":215:16 11 {*cmpsi_1}
     (nil))
(jump_insn 207 206 208 18 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 210)
            (pc))) "game_of_life.c":215:16 806 {*jcc}
     (nil)
 -> 210)
;;  succ:       19 (FALLTHRU)
;;              20
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(note 208 207 209 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 209 208 210 19 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -44 [0xffffffffffffffd4])) [2 counter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -44 [0xffffffffffffffd4])) [2 counter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":215:66 209 {*addsi_1}
     (nil))
;;  succ:       20 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL, MODIFIED)
;;  pred:       18
;;              19 (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 154 155 156 157 158 159 160 161 162 163 164 165 264 265 266 267 268
(code_label 210 209 211 20 56 (nil) [1 uses])
(note 211 210 212 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 212 211 213 20 (set (reg:SI 0 ax [264])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 i+0 S4 A64])) "game_of_life.c":216:19 75 {*movsi_internal}
     (nil))
(insn 213 212 214 20 (parallel [
            (set (reg:SI 1 dx [orig:154 _73 ] [154])
                (plus:SI (reg:SI 0 ax [264])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":216:19 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -16 [0xfffffffffffffff0])) [2 i+0 S4 A64])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 214 213 215 20 (set (reg:SI 0 ax [265])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [2 N+0 S4 A32])) "game_of_life.c":216:19 75 {*movsi_internal}
     (nil))
(insn 215 214 216 20 (set (reg:SI 4 si)
        (reg:SI 0 ax [265])) "game_of_life.c":216:19 75 {*movsi_internal}
     (nil))
(insn 216 215 217 20 (set (reg:SI 5 di)
        (reg:SI 1 dx [orig:154 _73 ] [154])) "game_of_life.c":216:19 75 {*movsi_internal}
     (nil))
(call_insn 217 216 219 20 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("check_y") [flags 0x3]  <function_decl 0x7fd3e8e0d700 check_y>) [0 check_y S1 A8])
            (const_int 0 [0]))) "game_of_life.c":216:19 824 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 219 217 220 20 (set (reg:DI 0 ax [orig:156 _75 ] [156])
        (sign_extend:DI (reg:SI 0 ax [orig:155 _74 ] [155]))) "game_of_life.c":216:19 147 {*extendsidi2_rex64}
     (nil))
(insn 220 219 221 20 (parallel [
            (set (reg:DI 1 dx [orig:157 _76 ] [157])
                (ashift:DI (reg:DI 0 ax [orig:156 _75 ] [156])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":216:18 656 {*ashldi3_1}
     (nil))
(insn 221 220 222 20 (set (reg/f:DI 0 ax [266])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 A+0 S8 A64])) "game_of_life.c":216:18 74 {*movdi_internal}
     (nil))
(insn 222 221 223 20 (parallel [
            (set (reg/f:DI 0 ax [orig:158 _77 ] [158])
                (plus:DI (reg/f:DI 0 ax [266])
                    (reg:DI 1 dx [orig:157 _76 ] [157])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":216:18 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (reg:DI 1 dx [orig:157 _76 ] [157]))
        (nil)))
(insn 223 222 224 20 (set (reg/f:DI 3 bx [orig:159 _78 ] [159])
        (mem/f:DI (reg/f:DI 0 ax [orig:158 _77 ] [158]) [4 *_77+0 S8 A64])) "game_of_life.c":216:18 74 {*movdi_internal}
     (nil))
(insn 224 223 225 20 (set (reg:SI 0 ax [267])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 j+0 S4 A32])) "game_of_life.c":216:38 75 {*movsi_internal}
     (nil))
(insn 225 224 226 20 (parallel [
            (set (reg:SI 1 dx [orig:160 _79 ] [160])
                (plus:SI (reg:SI 0 ax [267])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":216:38 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 226 225 227 20 (set (reg:SI 0 ax [268])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 M+0 S4 A32])) "game_of_life.c":216:38 75 {*movsi_internal}
     (nil))
(insn 227 226 228 20 (set (reg:SI 4 si)
        (reg:SI 0 ax [268])) "game_of_life.c":216:38 75 {*movsi_internal}
     (nil))
(insn 228 227 229 20 (set (reg:SI 5 di)
        (reg:SI 1 dx [orig:160 _79 ] [160])) "game_of_life.c":216:38 75 {*movsi_internal}
     (nil))
(call_insn 229 228 231 20 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("check_x") [flags 0x3]  <function_decl 0x7fd3e8e0d600 check_x>) [0 check_x S1 A8])
            (const_int 0 [0]))) "game_of_life.c":216:38 824 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 231 229 232 20 (set (reg:DI 0 ax [orig:162 _81 ] [162])
        (sign_extend:DI (reg:SI 0 ax [orig:161 _80 ] [161]))) "game_of_life.c":216:38 147 {*extendsidi2_rex64}
     (nil))
(insn 232 231 233 20 (parallel [
            (set (reg:DI 0 ax [orig:163 _82 ] [163])
                (ashift:DI (reg:DI 0 ax [orig:162 _81 ] [162])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":216:37 656 {*ashldi3_1}
     (nil))
(insn 233 232 234 20 (parallel [
            (set (reg/f:DI 0 ax [orig:164 _83 ] [164])
                (plus:DI (reg:DI 0 ax [orig:163 _82 ] [163])
                    (reg/f:DI 3 bx [orig:159 _78 ] [159])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":216:37 210 {*adddi_1}
     (nil))
(insn 234 233 235 20 (set (reg:SI 0 ax [orig:165 _84 ] [165])
        (mem:SI (reg/f:DI 0 ax [orig:164 _83 ] [164]) [2 *_83+0 S4 A32])) "game_of_life.c":216:37 75 {*movsi_internal}
     (nil))
(insn 235 234 236 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:165 _84 ] [165])
            (const_int 1 [0x1]))) "game_of_life.c":216:16 11 {*cmpsi_1}
     (nil))
(jump_insn 236 235 237 20 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 239)
            (pc))) "game_of_life.c":216:16 806 {*jcc}
     (nil)
 -> 239)
;;  succ:       21 (FALLTHRU)
;;              22
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 21, loop depth 0, maybe hot
;;  prev block 20, next block 22, flags: (RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(note 237 236 238 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 238 237 239 21 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -44 [0xffffffffffffffd4])) [2 counter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -44 [0xffffffffffffffd4])) [2 counter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":216:70 209 {*addsi_1}
     (nil))
;;  succ:       22 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 22, loop depth 0, maybe hot
;;  prev block 21, next block 23, flags: (RTL, MODIFIED)
;;  pred:       20
;;              21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 166 167 168 169 170 171 172 173 174 175 176 269 270 271 272 273
(code_label 239 238 240 22 57 (nil) [1 uses])
(note 240 239 241 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 241 240 242 22 (set (reg:SI 1 dx [269])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [2 N+0 S4 A32])) "game_of_life.c":217:19 75 {*movsi_internal}
     (nil))
(insn 242 241 243 22 (set (reg:SI 0 ax [270])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 i+0 S4 A64])) "game_of_life.c":217:19 75 {*movsi_internal}
     (nil))
(insn 243 242 244 22 (set (reg:SI 4 si)
        (reg:SI 1 dx [269])) "game_of_life.c":217:19 75 {*movsi_internal}
     (nil))
(insn 244 243 245 22 (set (reg:SI 5 di)
        (reg:SI 0 ax [270])) "game_of_life.c":217:19 75 {*movsi_internal}
     (nil))
(call_insn 245 244 247 22 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("check_y") [flags 0x3]  <function_decl 0x7fd3e8e0d700 check_y>) [0 check_y S1 A8])
            (const_int 0 [0]))) "game_of_life.c":217:19 824 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 247 245 248 22 (set (reg:DI 0 ax [orig:167 _86 ] [167])
        (sign_extend:DI (reg:SI 0 ax [orig:166 _85 ] [166]))) "game_of_life.c":217:19 147 {*extendsidi2_rex64}
     (nil))
(insn 248 247 249 22 (parallel [
            (set (reg:DI 1 dx [orig:168 _87 ] [168])
                (ashift:DI (reg:DI 0 ax [orig:167 _86 ] [167])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":217:18 656 {*ashldi3_1}
     (nil))
(insn 249 248 250 22 (set (reg/f:DI 0 ax [271])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 A+0 S8 A64])) "game_of_life.c":217:18 74 {*movdi_internal}
     (nil))
(insn 250 249 251 22 (parallel [
            (set (reg/f:DI 0 ax [orig:169 _88 ] [169])
                (plus:DI (reg/f:DI 0 ax [271])
                    (reg:DI 1 dx [orig:168 _87 ] [168])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":217:18 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (reg:DI 1 dx [orig:168 _87 ] [168]))
        (nil)))
(insn 251 250 252 22 (set (reg/f:DI 3 bx [orig:170 _89 ] [170])
        (mem/f:DI (reg/f:DI 0 ax [orig:169 _88 ] [169]) [4 *_88+0 S8 A64])) "game_of_life.c":217:18 74 {*movdi_internal}
     (nil))
(insn 252 251 253 22 (set (reg:SI 0 ax [272])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 j+0 S4 A32])) "game_of_life.c":217:34 75 {*movsi_internal}
     (nil))
(insn 253 252 254 22 (parallel [
            (set (reg:SI 1 dx [orig:171 _90 ] [171])
                (plus:SI (reg:SI 0 ax [272])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":217:34 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 254 253 255 22 (set (reg:SI 0 ax [273])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 M+0 S4 A32])) "game_of_life.c":217:34 75 {*movsi_internal}
     (nil))
(insn 255 254 256 22 (set (reg:SI 4 si)
        (reg:SI 0 ax [273])) "game_of_life.c":217:34 75 {*movsi_internal}
     (nil))
(insn 256 255 257 22 (set (reg:SI 5 di)
        (reg:SI 1 dx [orig:171 _90 ] [171])) "game_of_life.c":217:34 75 {*movsi_internal}
     (nil))
(call_insn 257 256 259 22 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("check_x") [flags 0x3]  <function_decl 0x7fd3e8e0d600 check_x>) [0 check_x S1 A8])
            (const_int 0 [0]))) "game_of_life.c":217:34 824 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 259 257 260 22 (set (reg:DI 0 ax [orig:173 _92 ] [173])
        (sign_extend:DI (reg:SI 0 ax [orig:172 _91 ] [172]))) "game_of_life.c":217:34 147 {*extendsidi2_rex64}
     (nil))
(insn 260 259 261 22 (parallel [
            (set (reg:DI 0 ax [orig:174 _93 ] [174])
                (ashift:DI (reg:DI 0 ax [orig:173 _92 ] [173])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":217:33 656 {*ashldi3_1}
     (nil))
(insn 261 260 262 22 (parallel [
            (set (reg/f:DI 0 ax [orig:175 _94 ] [175])
                (plus:DI (reg:DI 0 ax [orig:174 _93 ] [174])
                    (reg/f:DI 3 bx [orig:170 _89 ] [170])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":217:33 210 {*adddi_1}
     (nil))
(insn 262 261 263 22 (set (reg:SI 0 ax [orig:176 _95 ] [176])
        (mem:SI (reg/f:DI 0 ax [orig:175 _94 ] [175]) [2 *_94+0 S4 A32])) "game_of_life.c":217:33 75 {*movsi_internal}
     (nil))
(insn 263 262 264 22 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:176 _95 ] [176])
            (const_int 1 [0x1]))) "game_of_life.c":217:16 11 {*cmpsi_1}
     (nil))
(jump_insn 264 263 265 22 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 267)
            (pc))) "game_of_life.c":217:16 806 {*jcc}
     (nil)
 -> 267)
;;  succ:       23 (FALLTHRU)
;;              24
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 23, loop depth 0, maybe hot
;;  prev block 22, next block 24, flags: (RTL, MODIFIED)
;;  pred:       22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(note 265 264 266 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 266 265 267 23 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -44 [0xffffffffffffffd4])) [2 counter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -44 [0xffffffffffffffd4])) [2 counter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":217:66 209 {*addsi_1}
     (nil))
;;  succ:       24 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 24, loop depth 0, maybe hot
;;  prev block 23, next block 25, flags: (RTL, MODIFIED)
;;  pred:       22
;;              23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 177 178 179 180 181 182 183 184 185 186 187 188 274 275 276 277 278
(code_label 267 266 268 24 58 (nil) [1 uses])
(note 268 267 269 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 269 268 270 24 (set (reg:SI 0 ax [274])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 i+0 S4 A64])) "game_of_life.c":218:19 75 {*movsi_internal}
     (nil))
(insn 270 269 271 24 (parallel [
            (set (reg:SI 1 dx [orig:177 _96 ] [177])
                (plus:SI (reg:SI 0 ax [274])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":218:19 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -16 [0xfffffffffffffff0])) [2 i+0 S4 A64])
            (const_int 1 [0x1]))
        (nil)))
(insn 271 270 272 24 (set (reg:SI 0 ax [275])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [2 N+0 S4 A32])) "game_of_life.c":218:19 75 {*movsi_internal}
     (nil))
(insn 272 271 273 24 (set (reg:SI 4 si)
        (reg:SI 0 ax [275])) "game_of_life.c":218:19 75 {*movsi_internal}
     (nil))
(insn 273 272 274 24 (set (reg:SI 5 di)
        (reg:SI 1 dx [orig:177 _96 ] [177])) "game_of_life.c":218:19 75 {*movsi_internal}
     (nil))
(call_insn 274 273 276 24 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("check_y") [flags 0x3]  <function_decl 0x7fd3e8e0d700 check_y>) [0 check_y S1 A8])
            (const_int 0 [0]))) "game_of_life.c":218:19 824 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 276 274 277 24 (set (reg:DI 0 ax [orig:179 _98 ] [179])
        (sign_extend:DI (reg:SI 0 ax [orig:178 _97 ] [178]))) "game_of_life.c":218:19 147 {*extendsidi2_rex64}
     (nil))
(insn 277 276 278 24 (parallel [
            (set (reg:DI 1 dx [orig:180 _99 ] [180])
                (ashift:DI (reg:DI 0 ax [orig:179 _98 ] [179])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":218:18 656 {*ashldi3_1}
     (nil))
(insn 278 277 279 24 (set (reg/f:DI 0 ax [276])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 A+0 S8 A64])) "game_of_life.c":218:18 74 {*movdi_internal}
     (nil))
(insn 279 278 280 24 (parallel [
            (set (reg/f:DI 0 ax [orig:181 _100 ] [181])
                (plus:DI (reg/f:DI 0 ax [276])
                    (reg:DI 1 dx [orig:180 _99 ] [180])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":218:18 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (reg:DI 1 dx [orig:180 _99 ] [180]))
        (nil)))
(insn 280 279 281 24 (set (reg/f:DI 3 bx [orig:182 _101 ] [182])
        (mem/f:DI (reg/f:DI 0 ax [orig:181 _100 ] [181]) [4 *_100+0 S8 A64])) "game_of_life.c":218:18 74 {*movdi_internal}
     (nil))
(insn 281 280 282 24 (set (reg:SI 0 ax [277])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 j+0 S4 A32])) "game_of_life.c":218:38 75 {*movsi_internal}
     (nil))
(insn 282 281 283 24 (parallel [
            (set (reg:SI 1 dx [orig:183 _102 ] [183])
                (plus:SI (reg:SI 0 ax [277])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":218:38 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -12 [0xfffffffffffffff4])) [2 j+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 283 282 284 24 (set (reg:SI 0 ax [278])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 M+0 S4 A32])) "game_of_life.c":218:38 75 {*movsi_internal}
     (nil))
(insn 284 283 285 24 (set (reg:SI 4 si)
        (reg:SI 0 ax [278])) "game_of_life.c":218:38 75 {*movsi_internal}
     (nil))
(insn 285 284 286 24 (set (reg:SI 5 di)
        (reg:SI 1 dx [orig:183 _102 ] [183])) "game_of_life.c":218:38 75 {*movsi_internal}
     (nil))
(call_insn 286 285 288 24 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("check_x") [flags 0x3]  <function_decl 0x7fd3e8e0d600 check_x>) [0 check_x S1 A8])
            (const_int 0 [0]))) "game_of_life.c":218:38 824 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 288 286 289 24 (set (reg:DI 0 ax [orig:185 _104 ] [185])
        (sign_extend:DI (reg:SI 0 ax [orig:184 _103 ] [184]))) "game_of_life.c":218:38 147 {*extendsidi2_rex64}
     (nil))
(insn 289 288 290 24 (parallel [
            (set (reg:DI 0 ax [orig:186 _105 ] [186])
                (ashift:DI (reg:DI 0 ax [orig:185 _104 ] [185])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":218:37 656 {*ashldi3_1}
     (nil))
(insn 290 289 291 24 (parallel [
            (set (reg/f:DI 0 ax [orig:187 _106 ] [187])
                (plus:DI (reg:DI 0 ax [orig:186 _105 ] [186])
                    (reg/f:DI 3 bx [orig:182 _101 ] [182])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":218:37 210 {*adddi_1}
     (nil))
(insn 291 290 292 24 (set (reg:SI 0 ax [orig:188 _107 ] [188])
        (mem:SI (reg/f:DI 0 ax [orig:187 _106 ] [187]) [2 *_106+0 S4 A32])) "game_of_life.c":218:37 75 {*movsi_internal}
     (nil))
(insn 292 291 293 24 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:188 _107 ] [188])
            (const_int 1 [0x1]))) "game_of_life.c":218:16 11 {*cmpsi_1}
     (nil))
(jump_insn 293 292 294 24 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 296)
            (pc))) "game_of_life.c":218:16 806 {*jcc}
     (nil)
 -> 296)
;;  succ:       25 (FALLTHRU)
;;              26
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 25, loop depth 0, maybe hot
;;  prev block 24, next block 26, flags: (RTL, MODIFIED)
;;  pred:       24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(note 294 293 295 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 295 294 296 25 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -44 [0xffffffffffffffd4])) [2 counter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -44 [0xffffffffffffffd4])) [2 counter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":218:70 209 {*addsi_1}
     (nil))
;;  succ:       26 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 26, loop depth 0, maybe hot
;;  prev block 25, next block 27, flags: (RTL, MODIFIED)
;;  pred:       24
;;              25 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 189 190 191 192 193 194 195 196 279 280 281
(code_label 296 295 297 26 59 (nil) [1 uses])
(note 297 296 298 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 298 297 299 26 (set (reg:SI 0 ax [279])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 i+0 S4 A64])) "game_of_life.c":220:18 75 {*movsi_internal}
     (nil))
(insn 299 298 300 26 (set (reg:DI 0 ax [orig:189 _108 ] [189])
        (sign_extend:DI (reg:SI 0 ax [279]))) "game_of_life.c":220:18 147 {*extendsidi2_rex64}
     (nil))
(insn 300 299 301 26 (parallel [
            (set (reg:DI 1 dx [orig:190 _109 ] [190])
                (ashift:DI (reg:DI 0 ax [orig:189 _108 ] [189])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":220:18 656 {*ashldi3_1}
     (nil))
(insn 301 300 302 26 (set (reg/f:DI 0 ax [280])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 A+0 S8 A64])) "game_of_life.c":220:18 74 {*movdi_internal}
     (nil))
(insn 302 301 303 26 (parallel [
            (set (reg/f:DI 0 ax [orig:191 _110 ] [191])
                (plus:DI (reg/f:DI 0 ax [280])
                    (reg:DI 1 dx [orig:190 _109 ] [190])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":220:18 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (reg:DI 1 dx [orig:190 _109 ] [190]))
        (nil)))
(insn 303 302 304 26 (set (reg/f:DI 1 dx [orig:192 _111 ] [192])
        (mem/f:DI (reg/f:DI 0 ax [orig:191 _110 ] [191]) [4 *_110+0 S8 A64])) "game_of_life.c":220:18 74 {*movdi_internal}
     (nil))
(insn 304 303 305 26 (set (reg:SI 0 ax [281])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 j+0 S4 A32])) "game_of_life.c":220:21 75 {*movsi_internal}
     (nil))
(insn 305 304 306 26 (set (reg:DI 0 ax [orig:193 _112 ] [193])
        (sign_extend:DI (reg:SI 0 ax [281]))) "game_of_life.c":220:21 147 {*extendsidi2_rex64}
     (nil))
(insn 306 305 307 26 (parallel [
            (set (reg:DI 0 ax [orig:194 _113 ] [194])
                (ashift:DI (reg:DI 0 ax [orig:193 _112 ] [193])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":220:21 656 {*ashldi3_1}
     (nil))
(insn 307 306 308 26 (parallel [
            (set (reg/f:DI 0 ax [orig:195 _114 ] [195])
                (plus:DI (reg:DI 0 ax [orig:194 _113 ] [194])
                    (reg/f:DI 1 dx [orig:192 _111 ] [192])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":220:21 210 {*adddi_1}
     (nil))
(insn 308 307 309 26 (set (reg:SI 0 ax [orig:196 _115 ] [196])
        (mem:SI (reg/f:DI 0 ax [orig:195 _114 ] [195]) [2 *_114+0 S4 A32])) "game_of_life.c":220:21 75 {*movsi_internal}
     (nil))
(insn 309 308 310 26 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:196 _115 ] [196])
            (const_int 1 [0x1]))) "game_of_life.c":220:16 11 {*cmpsi_1}
     (nil))
(jump_insn 310 309 311 26 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 332)
            (pc))) "game_of_life.c":220:16 806 {*jcc}
     (nil)
 -> 332)
;;  succ:       27 (FALLTHRU)
;;              30
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 27, loop depth 0, maybe hot
;;  prev block 26, next block 28, flags: (RTL, MODIFIED)
;;  pred:       26 (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(note 311 310 312 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 312 311 313 27 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -44 [0xffffffffffffffd4])) [2 counter+0 S4 A32])
            (const_int 3 [0x3]))) "game_of_life.c":220:30 11 {*cmpsi_1}
     (nil))
(jump_insn 313 312 314 27 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 317)
            (pc))) "game_of_life.c":220:30 806 {*jcc}
     (nil)
 -> 317)
;;  succ:       29
;;              28 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 28, loop depth 0, maybe hot
;;  prev block 27, next block 29, flags: (RTL, MODIFIED)
;;  pred:       27 (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(note 314 313 315 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 315 314 316 28 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -44 [0xffffffffffffffd4])) [2 counter+0 S4 A32])
            (const_int 2 [0x2]))) "game_of_life.c":220:47 11 {*cmpsi_1}
     (nil))
(jump_insn 316 315 317 28 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 332)
            (pc))) "game_of_life.c":220:47 806 {*jcc}
     (nil)
 -> 332)
;;  succ:       29 (FALLTHRU)
;;              30
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 29, loop depth 0, maybe hot
;;  prev block 28, next block 30, flags: (RTL, MODIFIED)
;;  pred:       27
;;              28 (FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 197 198 199 200 201 202 203 282 283 284
(code_label 317 316 318 29 61 (nil) [1 uses])
(note 318 317 319 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 319 318 320 29 (set (reg:SI 0 ax [282])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 i+0 S4 A64])) "game_of_life.c":221:18 75 {*movsi_internal}
     (nil))
(insn 320 319 321 29 (set (reg:DI 0 ax [orig:197 _116 ] [197])
        (sign_extend:DI (reg:SI 0 ax [282]))) "game_of_life.c":221:18 147 {*extendsidi2_rex64}
     (nil))
(insn 321 320 322 29 (parallel [
            (set (reg:DI 1 dx [orig:198 _117 ] [198])
                (ashift:DI (reg:DI 0 ax [orig:197 _116 ] [197])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":221:18 656 {*ashldi3_1}
     (nil))
(insn 322 321 323 29 (set (reg/f:DI 0 ax [283])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [1 B+0 S8 A64])) "game_of_life.c":221:18 74 {*movdi_internal}
     (nil))
(insn 323 322 324 29 (parallel [
            (set (reg/f:DI 0 ax [orig:199 _118 ] [199])
                (plus:DI (reg/f:DI 0 ax [283])
                    (reg:DI 1 dx [orig:198 _117 ] [198])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":221:18 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -40 [0xffffffffffffffd8])) [1 B+0 S8 A64])
            (reg:DI 1 dx [orig:198 _117 ] [198]))
        (nil)))
(insn 324 323 325 29 (set (reg/f:DI 1 dx [orig:200 _119 ] [200])
        (mem/f:DI (reg/f:DI 0 ax [orig:199 _118 ] [199]) [4 *_118+0 S8 A64])) "game_of_life.c":221:18 74 {*movdi_internal}
     (nil))
(insn 325 324 326 29 (set (reg:SI 0 ax [284])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 j+0 S4 A32])) "game_of_life.c":221:21 75 {*movsi_internal}
     (nil))
(insn 326 325 327 29 (set (reg:DI 0 ax [orig:201 _120 ] [201])
        (sign_extend:DI (reg:SI 0 ax [284]))) "game_of_life.c":221:21 147 {*extendsidi2_rex64}
     (nil))
(insn 327 326 328 29 (parallel [
            (set (reg:DI 0 ax [orig:202 _121 ] [202])
                (ashift:DI (reg:DI 0 ax [orig:201 _120 ] [201])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":221:21 656 {*ashldi3_1}
     (nil))
(insn 328 327 329 29 (parallel [
            (set (reg/f:DI 0 ax [orig:203 _122 ] [203])
                (plus:DI (reg:DI 0 ax [orig:202 _121 ] [202])
                    (reg/f:DI 1 dx [orig:200 _119 ] [200])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":221:21 210 {*adddi_1}
     (nil))
(insn 329 328 416 29 (set (mem:SI (reg/f:DI 0 ax [orig:203 _122 ] [203]) [2 *_122+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":221:25 75 {*movsi_internal}
     (nil))
(jump_insn 416 329 417 29 (set (pc)
        (label_ref 345)) "game_of_life.c":221:25 807 {jump}
     (nil)
 -> 345)
;;  succ:       31 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 417 416 332)
;; basic block 30, loop depth 0, maybe hot
;;  prev block 29, next block 31, flags: (RTL, MODIFIED)
;;  pred:       26
;;              28
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 204 205 206 207 208 209 210 285 286 287
(code_label 332 417 333 30 60 (nil) [2 uses])
(note 333 332 334 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 334 333 335 30 (set (reg:SI 0 ax [285])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 i+0 S4 A64])) "game_of_life.c":223:18 75 {*movsi_internal}
     (nil))
(insn 335 334 336 30 (set (reg:DI 0 ax [orig:204 _123 ] [204])
        (sign_extend:DI (reg:SI 0 ax [285]))) "game_of_life.c":223:18 147 {*extendsidi2_rex64}
     (nil))
(insn 336 335 337 30 (parallel [
            (set (reg:DI 1 dx [orig:205 _124 ] [205])
                (ashift:DI (reg:DI 0 ax [orig:204 _123 ] [204])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":223:18 656 {*ashldi3_1}
     (nil))
(insn 337 336 338 30 (set (reg/f:DI 0 ax [286])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [1 B+0 S8 A64])) "game_of_life.c":223:18 74 {*movdi_internal}
     (nil))
(insn 338 337 339 30 (parallel [
            (set (reg/f:DI 0 ax [orig:206 _125 ] [206])
                (plus:DI (reg/f:DI 0 ax [286])
                    (reg:DI 1 dx [orig:205 _124 ] [205])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":223:18 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -40 [0xffffffffffffffd8])) [1 B+0 S8 A64])
            (reg:DI 1 dx [orig:205 _124 ] [205]))
        (nil)))
(insn 339 338 340 30 (set (reg/f:DI 1 dx [orig:207 _126 ] [207])
        (mem/f:DI (reg/f:DI 0 ax [orig:206 _125 ] [206]) [4 *_125+0 S8 A64])) "game_of_life.c":223:18 74 {*movdi_internal}
     (nil))
(insn 340 339 341 30 (set (reg:SI 0 ax [287])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 j+0 S4 A32])) "game_of_life.c":223:21 75 {*movsi_internal}
     (nil))
(insn 341 340 342 30 (set (reg:DI 0 ax [orig:208 _127 ] [208])
        (sign_extend:DI (reg:SI 0 ax [287]))) "game_of_life.c":223:21 147 {*extendsidi2_rex64}
     (nil))
(insn 342 341 343 30 (parallel [
            (set (reg:DI 0 ax [orig:209 _128 ] [209])
                (ashift:DI (reg:DI 0 ax [orig:208 _127 ] [208])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":223:21 656 {*ashldi3_1}
     (nil))
(insn 343 342 344 30 (parallel [
            (set (reg/f:DI 0 ax [orig:210 _129 ] [210])
                (plus:DI (reg:DI 0 ax [orig:209 _128 ] [209])
                    (reg/f:DI 1 dx [orig:207 _126 ] [207])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":223:21 210 {*adddi_1}
     (nil))
(insn 344 343 345 30 (set (mem:SI (reg/f:DI 0 ax [orig:210 _129 ] [210]) [2 *_129+0 S4 A32])
        (const_int 0 [0])) "game_of_life.c":223:25 75 {*movsi_internal}
     (nil))
;;  succ:       31 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 31, loop depth 0, maybe hot
;;  prev block 30, next block 32, flags: (RTL, MODIFIED)
;;  pred:       30 (FALLTHRU)
;;              29 [always] 
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 211 212 213 214 215 216 217 218 288 289 290
(code_label 345 344 346 31 62 (nil) [1 uses])
(note 346 345 347 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 347 346 348 31 (set (reg:SI 0 ax [288])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 i+0 S4 A64])) "game_of_life.c":225:18 75 {*movsi_internal}
     (nil))
(insn 348 347 349 31 (set (reg:DI 0 ax [orig:211 _130 ] [211])
        (sign_extend:DI (reg:SI 0 ax [288]))) "game_of_life.c":225:18 147 {*extendsidi2_rex64}
     (nil))
(insn 349 348 350 31 (parallel [
            (set (reg:DI 1 dx [orig:212 _131 ] [212])
                (ashift:DI (reg:DI 0 ax [orig:211 _130 ] [211])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":225:18 656 {*ashldi3_1}
     (nil))
(insn 350 349 351 31 (set (reg/f:DI 0 ax [289])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 A+0 S8 A64])) "game_of_life.c":225:18 74 {*movdi_internal}
     (nil))
(insn 351 350 352 31 (parallel [
            (set (reg/f:DI 0 ax [orig:213 _132 ] [213])
                (plus:DI (reg/f:DI 0 ax [289])
                    (reg:DI 1 dx [orig:212 _131 ] [212])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":225:18 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 A+0 S8 A64])
            (reg:DI 1 dx [orig:212 _131 ] [212]))
        (nil)))
(insn 352 351 353 31 (set (reg/f:DI 1 dx [orig:214 _133 ] [214])
        (mem/f:DI (reg/f:DI 0 ax [orig:213 _132 ] [213]) [4 *_132+0 S8 A64])) "game_of_life.c":225:18 74 {*movdi_internal}
     (nil))
(insn 353 352 354 31 (set (reg:SI 0 ax [290])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 j+0 S4 A32])) "game_of_life.c":225:21 75 {*movsi_internal}
     (nil))
(insn 354 353 355 31 (set (reg:DI 0 ax [orig:215 _134 ] [215])
        (sign_extend:DI (reg:SI 0 ax [290]))) "game_of_life.c":225:21 147 {*extendsidi2_rex64}
     (nil))
(insn 355 354 356 31 (parallel [
            (set (reg:DI 0 ax [orig:216 _135 ] [216])
                (ashift:DI (reg:DI 0 ax [orig:215 _134 ] [215])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":225:21 656 {*ashldi3_1}
     (nil))
(insn 356 355 357 31 (parallel [
            (set (reg/f:DI 0 ax [orig:217 _136 ] [217])
                (plus:DI (reg:DI 0 ax [orig:216 _135 ] [216])
                    (reg/f:DI 1 dx [orig:214 _133 ] [214])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":225:21 210 {*adddi_1}
     (nil))
(insn 357 356 358 31 (set (reg:SI 0 ax [orig:218 _137 ] [218])
        (mem:SI (reg/f:DI 0 ax [orig:217 _136 ] [217]) [2 *_136+0 S4 A32])) "game_of_life.c":225:21 75 {*movsi_internal}
     (nil))
(insn 358 357 359 31 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:218 _137 ] [218])
            (const_int 0 [0]))) "game_of_life.c":225:16 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 359 358 360 31 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 375)
            (pc))) "game_of_life.c":225:16 806 {*jcc}
     (nil)
 -> 375)
;;  succ:       32 (FALLTHRU)
;;              34
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 32, loop depth 0, maybe hot
;;  prev block 31, next block 33, flags: (RTL, MODIFIED)
;;  pred:       31 (FALLTHRU)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(note 360 359 361 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 361 360 362 32 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -44 [0xffffffffffffffd4])) [2 counter+0 S4 A32])
            (const_int 3 [0x3]))) "game_of_life.c":225:30 11 {*cmpsi_1}
     (nil))
(jump_insn 362 361 363 32 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 375)
            (pc))) "game_of_life.c":225:30 806 {*jcc}
     (nil)
 -> 375)
;;  succ:       33 (FALLTHRU)
;;              34
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 33, loop depth 0, maybe hot
;;  prev block 32, next block 34, flags: (RTL, MODIFIED)
;;  pred:       32 (FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 219 220 221 222 223 224 225 291 292 293
(note 363 362 364 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 364 363 365 33 (set (reg:SI 0 ax [291])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 i+0 S4 A64])) "game_of_life.c":225:50 75 {*movsi_internal}
     (nil))
(insn 365 364 366 33 (set (reg:DI 0 ax [orig:219 _138 ] [219])
        (sign_extend:DI (reg:SI 0 ax [291]))) "game_of_life.c":225:50 147 {*extendsidi2_rex64}
     (nil))
(insn 366 365 367 33 (parallel [
            (set (reg:DI 1 dx [orig:220 _139 ] [220])
                (ashift:DI (reg:DI 0 ax [orig:219 _138 ] [219])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":225:50 656 {*ashldi3_1}
     (nil))
(insn 367 366 368 33 (set (reg/f:DI 0 ax [292])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [1 B+0 S8 A64])) "game_of_life.c":225:50 74 {*movdi_internal}
     (nil))
(insn 368 367 369 33 (parallel [
            (set (reg/f:DI 0 ax [orig:221 _140 ] [221])
                (plus:DI (reg/f:DI 0 ax [292])
                    (reg:DI 1 dx [orig:220 _139 ] [220])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":225:50 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -40 [0xffffffffffffffd8])) [1 B+0 S8 A64])
            (reg:DI 1 dx [orig:220 _139 ] [220]))
        (nil)))
(insn 369 368 370 33 (set (reg/f:DI 1 dx [orig:222 _141 ] [222])
        (mem/f:DI (reg/f:DI 0 ax [orig:221 _140 ] [221]) [4 *_140+0 S8 A64])) "game_of_life.c":225:50 74 {*movdi_internal}
     (nil))
(insn 370 369 371 33 (set (reg:SI 0 ax [293])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 j+0 S4 A32])) "game_of_life.c":225:53 75 {*movsi_internal}
     (nil))
(insn 371 370 372 33 (set (reg:DI 0 ax [orig:223 _142 ] [223])
        (sign_extend:DI (reg:SI 0 ax [293]))) "game_of_life.c":225:53 147 {*extendsidi2_rex64}
     (nil))
(insn 372 371 373 33 (parallel [
            (set (reg:DI 0 ax [orig:224 _143 ] [224])
                (ashift:DI (reg:DI 0 ax [orig:223 _142 ] [223])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":225:53 656 {*ashldi3_1}
     (nil))
(insn 373 372 374 33 (parallel [
            (set (reg/f:DI 0 ax [orig:225 _144 ] [225])
                (plus:DI (reg:DI 0 ax [orig:224 _143 ] [224])
                    (reg/f:DI 1 dx [orig:222 _141 ] [222])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":225:53 210 {*adddi_1}
     (nil))
(insn 374 373 375 33 (set (mem:SI (reg/f:DI 0 ax [orig:225 _144 ] [225]) [2 *_144+0 S4 A32])
        (const_int 1 [0x1])) "game_of_life.c":225:57 75 {*movsi_internal}
     (nil))
;;  succ:       34 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 34, loop depth 0, maybe hot
;;  prev block 33, next block 35, flags: (RTL, MODIFIED)
;;  pred:       31
;;              32
;;              33 (FALLTHRU)
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(code_label 375 374 376 34 63 (nil) [2 uses])
(note 376 375 377 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 377 376 378 34 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [2 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [2 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":208:33 209 {*addsi_1}
     (nil))
;;  succ:       35 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 35, loop depth 0, maybe hot
;;  prev block 34, next block 36, flags: (RTL, MODIFIED)
;;  pred:       34 (FALLTHRU,DFS_BACK)
;;              9 [always] 
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 294
(code_label 378 377 379 35 51 (nil) [1 uses])
(note 379 378 381 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 381 379 382 35 (set (reg:SI 0 ax [294])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 j+0 S4 A32])) "game_of_life.c":208:27 75 {*movsi_internal}
     (nil))
(insn 382 381 383 35 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [294])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])) [2 M+0 S4 A32]))) "game_of_life.c":208:27 11 {*cmpsi_1}
     (nil))
(jump_insn 383 382 384 35 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 380)
            (pc))) "game_of_life.c":208:27 806 {*jcc}
     (nil)
 -> 380)
;;  succ:       10
;;              36 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 36, loop depth 0, maybe hot
;;  prev block 35, next block 37, flags: (RTL, MODIFIED)
;;  pred:       35 (FALLTHRU)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(note 384 383 385 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 385 384 386 36 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -32 [0xffffffffffffffe0])) [2 i+0 S4 A64])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -32 [0xffffffffffffffe0])) [2 i+0 S4 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":207:29 209 {*addsi_1}
     (nil))
;;  succ:       37 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 37, loop depth 0, maybe hot
;;  prev block 36, next block 38, flags: (RTL, MODIFIED)
;;  pred:       36 (FALLTHRU,DFS_BACK)
;;              8 [always] 
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 295
(code_label 386 385 387 37 50 (nil) [1 uses])
(note 387 386 389 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 389 387 390 37 (set (reg:SI 0 ax [295])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 i+0 S4 A64])) "game_of_life.c":207:23 75 {*movsi_internal}
     (nil))
(insn 390 389 391 37 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [295])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -60 [0xffffffffffffffc4])) [2 N+0 S4 A32]))) "game_of_life.c":207:23 11 {*cmpsi_1}
     (nil))
(jump_insn 391 390 392 37 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 388)
            (pc))) "game_of_life.c":207:23 806 {*jcc}
     (nil)
 -> 388)
;;  succ:       9
;;              38 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 38, loop depth 0, maybe hot
;;  prev block 37, next block 1, flags: (RTL, MODIFIED)
;;  pred:       37 (FALLTHRU)
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 226 227 296 297
(note 392 391 393 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 393 392 394 38 (set (reg:SI 1 dx [296])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [2 N+0 S4 A32])) "game_of_life.c":229:5 75 {*movsi_internal}
     (nil))
(insn 394 393 395 38 (set (reg:DI 0 ax [297])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 A+0 S8 A64])) "game_of_life.c":229:5 74 {*movdi_internal}
     (nil))
(insn 395 394 396 38 (set (reg:SI 4 si)
        (reg:SI 1 dx [296])) "game_of_life.c":229:5 75 {*movsi_internal}
     (nil))
(insn 396 395 397 38 (set (reg:DI 5 di)
        (reg:DI 0 ax [297])) "game_of_life.c":229:5 74 {*movdi_internal}
     (nil))
(call_insn 397 396 398 38 (call (mem:QI (symbol_ref:DI ("dynamic_array_free") [flags 0x3]  <function_decl 0x7fd3e8e07e00 dynamic_array_free>) [0 dynamic_array_free S1 A8])
        (const_int 0 [0])) "game_of_life.c":229:5 813 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 398 397 406 38 (set (reg/f:DI 0 ax [orig:226 _172 ] [226])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [1 B+0 S8 A64])) "game_of_life.c":230:12 74 {*movdi_internal}
     (nil))
(insn 406 398 418 38 (use (reg/i:DI 0 ax)) "game_of_life.c":231:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 418 406 0 NOTE_INSN_DELETED)

;; Function check_x (check_x, funcdef_no=17, decl_uid=4963, cgraph_uid=18, symbol_order=17)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) r  (1) 0  (2) m {*subsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 32
	 Choosing alt 0 in insn 32:  (0) =rm  (1) %0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3
EBB 4 5
EBB 6

********** Pseudo live ranges #1: **********

  BB 6
   Insn 44: point = 0, n_alt = -1
   Insn 43: point = 0, n_alt = -2
   Insn 39: point = 1, n_alt = -2
   Insn 36: point = 3, n_alt = 0
  BB 5
   Insn 33: point = 4, n_alt = 1
   Insn 32: point = 5, n_alt = 0
   Insn 31: point = 7, n_alt = 0
   Insn 30: point = 8, n_alt = 0
  BB 4
   Insn 24: point = 9, n_alt = -1
   Insn 23: point = 9, n_alt = 1
  BB 3
   Insn 18: point = 9, n_alt = 1
   Insn 17: point = 10, n_alt = 1
   Insn 16: point = 12, n_alt = 0
  BB 2
   Insn 11: point = 13, n_alt = -1
   Insn 10: point = 13, n_alt = 1
   Insn 9: point = 14, n_alt = 0
   Insn 8: point = 15, n_alt = 1
   Insn 7: point = 16, n_alt = 0
   Insn 3: point = 17, n_alt = 1
   Insn 2: point = 17, n_alt = 1
 r82: [2..3]
 r83: [0..1]
 r84: [15..16]
 r85: [13..14]
 r88: [9..10]
 r89: [11..12]
 r93: [4..5]
 r94: [6..8]
 r95: [6..7]
Compressing live ranges: from 17 to 16 - 94%
Ranges after the compression:
 r82: [2..3]
 r83: [0..1]
 r84: [14..15]
 r85: [12..13]
 r88: [8..9]
 r89: [10..11]
 r93: [4..5]
 r94: [6..7]
 r95: [6..7]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 36
changing reg in insn 39
changing reg in insn 39
changing reg in insn 43
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 17
changing reg in insn 18
changing reg in insn 16
changing reg in insn 17
changing reg in insn 32
changing reg in insn 33
changing reg in insn 30
changing reg in insn 31
deleting insn with uid = 39.
deleting insn with uid = 43.
starting the processing of deferred insns
ending the processing of deferred insns


check_x

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={8d,8u} r1={2d,1u} r2={1d} r4={1d,1u} r5={1d,1u} r6={1d,20u} r7={1d,6u} r17={4d,2u} r19={1d,1u,4e} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r36={1d} r37={1d} 
;;    total ref usage 74{30d,40u,4e} in 18{18 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 84 85
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [2 x+0 S4 A32])
        (reg:SI 5 di [ x ])) "game_of_life.c":233:27 75 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 M+0 S4 A32])
        (reg:SI 4 si [ M ])) "game_of_life.c":233:27 75 {*movsi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:SI 0 ax [84])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [2 x+0 S4 A32])) "game_of_life.c":234:9 75 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [2 result_x+0 S4 A32])
        (reg:SI 0 ax [84])) "game_of_life.c":234:9 75 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SI 0 ax [85])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [2 x+0 S4 A32])) "game_of_life.c":235:8 75 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [85])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [2 M+0 S4 A32]))) "game_of_life.c":235:8 11 {*cmpsi_1}
     (nil))
(jump_insn 11 10 12 2 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 19)
            (pc))) "game_of_life.c":235:8 806 {*jcc}
     (nil)
 -> 19)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 88 89
(note 12 11 16 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 16 12 17 3 (set (reg:SI 0 ax [89])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [2 x+0 S4 A32])) "game_of_life.c":235:26 75 {*movsi_internal}
     (nil))
(insn 17 16 18 3 (parallel [
            (set (reg:SI 0 ax [88])
                (minus:SI (reg:SI 0 ax [89])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [2 M+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":235:26 282 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -20 [0xffffffffffffffec])) [2 x+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -24 [0xffffffffffffffe8])) [2 M+0 S4 A32]))
        (nil)))
(insn 18 17 19 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [2 result_x+0 S4 A32])
        (reg:SI 0 ax [88])) "game_of_life.c":235:26 75 {*movsi_internal}
     (nil))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(code_label 19 18 20 4 68 (nil) [1 uses])
(note 20 19 23 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 23 20 24 4 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [2 x+0 S4 A32])
            (const_int 0 [0]))) "game_of_life.c":236:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 24 23 25 4 (set (pc)
        (if_then_else (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 34)
            (pc))) "game_of_life.c":236:8 806 {*jcc}
     (nil)
 -> 34)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 93 94 95
(note 25 24 30 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 30 25 31 5 (set (reg:SI 1 dx [94])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [2 x+0 S4 A32])) "game_of_life.c":236:25 75 {*movsi_internal}
     (nil))
(insn 31 30 32 5 (set (reg:SI 0 ax [95])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 M+0 S4 A32])) "game_of_life.c":236:25 75 {*movsi_internal}
     (nil))
(insn 32 31 33 5 (parallel [
            (set (reg:SI 0 ax [93])
                (plus:SI (reg:SI 0 ax [95])
                    (reg:SI 1 dx [94])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":236:25 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -20 [0xffffffffffffffec])) [2 x+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -24 [0xffffffffffffffe8])) [2 M+0 S4 A32]))
        (nil)))
(insn 33 32 34 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [2 result_x+0 S4 A32])
        (reg:SI 0 ax [93])) "game_of_life.c":236:25 75 {*movsi_internal}
     (nil))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 1, flags: (RTL, MODIFIED)
;;  pred:       4
;;              5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 82 83
(code_label 34 33 35 6 69 (nil) [1 uses])
(note 35 34 36 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 44 6 (set (reg:SI 0 ax [orig:82 _8 ] [82])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [2 result_x+0 S4 A32])) "game_of_life.c":237:12 75 {*movsi_internal}
     (nil))
(insn 44 36 46 6 (use (reg/i:SI 0 ax)) "game_of_life.c":238:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 46 44 0 NOTE_INSN_DELETED)

;; Function check_y (check_y, funcdef_no=18, decl_uid=4966, cgraph_uid=19, symbol_order=18)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) r  (1) 0  (2) m {*subsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 32
	 Choosing alt 0 in insn 32:  (0) =rm  (1) %0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3
EBB 4 5
EBB 6

********** Pseudo live ranges #1: **********

  BB 6
   Insn 44: point = 0, n_alt = -1
   Insn 43: point = 0, n_alt = -2
   Insn 39: point = 1, n_alt = -2
   Insn 36: point = 3, n_alt = 0
  BB 5
   Insn 33: point = 4, n_alt = 1
   Insn 32: point = 5, n_alt = 0
   Insn 31: point = 7, n_alt = 0
   Insn 30: point = 8, n_alt = 0
  BB 4
   Insn 24: point = 9, n_alt = -1
   Insn 23: point = 9, n_alt = 1
  BB 3
   Insn 18: point = 9, n_alt = 1
   Insn 17: point = 10, n_alt = 1
   Insn 16: point = 12, n_alt = 0
  BB 2
   Insn 11: point = 13, n_alt = -1
   Insn 10: point = 13, n_alt = 1
   Insn 9: point = 14, n_alt = 0
   Insn 8: point = 15, n_alt = 1
   Insn 7: point = 16, n_alt = 0
   Insn 3: point = 17, n_alt = 1
   Insn 2: point = 17, n_alt = 1
 r82: [2..3]
 r83: [0..1]
 r84: [15..16]
 r85: [13..14]
 r88: [9..10]
 r89: [11..12]
 r93: [4..5]
 r94: [6..8]
 r95: [6..7]
Compressing live ranges: from 17 to 16 - 94%
Ranges after the compression:
 r82: [2..3]
 r83: [0..1]
 r84: [14..15]
 r85: [12..13]
 r88: [8..9]
 r89: [10..11]
 r93: [4..5]
 r94: [6..7]
 r95: [6..7]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 36
changing reg in insn 39
changing reg in insn 39
changing reg in insn 43
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 17
changing reg in insn 18
changing reg in insn 16
changing reg in insn 17
changing reg in insn 32
changing reg in insn 33
changing reg in insn 30
changing reg in insn 31
deleting insn with uid = 39.
deleting insn with uid = 43.
starting the processing of deferred insns
ending the processing of deferred insns


check_y

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={8d,8u} r1={2d,1u} r2={1d} r4={1d,1u} r5={1d,1u} r6={1d,20u} r7={1d,6u} r17={4d,2u} r19={1d,1u,4e} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r36={1d} r37={1d} 
;;    total ref usage 74{30d,40u,4e} in 18{18 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 84 85
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [2 y+0 S4 A32])
        (reg:SI 5 di [ y ])) "game_of_life.c":240:27 75 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 N+0 S4 A32])
        (reg:SI 4 si [ N ])) "game_of_life.c":240:27 75 {*movsi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:SI 0 ax [84])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [2 y+0 S4 A32])) "game_of_life.c":241:9 75 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [2 result_y+0 S4 A32])
        (reg:SI 0 ax [84])) "game_of_life.c":241:9 75 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SI 0 ax [85])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [2 y+0 S4 A32])) "game_of_life.c":242:8 75 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [85])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [2 N+0 S4 A32]))) "game_of_life.c":242:8 11 {*cmpsi_1}
     (nil))
(jump_insn 11 10 12 2 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 19)
            (pc))) "game_of_life.c":242:8 806 {*jcc}
     (nil)
 -> 19)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 88 89
(note 12 11 16 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 16 12 17 3 (set (reg:SI 0 ax [89])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [2 y+0 S4 A32])) "game_of_life.c":242:26 75 {*movsi_internal}
     (nil))
(insn 17 16 18 3 (parallel [
            (set (reg:SI 0 ax [88])
                (minus:SI (reg:SI 0 ax [89])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [2 N+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":242:26 282 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -20 [0xffffffffffffffec])) [2 y+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -24 [0xffffffffffffffe8])) [2 N+0 S4 A32]))
        (nil)))
(insn 18 17 19 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [2 result_y+0 S4 A32])
        (reg:SI 0 ax [88])) "game_of_life.c":242:26 75 {*movsi_internal}
     (nil))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(code_label 19 18 20 4 72 (nil) [1 uses])
(note 20 19 23 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 23 20 24 4 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [2 y+0 S4 A32])
            (const_int 0 [0]))) "game_of_life.c":243:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 24 23 25 4 (set (pc)
        (if_then_else (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 34)
            (pc))) "game_of_life.c":243:8 806 {*jcc}
     (nil)
 -> 34)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 93 94 95
(note 25 24 30 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 30 25 31 5 (set (reg:SI 1 dx [94])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [2 y+0 S4 A32])) "game_of_life.c":243:25 75 {*movsi_internal}
     (nil))
(insn 31 30 32 5 (set (reg:SI 0 ax [95])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 N+0 S4 A32])) "game_of_life.c":243:25 75 {*movsi_internal}
     (nil))
(insn 32 31 33 5 (parallel [
            (set (reg:SI 0 ax [93])
                (plus:SI (reg:SI 0 ax [95])
                    (reg:SI 1 dx [94])))
            (clobber (reg:CC 17 flags))
        ]) "game_of_life.c":243:25 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -20 [0xffffffffffffffec])) [2 y+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -24 [0xffffffffffffffe8])) [2 N+0 S4 A32]))
        (nil)))
(insn 33 32 34 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [2 result_y+0 S4 A32])
        (reg:SI 0 ax [93])) "game_of_life.c":243:25 75 {*movsi_internal}
     (nil))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 1, flags: (RTL, MODIFIED)
;;  pred:       4
;;              5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 82 83
(code_label 34 33 35 6 73 (nil) [1 uses])
(note 35 34 36 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 44 6 (set (reg:SI 0 ax [orig:82 _8 ] [82])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [2 result_y+0 S4 A32])) "game_of_life.c":244:12 75 {*movsi_internal}
     (nil))
(insn 44 36 46 6 (use (reg/i:SI 0 ax)) "game_of_life.c":245:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 46 44 0 NOTE_INSN_DELETED)
